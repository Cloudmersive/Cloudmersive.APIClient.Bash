#!/usr/bin/env bash

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !
# ! Note:
# !
# ! THIS SCRIPT HAS BEEN AUTOMATICALLY GENERATED USING
# ! swagger-codegen (https://github.com/swagger-api/swagger-codegen)
# ! FROM SWAGGER SPECIFICATION IN JSON.
# !
# !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#
# This is a Bash client for convertapi.
#
# LICENSE:
# 
#
# CONTACT:
# 
#
# MORE INFORMATION:
# 
#

# For improved pattern matching in case statemets
shopt -s extglob

###############################################################################
#
# Make sure Bash is at least in version 4.3
#
###############################################################################
if ! ( (("${BASH_VERSION:0:1}" == "4")) && (("${BASH_VERSION:2:1}" >= "3")) ) \
  && ! (("${BASH_VERSION:0:1}" >= "5")); then
    echo ""
    echo "Sorry - your Bash version is ${BASH_VERSION}"
    echo ""
    echo "You need at least Bash 4.3 to run this script."
    echo ""
    exit 1
fi

###############################################################################
#
# Global variables
#
###############################################################################

##
# The filename of this script for help messages
script_name=$(basename "$0")

##
# Map for headers passed after operation as KEY:VALUE
declare -A header_arguments


##
# Map for operation parameters passed after operation as PARAMETER=VALUE
# These will be mapped to appropriate path or query parameters
# The values in operation_parameters are arrays, so that multiple values
# can be provided for the same parameter if allowed by API specification
declare -A operation_parameters

##
# Declare colors with autodection if output is terminal
if [ -t 1 ]; then
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
    MAGENTA="$(tput setaf 5)"
    CYAN="$(tput setaf 6)"
    WHITE="$(tput setaf 7)"
    BOLD="$(tput bold)"
    OFF="$(tput sgr0)"
else
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    MAGENTA=""
    CYAN=""
    WHITE=""
    BOLD=""
    OFF=""
fi

declare -a result_color_table=( "$WHITE" "$WHITE" "$GREEN" "$YELLOW" "$WHITE" "$MAGENTA" "$WHITE" )

##
# This array stores the minimum number of required occurrences for parameter
# 0 - optional
# 1 - required
declare -A operation_parameters_minimum_occurrences
operation_parameters_minimum_occurrences["compareDocumentDocx:::inputFile1"]=1
operation_parameters_minimum_occurrences["compareDocumentDocx:::inputFile2"]=1
operation_parameters_minimum_occurrences["convertDataCsvToJson:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDataCsvToJson:::columnNamesFromFirstRow"]=0
operation_parameters_minimum_occurrences["convertDataJsonToXml:::JsonObject"]=1
operation_parameters_minimum_occurrences["convertDataXlsToJson:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDataXlsxToJson:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDataXmlEditAddAttributeWithXPath:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDataXmlEditAddAttributeWithXPath:::XPathExpression"]=1
operation_parameters_minimum_occurrences["convertDataXmlEditAddAttributeWithXPath:::XmlAttributeName"]=1
operation_parameters_minimum_occurrences["convertDataXmlEditAddAttributeWithXPath:::XmlAttributeValue"]=1
operation_parameters_minimum_occurrences["convertDataXmlEditAddChildWithXPath:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDataXmlEditAddChildWithXPath:::XPathExpression"]=1
operation_parameters_minimum_occurrences["convertDataXmlEditAddChildWithXPath:::XmlNodeToAdd"]=1
operation_parameters_minimum_occurrences["convertDataXmlEditRemoveAllChildNodesWithXPath:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDataXmlEditRemoveAllChildNodesWithXPath:::XPathExpression"]=1
operation_parameters_minimum_occurrences["convertDataXmlEditReplaceWithXPath:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDataXmlEditReplaceWithXPath:::XPathExpression"]=1
operation_parameters_minimum_occurrences["convertDataXmlEditReplaceWithXPath:::XmlNodeReplacement"]=1
operation_parameters_minimum_occurrences["convertDataXmlEditSetValueWithXPath:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDataXmlEditSetValueWithXPath:::XPathExpression"]=1
operation_parameters_minimum_occurrences["convertDataXmlEditSetValueWithXPath:::XmlValue"]=1
operation_parameters_minimum_occurrences["convertDataXmlFilterWithXPath:::XPathExpression"]=1
operation_parameters_minimum_occurrences["convertDataXmlFilterWithXPath:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDataXmlQueryWithXQuery:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDataXmlQueryWithXQuery:::XQuery"]=1
operation_parameters_minimum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile1"]=1
operation_parameters_minimum_occurrences["convertDataXmlQueryWithXQueryMulti:::XQuery"]=1
operation_parameters_minimum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile2"]=0
operation_parameters_minimum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile3"]=0
operation_parameters_minimum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile4"]=0
operation_parameters_minimum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile5"]=0
operation_parameters_minimum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile6"]=0
operation_parameters_minimum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile7"]=0
operation_parameters_minimum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile8"]=0
operation_parameters_minimum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile9"]=0
operation_parameters_minimum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile10"]=0
operation_parameters_minimum_occurrences["convertDataXmlRemoveWithXPath:::XPathExpression"]=1
operation_parameters_minimum_occurrences["convertDataXmlRemoveWithXPath:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDataXmlToJson:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDataXmlTransformWithXsltToXml:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDataXmlTransformWithXsltToXml:::transformFile"]=1
operation_parameters_minimum_occurrences["convertDocumentAutodetectGetInfo:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentAutodetectToJpg:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentAutodetectToJpg:::quality"]=0
operation_parameters_minimum_occurrences["convertDocumentAutodetectToPdf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentAutodetectToPngArray:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentAutodetectToThumbnail:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentAutodetectToThumbnail:::maxWidth"]=0
operation_parameters_minimum_occurrences["convertDocumentAutodetectToThumbnail:::maxHeight"]=0
operation_parameters_minimum_occurrences["convertDocumentAutodetectToThumbnail:::extension"]=0
operation_parameters_minimum_occurrences["convertDocumentAutodetectToThumbnailsAdvanced:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentAutodetectToThumbnailsAdvanced:::pages"]=0
operation_parameters_minimum_occurrences["convertDocumentAutodetectToThumbnailsAdvanced:::maxWidth"]=0
operation_parameters_minimum_occurrences["convertDocumentAutodetectToThumbnailsAdvanced:::maxHeight"]=0
operation_parameters_minimum_occurrences["convertDocumentAutodetectToThumbnailsAdvanced:::extension"]=0
operation_parameters_minimum_occurrences["convertDocumentAutodetectToTxt:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentAutodetectToTxt:::textFormattingMode"]=0
operation_parameters_minimum_occurrences["convertDocumentCsvToXlsx:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentDocToDocx:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentDocToPdf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentDocToTxt:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentDocxToHtml:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentDocxToJpg:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentDocxToJpg:::quality"]=0
operation_parameters_minimum_occurrences["convertDocumentDocxToPdf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentDocxToPng:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentDocxToRtf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentDocxToTxt:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentDocxToTxt:::textFormattingMode"]=0
operation_parameters_minimum_occurrences["convertDocumentEmlToHtml:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentEmlToHtml:::bodyOnly"]=0
operation_parameters_minimum_occurrences["convertDocumentEmlToHtml:::includeAttachments"]=0
operation_parameters_minimum_occurrences["convertDocumentEmlToJpg:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentEmlToJpg:::quality"]=0
operation_parameters_minimum_occurrences["convertDocumentEmlToPdf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentEmlToPdf:::bodyOnly"]=0
operation_parameters_minimum_occurrences["convertDocumentEmlToPng:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentGetFileTypeIcon:::fileExtension"]=1
operation_parameters_minimum_occurrences["convertDocumentGetFileTypeIcon:::iconSize"]=0
operation_parameters_minimum_occurrences["convertDocumentGetFileTypeIconAdvanced:::fileExtension"]=1
operation_parameters_minimum_occurrences["convertDocumentGetFileTypeIconAdvanced:::iconSize"]=0
operation_parameters_minimum_occurrences["convertDocumentHtmlToPdf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentHtmlToPng:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentHtmlToTxt:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentKeynoteToJpg:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentKeynoteToJpg:::quality"]=0
operation_parameters_minimum_occurrences["convertDocumentKeynoteToPdf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentKeynoteToPng:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentKeynoteToPptx:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentMsgToHtml:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentMsgToHtml:::bodyOnly"]=0
operation_parameters_minimum_occurrences["convertDocumentMsgToHtml:::includeAttachments"]=0
operation_parameters_minimum_occurrences["convertDocumentMsgToJpg:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentMsgToJpg:::quality"]=0
operation_parameters_minimum_occurrences["convertDocumentMsgToPdf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentMsgToPdf:::bodyOnly"]=0
operation_parameters_minimum_occurrences["convertDocumentMsgToPng:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentOdpToJpg:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentOdpToJpg:::quality"]=0
operation_parameters_minimum_occurrences["convertDocumentOdpToPdf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentOdpToPng:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentOdpToPptx:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentOdsToJpg:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentOdsToJpg:::quality"]=0
operation_parameters_minimum_occurrences["convertDocumentOdsToPdf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentOdsToPng:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentOdsToXlsx:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentOdtToDocx:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentOdtToJpg:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentOdtToJpg:::quality"]=0
operation_parameters_minimum_occurrences["convertDocumentOdtToPdf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentOdtToPng:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentPdfToDocx:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentPdfToDocxRasterize:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentPdfToJpg:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentPdfToJpg:::quality"]=0
operation_parameters_minimum_occurrences["convertDocumentPdfToPngArray:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentPdfToPngSingle:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentPdfToPptx:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentPdfToTxt:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentPdfToTxt:::textFormattingMode"]=0
operation_parameters_minimum_occurrences["convertDocumentPngArrayToPdf:::inputFile1"]=1
operation_parameters_minimum_occurrences["convertDocumentPngArrayToPdf:::inputFile2"]=1
operation_parameters_minimum_occurrences["convertDocumentPngArrayToPdf:::inputFile3"]=0
operation_parameters_minimum_occurrences["convertDocumentPngArrayToPdf:::inputFile4"]=0
operation_parameters_minimum_occurrences["convertDocumentPngArrayToPdf:::inputFile5"]=0
operation_parameters_minimum_occurrences["convertDocumentPngArrayToPdf:::inputFile6"]=0
operation_parameters_minimum_occurrences["convertDocumentPngArrayToPdf:::inputFile7"]=0
operation_parameters_minimum_occurrences["convertDocumentPngArrayToPdf:::inputFile8"]=0
operation_parameters_minimum_occurrences["convertDocumentPngArrayToPdf:::inputFile9"]=0
operation_parameters_minimum_occurrences["convertDocumentPngArrayToPdf:::inputFile10"]=0
operation_parameters_minimum_occurrences["convertDocumentPptToPdf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentPptToPptx:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentPptxToPdf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentPptxToPng:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentPptxToTxt:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentRtfToDocx:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentRtfToHtml:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentRtfToJpg:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentRtfToJpg:::quality"]=0
operation_parameters_minimum_occurrences["convertDocumentRtfToPdf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentRtfToPng:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentXlsToCsv:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentXlsToPdf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentXlsToXlsx:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentXlsxToCsv:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentXlsxToCsv:::outputEncoding"]=0
operation_parameters_minimum_occurrences["convertDocumentXlsxToCsvMulti:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentXlsxToCsvMulti:::outputEncoding"]=0
operation_parameters_minimum_occurrences["convertDocumentXlsxToPdf:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentXlsxToPng:::inputFile"]=1
operation_parameters_minimum_occurrences["convertDocumentXlsxToTxt:::inputFile"]=1
operation_parameters_minimum_occurrences["convertImageGetImageInfo:::inputFile"]=1
operation_parameters_minimum_occurrences["convertImageImageFormatConvert:::format1"]=1
operation_parameters_minimum_occurrences["convertImageImageFormatConvert:::format2"]=1
operation_parameters_minimum_occurrences["convertImageImageFormatConvert:::inputFile"]=1
operation_parameters_minimum_occurrences["convertImageImageSetDPI:::dpi"]=1
operation_parameters_minimum_occurrences["convertImageImageSetDPI:::inputFile"]=1
operation_parameters_minimum_occurrences["convertImageMultipageImageFormatConvert:::format1"]=1
operation_parameters_minimum_occurrences["convertImageMultipageImageFormatConvert:::format2"]=1
operation_parameters_minimum_occurrences["convertImageMultipageImageFormatConvert:::inputFile"]=1
operation_parameters_minimum_occurrences["convertTemplateApplyDocxTemplate:::inputFile"]=1
operation_parameters_minimum_occurrences["convertTemplateApplyDocxTemplate:::templateDefinition"]=0
operation_parameters_minimum_occurrences["convertTemplateApplyHtmlTemplate:::value"]=1
operation_parameters_minimum_occurrences["convertWebHtmlToDocx:::inputRequest"]=1
operation_parameters_minimum_occurrences["convertWebHtmlToPdf:::input"]=1
operation_parameters_minimum_occurrences["convertWebHtmlToPng:::input"]=1
operation_parameters_minimum_occurrences["convertWebHtmlToTxt:::input"]=1
operation_parameters_minimum_occurrences["convertWebMdToHtml:::inputFile"]=1
operation_parameters_minimum_occurrences["convertWebUrlToPdf:::input"]=1
operation_parameters_minimum_occurrences["convertWebUrlToScreenshot:::input"]=1
operation_parameters_minimum_occurrences["convertWebUrlToTxt:::input"]=1
operation_parameters_minimum_occurrences["editDocumentBeginEditing:::inputFile"]=1
operation_parameters_minimum_occurrences["editDocumentDocxBody:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxCreateBlankDocument:::input"]=1
operation_parameters_minimum_occurrences["editDocumentDocxDeletePages:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxDeleteTableRow:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxDeleteTableRowRange:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxFindParagraph:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxGetComments:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxGetCommentsHierarchical:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxGetHeadersAndFooters:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxGetImages:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxGetSections:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxGetStyles:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxGetTableByIndex:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxGetTableRow:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxGetTables:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxInsertCommentOnParagraph:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxInsertImage:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxInsertParagraph:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxInsertTable:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxInsertTableRow:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxPages:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxRemoveHeadersAndFooters:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxRemoveObject:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxReplace:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxReplaceParagraph:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxSetFooter:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxSetFooterAddPageNumber:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxSetHeader:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxUpdateTableCell:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentDocxUpdateTableRow:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentFinishEditing:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentPptxDeleteSlides:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentPptxReplace:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxAppendRow:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxClearCellByIndex:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxClearRow:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxCreateBlankSpreadsheet:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxCreateSpreadsheetFromData:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxDeleteWorksheet:::reqConfig"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxDisableSharedWorkbook:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxEnableSharedWorkbook:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxGetCellByIdentifier:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxGetCellByIndex:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxGetColumns:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxGetImages:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxGetRowsAndCells:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxGetSpecificRow:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxGetStyles:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxGetWorksheets:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxInsertWorksheet:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxRenameWorksheet:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxSetCellByIdentifier:::input"]=1
operation_parameters_minimum_occurrences["editDocumentXlsxSetCellByIndex:::input"]=1
operation_parameters_minimum_occurrences["editPdfAddAnnotations:::request"]=1
operation_parameters_minimum_occurrences["editPdfDecrypt:::password"]=1
operation_parameters_minimum_occurrences["editPdfDecrypt:::inputFile"]=1
operation_parameters_minimum_occurrences["editPdfDeletePages:::inputFile"]=1
operation_parameters_minimum_occurrences["editPdfDeletePages:::pageStart"]=1
operation_parameters_minimum_occurrences["editPdfDeletePages:::pageEnd"]=1
operation_parameters_minimum_occurrences["editPdfEncrypt:::inputFile"]=1
operation_parameters_minimum_occurrences["editPdfEncrypt:::userPassword"]=0
operation_parameters_minimum_occurrences["editPdfEncrypt:::ownerPassword"]=0
operation_parameters_minimum_occurrences["editPdfEncrypt:::encryptionKeyLength"]=0
operation_parameters_minimum_occurrences["editPdfGetAnnotations:::inputFile"]=1
operation_parameters_minimum_occurrences["editPdfGetFormFields:::inputFile"]=1
operation_parameters_minimum_occurrences["editPdfGetMetadata:::inputFile"]=1
operation_parameters_minimum_occurrences["editPdfGetPdfTextByPages:::inputFile"]=1
operation_parameters_minimum_occurrences["editPdfGetPdfTextByPages:::textFormattingMode"]=0
operation_parameters_minimum_occurrences["editPdfInsertPages:::sourceFile"]=1
operation_parameters_minimum_occurrences["editPdfInsertPages:::destinationFile"]=1
operation_parameters_minimum_occurrences["editPdfInsertPages:::pageStartSource"]=1
operation_parameters_minimum_occurrences["editPdfInsertPages:::pageEndSource"]=1
operation_parameters_minimum_occurrences["editPdfInsertPages:::pageInsertBeforeDesitnation"]=1
operation_parameters_minimum_occurrences["editPdfRasterize:::inputFile"]=1
operation_parameters_minimum_occurrences["editPdfRemoveAllAnnotations:::inputFile"]=1
operation_parameters_minimum_occurrences["editPdfRemoveAnnotationItem:::inputFile"]=1
operation_parameters_minimum_occurrences["editPdfRemoveAnnotationItem:::annotationIndex"]=1
operation_parameters_minimum_occurrences["editPdfRotateAllPages:::inputFile"]=1
operation_parameters_minimum_occurrences["editPdfRotateAllPages:::rotationAngle"]=1
operation_parameters_minimum_occurrences["editPdfRotatePageRange:::inputFile"]=1
operation_parameters_minimum_occurrences["editPdfRotatePageRange:::rotationAngle"]=1
operation_parameters_minimum_occurrences["editPdfRotatePageRange:::pageStart"]=1
operation_parameters_minimum_occurrences["editPdfRotatePageRange:::pageEnd"]=1
operation_parameters_minimum_occurrences["editPdfSetFormFields:::fieldValues"]=1
operation_parameters_minimum_occurrences["editPdfSetMetadata:::request"]=1
operation_parameters_minimum_occurrences["editPdfSetPermissions:::ownerPassword"]=1
operation_parameters_minimum_occurrences["editPdfSetPermissions:::userPassword"]=1
operation_parameters_minimum_occurrences["editPdfSetPermissions:::inputFile"]=1
operation_parameters_minimum_occurrences["editPdfSetPermissions:::encryptionKeyLength"]=0
operation_parameters_minimum_occurrences["editPdfSetPermissions:::allowPrinting"]=0
operation_parameters_minimum_occurrences["editPdfSetPermissions:::allowDocumentAssembly"]=0
operation_parameters_minimum_occurrences["editPdfSetPermissions:::allowContentExtraction"]=0
operation_parameters_minimum_occurrences["editPdfSetPermissions:::allowFormFilling"]=0
operation_parameters_minimum_occurrences["editPdfSetPermissions:::allowEditing"]=0
operation_parameters_minimum_occurrences["editPdfSetPermissions:::allowAnnotations"]=0
operation_parameters_minimum_occurrences["editPdfSetPermissions:::allowDegradedPrinting"]=0
operation_parameters_minimum_occurrences["editPdfWatermarkText:::watermarkText"]=1
operation_parameters_minimum_occurrences["editPdfWatermarkText:::inputFile"]=1
operation_parameters_minimum_occurrences["editPdfWatermarkText:::fontName"]=0
operation_parameters_minimum_occurrences["editPdfWatermarkText:::fontSize"]=0
operation_parameters_minimum_occurrences["editPdfWatermarkText:::fontColor"]=0
operation_parameters_minimum_occurrences["editPdfWatermarkText:::fontTransparency"]=0
operation_parameters_minimum_occurrences["editTextBase64Decode:::request"]=1
operation_parameters_minimum_occurrences["editTextBase64Detect:::request"]=1
operation_parameters_minimum_occurrences["editTextBase64Encode:::request"]=1
operation_parameters_minimum_occurrences["editTextChangeLineEndings:::lineEndingType"]=1
operation_parameters_minimum_occurrences["editTextChangeLineEndings:::inputFile"]=1
operation_parameters_minimum_occurrences["editTextDetectLineEndings:::inputFile"]=1
operation_parameters_minimum_occurrences["editTextFindRegex:::request"]=1
operation_parameters_minimum_occurrences["editTextFindSimple:::request"]=1
operation_parameters_minimum_occurrences["editTextRemoveAllWhitespace:::request"]=1
operation_parameters_minimum_occurrences["editTextRemoveHtml:::request"]=1
operation_parameters_minimum_occurrences["editTextReplaceRegex:::request"]=1
operation_parameters_minimum_occurrences["editTextReplaceSimple:::request"]=1
operation_parameters_minimum_occurrences["editTextTextEncodingDetect:::inputFile"]=1
operation_parameters_minimum_occurrences["editTextTrimWhitespace:::request"]=1
operation_parameters_minimum_occurrences["mergeDocumentDocx:::inputFile1"]=1
operation_parameters_minimum_occurrences["mergeDocumentDocx:::inputFile2"]=1
operation_parameters_minimum_occurrences["mergeDocumentDocxMulti:::inputFile1"]=1
operation_parameters_minimum_occurrences["mergeDocumentDocxMulti:::inputFile2"]=1
operation_parameters_minimum_occurrences["mergeDocumentDocxMulti:::inputFile3"]=0
operation_parameters_minimum_occurrences["mergeDocumentDocxMulti:::inputFile4"]=0
operation_parameters_minimum_occurrences["mergeDocumentDocxMulti:::inputFile5"]=0
operation_parameters_minimum_occurrences["mergeDocumentDocxMulti:::inputFile6"]=0
operation_parameters_minimum_occurrences["mergeDocumentDocxMulti:::inputFile7"]=0
operation_parameters_minimum_occurrences["mergeDocumentDocxMulti:::inputFile8"]=0
operation_parameters_minimum_occurrences["mergeDocumentDocxMulti:::inputFile9"]=0
operation_parameters_minimum_occurrences["mergeDocumentDocxMulti:::inputFile10"]=0
operation_parameters_minimum_occurrences["mergeDocumentPdf:::inputFile1"]=1
operation_parameters_minimum_occurrences["mergeDocumentPdf:::inputFile2"]=1
operation_parameters_minimum_occurrences["mergeDocumentPdfMulti:::inputFile1"]=1
operation_parameters_minimum_occurrences["mergeDocumentPdfMulti:::inputFile2"]=1
operation_parameters_minimum_occurrences["mergeDocumentPdfMulti:::inputFile3"]=0
operation_parameters_minimum_occurrences["mergeDocumentPdfMulti:::inputFile4"]=0
operation_parameters_minimum_occurrences["mergeDocumentPdfMulti:::inputFile5"]=0
operation_parameters_minimum_occurrences["mergeDocumentPdfMulti:::inputFile6"]=0
operation_parameters_minimum_occurrences["mergeDocumentPdfMulti:::inputFile7"]=0
operation_parameters_minimum_occurrences["mergeDocumentPdfMulti:::inputFile8"]=0
operation_parameters_minimum_occurrences["mergeDocumentPdfMulti:::inputFile9"]=0
operation_parameters_minimum_occurrences["mergeDocumentPdfMulti:::inputFile10"]=0
operation_parameters_minimum_occurrences["mergeDocumentPng:::inputFile1"]=1
operation_parameters_minimum_occurrences["mergeDocumentPng:::inputFile2"]=1
operation_parameters_minimum_occurrences["mergeDocumentPngMulti:::inputFile1"]=1
operation_parameters_minimum_occurrences["mergeDocumentPngMulti:::inputFile2"]=1
operation_parameters_minimum_occurrences["mergeDocumentPngMulti:::inputFile3"]=0
operation_parameters_minimum_occurrences["mergeDocumentPngMulti:::inputFile4"]=0
operation_parameters_minimum_occurrences["mergeDocumentPngMulti:::inputFile5"]=0
operation_parameters_minimum_occurrences["mergeDocumentPngMulti:::inputFile6"]=0
operation_parameters_minimum_occurrences["mergeDocumentPngMulti:::inputFile7"]=0
operation_parameters_minimum_occurrences["mergeDocumentPngMulti:::inputFile8"]=0
operation_parameters_minimum_occurrences["mergeDocumentPngMulti:::inputFile9"]=0
operation_parameters_minimum_occurrences["mergeDocumentPngMulti:::inputFile10"]=0
operation_parameters_minimum_occurrences["mergeDocumentPptx:::inputFile1"]=1
operation_parameters_minimum_occurrences["mergeDocumentPptx:::inputFile2"]=1
operation_parameters_minimum_occurrences["mergeDocumentPptxMulti:::inputFile1"]=1
operation_parameters_minimum_occurrences["mergeDocumentPptxMulti:::inputFile2"]=1
operation_parameters_minimum_occurrences["mergeDocumentPptxMulti:::inputFile3"]=0
operation_parameters_minimum_occurrences["mergeDocumentPptxMulti:::inputFile4"]=0
operation_parameters_minimum_occurrences["mergeDocumentPptxMulti:::inputFile5"]=0
operation_parameters_minimum_occurrences["mergeDocumentPptxMulti:::inputFile6"]=0
operation_parameters_minimum_occurrences["mergeDocumentPptxMulti:::inputFile7"]=0
operation_parameters_minimum_occurrences["mergeDocumentPptxMulti:::inputFile8"]=0
operation_parameters_minimum_occurrences["mergeDocumentPptxMulti:::inputFile9"]=0
operation_parameters_minimum_occurrences["mergeDocumentPptxMulti:::inputFile10"]=0
operation_parameters_minimum_occurrences["mergeDocumentTxt:::inputFile1"]=1
operation_parameters_minimum_occurrences["mergeDocumentTxt:::inputFile2"]=1
operation_parameters_minimum_occurrences["mergeDocumentTxtMulti:::inputFile1"]=1
operation_parameters_minimum_occurrences["mergeDocumentTxtMulti:::inputFile2"]=1
operation_parameters_minimum_occurrences["mergeDocumentTxtMulti:::inputFile3"]=0
operation_parameters_minimum_occurrences["mergeDocumentTxtMulti:::inputFile4"]=0
operation_parameters_minimum_occurrences["mergeDocumentTxtMulti:::inputFile5"]=0
operation_parameters_minimum_occurrences["mergeDocumentTxtMulti:::inputFile6"]=0
operation_parameters_minimum_occurrences["mergeDocumentTxtMulti:::inputFile7"]=0
operation_parameters_minimum_occurrences["mergeDocumentTxtMulti:::inputFile8"]=0
operation_parameters_minimum_occurrences["mergeDocumentTxtMulti:::inputFile9"]=0
operation_parameters_minimum_occurrences["mergeDocumentTxtMulti:::inputFile10"]=0
operation_parameters_minimum_occurrences["mergeDocumentXlsx:::inputFile1"]=1
operation_parameters_minimum_occurrences["mergeDocumentXlsx:::inputFile2"]=1
operation_parameters_minimum_occurrences["mergeDocumentXlsxMulti:::inputFile1"]=1
operation_parameters_minimum_occurrences["mergeDocumentXlsxMulti:::inputFile2"]=1
operation_parameters_minimum_occurrences["mergeDocumentXlsxMulti:::inputFile3"]=0
operation_parameters_minimum_occurrences["mergeDocumentXlsxMulti:::inputFile4"]=0
operation_parameters_minimum_occurrences["mergeDocumentXlsxMulti:::inputFile5"]=0
operation_parameters_minimum_occurrences["mergeDocumentXlsxMulti:::inputFile6"]=0
operation_parameters_minimum_occurrences["mergeDocumentXlsxMulti:::inputFile7"]=0
operation_parameters_minimum_occurrences["mergeDocumentXlsxMulti:::inputFile8"]=0
operation_parameters_minimum_occurrences["mergeDocumentXlsxMulti:::inputFile9"]=0
operation_parameters_minimum_occurrences["mergeDocumentXlsxMulti:::inputFile10"]=0
operation_parameters_minimum_occurrences["splitDocumentDocx:::inputFile"]=1
operation_parameters_minimum_occurrences["splitDocumentDocx:::returnDocumentContents"]=0
operation_parameters_minimum_occurrences["splitDocumentPdfByPage:::inputFile"]=1
operation_parameters_minimum_occurrences["splitDocumentPdfByPage:::returnDocumentContents"]=0
operation_parameters_minimum_occurrences["splitDocumentPptx:::inputFile"]=1
operation_parameters_minimum_occurrences["splitDocumentPptx:::returnDocumentContents"]=0
operation_parameters_minimum_occurrences["splitDocumentTxtByLine:::inputFile"]=1
operation_parameters_minimum_occurrences["splitDocumentTxtByString:::inputFile"]=1
operation_parameters_minimum_occurrences["splitDocumentTxtByString:::splitDelimiter"]=1
operation_parameters_minimum_occurrences["splitDocumentTxtByString:::skipEmptyElements"]=0
operation_parameters_minimum_occurrences["splitDocumentXlsx:::inputFile"]=1
operation_parameters_minimum_occurrences["splitDocumentXlsx:::returnDocumentContents"]=0
operation_parameters_minimum_occurrences["validateDocumentAutodetectValidation:::inputFile"]=1
operation_parameters_minimum_occurrences["validateDocumentCsvValidation:::inputFile"]=1
operation_parameters_minimum_occurrences["validateDocumentDocxValidation:::inputFile"]=1
operation_parameters_minimum_occurrences["validateDocumentEmlValidation:::inputFile"]=1
operation_parameters_minimum_occurrences["validateDocumentExecutableValidation:::inputFile"]=1
operation_parameters_minimum_occurrences["validateDocumentGZipValidation:::inputFile"]=1
operation_parameters_minimum_occurrences["validateDocumentJsonValidation:::inputFile"]=1
operation_parameters_minimum_occurrences["validateDocumentMsgValidation:::inputFile"]=1
operation_parameters_minimum_occurrences["validateDocumentPdfValidation:::inputFile"]=1
operation_parameters_minimum_occurrences["validateDocumentPptxValidation:::inputFile"]=1
operation_parameters_minimum_occurrences["validateDocumentRarValidation:::inputFile"]=1
operation_parameters_minimum_occurrences["validateDocumentTarValidation:::inputFile"]=1
operation_parameters_minimum_occurrences["validateDocumentXlsxValidation:::inputFile"]=1
operation_parameters_minimum_occurrences["validateDocumentXmlValidation:::inputFile"]=1
operation_parameters_minimum_occurrences["validateDocumentZipValidation:::inputFile"]=1
operation_parameters_minimum_occurrences["viewerToolsCreateSimple:::inputFile"]=1
operation_parameters_minimum_occurrences["zipArchiveZipCreate:::inputFile1"]=1
operation_parameters_minimum_occurrences["zipArchiveZipCreate:::inputFile2"]=0
operation_parameters_minimum_occurrences["zipArchiveZipCreate:::inputFile3"]=0
operation_parameters_minimum_occurrences["zipArchiveZipCreate:::inputFile4"]=0
operation_parameters_minimum_occurrences["zipArchiveZipCreate:::inputFile5"]=0
operation_parameters_minimum_occurrences["zipArchiveZipCreate:::inputFile6"]=0
operation_parameters_minimum_occurrences["zipArchiveZipCreate:::inputFile7"]=0
operation_parameters_minimum_occurrences["zipArchiveZipCreate:::inputFile8"]=0
operation_parameters_minimum_occurrences["zipArchiveZipCreate:::inputFile9"]=0
operation_parameters_minimum_occurrences["zipArchiveZipCreate:::inputFile10"]=0
operation_parameters_minimum_occurrences["zipArchiveZipCreateAdvanced:::request"]=1
operation_parameters_minimum_occurrences["zipArchiveZipDecrypt:::inputFile"]=1
operation_parameters_minimum_occurrences["zipArchiveZipDecrypt:::zipPassword"]=1
operation_parameters_minimum_occurrences["zipArchiveZipEncryptAdvanced:::encryptionRequest"]=1
operation_parameters_minimum_occurrences["zipArchiveZipExtract:::inputFile"]=1

##
# This array stores the maximum number of allowed occurrences for parameter
# 1 - single value
# 2 - 2 values
# N - N values
# 0 - unlimited
declare -A operation_parameters_maximum_occurrences
operation_parameters_maximum_occurrences["compareDocumentDocx:::inputFile1"]=0
operation_parameters_maximum_occurrences["compareDocumentDocx:::inputFile2"]=0
operation_parameters_maximum_occurrences["convertDataCsvToJson:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDataCsvToJson:::columnNamesFromFirstRow"]=0
operation_parameters_maximum_occurrences["convertDataJsonToXml:::JsonObject"]=0
operation_parameters_maximum_occurrences["convertDataXlsToJson:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDataXlsxToJson:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDataXmlEditAddAttributeWithXPath:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDataXmlEditAddAttributeWithXPath:::XPathExpression"]=0
operation_parameters_maximum_occurrences["convertDataXmlEditAddAttributeWithXPath:::XmlAttributeName"]=0
operation_parameters_maximum_occurrences["convertDataXmlEditAddAttributeWithXPath:::XmlAttributeValue"]=0
operation_parameters_maximum_occurrences["convertDataXmlEditAddChildWithXPath:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDataXmlEditAddChildWithXPath:::XPathExpression"]=0
operation_parameters_maximum_occurrences["convertDataXmlEditAddChildWithXPath:::XmlNodeToAdd"]=0
operation_parameters_maximum_occurrences["convertDataXmlEditRemoveAllChildNodesWithXPath:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDataXmlEditRemoveAllChildNodesWithXPath:::XPathExpression"]=0
operation_parameters_maximum_occurrences["convertDataXmlEditReplaceWithXPath:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDataXmlEditReplaceWithXPath:::XPathExpression"]=0
operation_parameters_maximum_occurrences["convertDataXmlEditReplaceWithXPath:::XmlNodeReplacement"]=0
operation_parameters_maximum_occurrences["convertDataXmlEditSetValueWithXPath:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDataXmlEditSetValueWithXPath:::XPathExpression"]=0
operation_parameters_maximum_occurrences["convertDataXmlEditSetValueWithXPath:::XmlValue"]=0
operation_parameters_maximum_occurrences["convertDataXmlFilterWithXPath:::XPathExpression"]=0
operation_parameters_maximum_occurrences["convertDataXmlFilterWithXPath:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDataXmlQueryWithXQuery:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDataXmlQueryWithXQuery:::XQuery"]=0
operation_parameters_maximum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile1"]=0
operation_parameters_maximum_occurrences["convertDataXmlQueryWithXQueryMulti:::XQuery"]=0
operation_parameters_maximum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile2"]=0
operation_parameters_maximum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile3"]=0
operation_parameters_maximum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile4"]=0
operation_parameters_maximum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile5"]=0
operation_parameters_maximum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile6"]=0
operation_parameters_maximum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile7"]=0
operation_parameters_maximum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile8"]=0
operation_parameters_maximum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile9"]=0
operation_parameters_maximum_occurrences["convertDataXmlQueryWithXQueryMulti:::inputFile10"]=0
operation_parameters_maximum_occurrences["convertDataXmlRemoveWithXPath:::XPathExpression"]=0
operation_parameters_maximum_occurrences["convertDataXmlRemoveWithXPath:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDataXmlToJson:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDataXmlTransformWithXsltToXml:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDataXmlTransformWithXsltToXml:::transformFile"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectGetInfo:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectToJpg:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectToJpg:::quality"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectToPdf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectToPngArray:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectToThumbnail:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectToThumbnail:::maxWidth"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectToThumbnail:::maxHeight"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectToThumbnail:::extension"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectToThumbnailsAdvanced:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectToThumbnailsAdvanced:::pages"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectToThumbnailsAdvanced:::maxWidth"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectToThumbnailsAdvanced:::maxHeight"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectToThumbnailsAdvanced:::extension"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectToTxt:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentAutodetectToTxt:::textFormattingMode"]=0
operation_parameters_maximum_occurrences["convertDocumentCsvToXlsx:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentDocToDocx:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentDocToPdf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentDocToTxt:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentDocxToHtml:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentDocxToJpg:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentDocxToJpg:::quality"]=0
operation_parameters_maximum_occurrences["convertDocumentDocxToPdf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentDocxToPng:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentDocxToRtf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentDocxToTxt:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentDocxToTxt:::textFormattingMode"]=0
operation_parameters_maximum_occurrences["convertDocumentEmlToHtml:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentEmlToHtml:::bodyOnly"]=0
operation_parameters_maximum_occurrences["convertDocumentEmlToHtml:::includeAttachments"]=0
operation_parameters_maximum_occurrences["convertDocumentEmlToJpg:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentEmlToJpg:::quality"]=0
operation_parameters_maximum_occurrences["convertDocumentEmlToPdf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentEmlToPdf:::bodyOnly"]=0
operation_parameters_maximum_occurrences["convertDocumentEmlToPng:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentGetFileTypeIcon:::fileExtension"]=0
operation_parameters_maximum_occurrences["convertDocumentGetFileTypeIcon:::iconSize"]=0
operation_parameters_maximum_occurrences["convertDocumentGetFileTypeIconAdvanced:::fileExtension"]=0
operation_parameters_maximum_occurrences["convertDocumentGetFileTypeIconAdvanced:::iconSize"]=0
operation_parameters_maximum_occurrences["convertDocumentHtmlToPdf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentHtmlToPng:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentHtmlToTxt:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentKeynoteToJpg:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentKeynoteToJpg:::quality"]=0
operation_parameters_maximum_occurrences["convertDocumentKeynoteToPdf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentKeynoteToPng:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentKeynoteToPptx:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentMsgToHtml:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentMsgToHtml:::bodyOnly"]=0
operation_parameters_maximum_occurrences["convertDocumentMsgToHtml:::includeAttachments"]=0
operation_parameters_maximum_occurrences["convertDocumentMsgToJpg:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentMsgToJpg:::quality"]=0
operation_parameters_maximum_occurrences["convertDocumentMsgToPdf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentMsgToPdf:::bodyOnly"]=0
operation_parameters_maximum_occurrences["convertDocumentMsgToPng:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentOdpToJpg:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentOdpToJpg:::quality"]=0
operation_parameters_maximum_occurrences["convertDocumentOdpToPdf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentOdpToPng:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentOdpToPptx:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentOdsToJpg:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentOdsToJpg:::quality"]=0
operation_parameters_maximum_occurrences["convertDocumentOdsToPdf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentOdsToPng:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentOdsToXlsx:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentOdtToDocx:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentOdtToJpg:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentOdtToJpg:::quality"]=0
operation_parameters_maximum_occurrences["convertDocumentOdtToPdf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentOdtToPng:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentPdfToDocx:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentPdfToDocxRasterize:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentPdfToJpg:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentPdfToJpg:::quality"]=0
operation_parameters_maximum_occurrences["convertDocumentPdfToPngArray:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentPdfToPngSingle:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentPdfToPptx:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentPdfToTxt:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentPdfToTxt:::textFormattingMode"]=0
operation_parameters_maximum_occurrences["convertDocumentPngArrayToPdf:::inputFile1"]=0
operation_parameters_maximum_occurrences["convertDocumentPngArrayToPdf:::inputFile2"]=0
operation_parameters_maximum_occurrences["convertDocumentPngArrayToPdf:::inputFile3"]=0
operation_parameters_maximum_occurrences["convertDocumentPngArrayToPdf:::inputFile4"]=0
operation_parameters_maximum_occurrences["convertDocumentPngArrayToPdf:::inputFile5"]=0
operation_parameters_maximum_occurrences["convertDocumentPngArrayToPdf:::inputFile6"]=0
operation_parameters_maximum_occurrences["convertDocumentPngArrayToPdf:::inputFile7"]=0
operation_parameters_maximum_occurrences["convertDocumentPngArrayToPdf:::inputFile8"]=0
operation_parameters_maximum_occurrences["convertDocumentPngArrayToPdf:::inputFile9"]=0
operation_parameters_maximum_occurrences["convertDocumentPngArrayToPdf:::inputFile10"]=0
operation_parameters_maximum_occurrences["convertDocumentPptToPdf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentPptToPptx:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentPptxToPdf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentPptxToPng:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentPptxToTxt:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentRtfToDocx:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentRtfToHtml:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentRtfToJpg:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentRtfToJpg:::quality"]=0
operation_parameters_maximum_occurrences["convertDocumentRtfToPdf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentRtfToPng:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentXlsToCsv:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentXlsToPdf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentXlsToXlsx:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentXlsxToCsv:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentXlsxToCsv:::outputEncoding"]=0
operation_parameters_maximum_occurrences["convertDocumentXlsxToCsvMulti:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentXlsxToCsvMulti:::outputEncoding"]=0
operation_parameters_maximum_occurrences["convertDocumentXlsxToPdf:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentXlsxToPng:::inputFile"]=0
operation_parameters_maximum_occurrences["convertDocumentXlsxToTxt:::inputFile"]=0
operation_parameters_maximum_occurrences["convertImageGetImageInfo:::inputFile"]=0
operation_parameters_maximum_occurrences["convertImageImageFormatConvert:::format1"]=0
operation_parameters_maximum_occurrences["convertImageImageFormatConvert:::format2"]=0
operation_parameters_maximum_occurrences["convertImageImageFormatConvert:::inputFile"]=0
operation_parameters_maximum_occurrences["convertImageImageSetDPI:::dpi"]=0
operation_parameters_maximum_occurrences["convertImageImageSetDPI:::inputFile"]=0
operation_parameters_maximum_occurrences["convertImageMultipageImageFormatConvert:::format1"]=0
operation_parameters_maximum_occurrences["convertImageMultipageImageFormatConvert:::format2"]=0
operation_parameters_maximum_occurrences["convertImageMultipageImageFormatConvert:::inputFile"]=0
operation_parameters_maximum_occurrences["convertTemplateApplyDocxTemplate:::inputFile"]=0
operation_parameters_maximum_occurrences["convertTemplateApplyDocxTemplate:::templateDefinition"]=0
operation_parameters_maximum_occurrences["convertTemplateApplyHtmlTemplate:::value"]=0
operation_parameters_maximum_occurrences["convertWebHtmlToDocx:::inputRequest"]=0
operation_parameters_maximum_occurrences["convertWebHtmlToPdf:::input"]=0
operation_parameters_maximum_occurrences["convertWebHtmlToPng:::input"]=0
operation_parameters_maximum_occurrences["convertWebHtmlToTxt:::input"]=0
operation_parameters_maximum_occurrences["convertWebMdToHtml:::inputFile"]=0
operation_parameters_maximum_occurrences["convertWebUrlToPdf:::input"]=0
operation_parameters_maximum_occurrences["convertWebUrlToScreenshot:::input"]=0
operation_parameters_maximum_occurrences["convertWebUrlToTxt:::input"]=0
operation_parameters_maximum_occurrences["editDocumentBeginEditing:::inputFile"]=0
operation_parameters_maximum_occurrences["editDocumentDocxBody:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxCreateBlankDocument:::input"]=0
operation_parameters_maximum_occurrences["editDocumentDocxDeletePages:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxDeleteTableRow:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxDeleteTableRowRange:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxFindParagraph:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxGetComments:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxGetCommentsHierarchical:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxGetHeadersAndFooters:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxGetImages:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxGetSections:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxGetStyles:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxGetTableByIndex:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxGetTableRow:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxGetTables:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxInsertCommentOnParagraph:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxInsertImage:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxInsertParagraph:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxInsertTable:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxInsertTableRow:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxPages:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxRemoveHeadersAndFooters:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxRemoveObject:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxReplace:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxReplaceParagraph:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxSetFooter:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxSetFooterAddPageNumber:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxSetHeader:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxUpdateTableCell:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentDocxUpdateTableRow:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentFinishEditing:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentPptxDeleteSlides:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentPptxReplace:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxAppendRow:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxClearCellByIndex:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxClearRow:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxCreateBlankSpreadsheet:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxCreateSpreadsheetFromData:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxDeleteWorksheet:::reqConfig"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxDisableSharedWorkbook:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxEnableSharedWorkbook:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxGetCellByIdentifier:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxGetCellByIndex:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxGetColumns:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxGetImages:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxGetRowsAndCells:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxGetSpecificRow:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxGetStyles:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxGetWorksheets:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxInsertWorksheet:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxRenameWorksheet:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxSetCellByIdentifier:::input"]=0
operation_parameters_maximum_occurrences["editDocumentXlsxSetCellByIndex:::input"]=0
operation_parameters_maximum_occurrences["editPdfAddAnnotations:::request"]=0
operation_parameters_maximum_occurrences["editPdfDecrypt:::password"]=0
operation_parameters_maximum_occurrences["editPdfDecrypt:::inputFile"]=0
operation_parameters_maximum_occurrences["editPdfDeletePages:::inputFile"]=0
operation_parameters_maximum_occurrences["editPdfDeletePages:::pageStart"]=0
operation_parameters_maximum_occurrences["editPdfDeletePages:::pageEnd"]=0
operation_parameters_maximum_occurrences["editPdfEncrypt:::inputFile"]=0
operation_parameters_maximum_occurrences["editPdfEncrypt:::userPassword"]=0
operation_parameters_maximum_occurrences["editPdfEncrypt:::ownerPassword"]=0
operation_parameters_maximum_occurrences["editPdfEncrypt:::encryptionKeyLength"]=0
operation_parameters_maximum_occurrences["editPdfGetAnnotations:::inputFile"]=0
operation_parameters_maximum_occurrences["editPdfGetFormFields:::inputFile"]=0
operation_parameters_maximum_occurrences["editPdfGetMetadata:::inputFile"]=0
operation_parameters_maximum_occurrences["editPdfGetPdfTextByPages:::inputFile"]=0
operation_parameters_maximum_occurrences["editPdfGetPdfTextByPages:::textFormattingMode"]=0
operation_parameters_maximum_occurrences["editPdfInsertPages:::sourceFile"]=0
operation_parameters_maximum_occurrences["editPdfInsertPages:::destinationFile"]=0
operation_parameters_maximum_occurrences["editPdfInsertPages:::pageStartSource"]=0
operation_parameters_maximum_occurrences["editPdfInsertPages:::pageEndSource"]=0
operation_parameters_maximum_occurrences["editPdfInsertPages:::pageInsertBeforeDesitnation"]=0
operation_parameters_maximum_occurrences["editPdfRasterize:::inputFile"]=0
operation_parameters_maximum_occurrences["editPdfRemoveAllAnnotations:::inputFile"]=0
operation_parameters_maximum_occurrences["editPdfRemoveAnnotationItem:::inputFile"]=0
operation_parameters_maximum_occurrences["editPdfRemoveAnnotationItem:::annotationIndex"]=0
operation_parameters_maximum_occurrences["editPdfRotateAllPages:::inputFile"]=0
operation_parameters_maximum_occurrences["editPdfRotateAllPages:::rotationAngle"]=0
operation_parameters_maximum_occurrences["editPdfRotatePageRange:::inputFile"]=0
operation_parameters_maximum_occurrences["editPdfRotatePageRange:::rotationAngle"]=0
operation_parameters_maximum_occurrences["editPdfRotatePageRange:::pageStart"]=0
operation_parameters_maximum_occurrences["editPdfRotatePageRange:::pageEnd"]=0
operation_parameters_maximum_occurrences["editPdfSetFormFields:::fieldValues"]=0
operation_parameters_maximum_occurrences["editPdfSetMetadata:::request"]=0
operation_parameters_maximum_occurrences["editPdfSetPermissions:::ownerPassword"]=0
operation_parameters_maximum_occurrences["editPdfSetPermissions:::userPassword"]=0
operation_parameters_maximum_occurrences["editPdfSetPermissions:::inputFile"]=0
operation_parameters_maximum_occurrences["editPdfSetPermissions:::encryptionKeyLength"]=0
operation_parameters_maximum_occurrences["editPdfSetPermissions:::allowPrinting"]=0
operation_parameters_maximum_occurrences["editPdfSetPermissions:::allowDocumentAssembly"]=0
operation_parameters_maximum_occurrences["editPdfSetPermissions:::allowContentExtraction"]=0
operation_parameters_maximum_occurrences["editPdfSetPermissions:::allowFormFilling"]=0
operation_parameters_maximum_occurrences["editPdfSetPermissions:::allowEditing"]=0
operation_parameters_maximum_occurrences["editPdfSetPermissions:::allowAnnotations"]=0
operation_parameters_maximum_occurrences["editPdfSetPermissions:::allowDegradedPrinting"]=0
operation_parameters_maximum_occurrences["editPdfWatermarkText:::watermarkText"]=0
operation_parameters_maximum_occurrences["editPdfWatermarkText:::inputFile"]=0
operation_parameters_maximum_occurrences["editPdfWatermarkText:::fontName"]=0
operation_parameters_maximum_occurrences["editPdfWatermarkText:::fontSize"]=0
operation_parameters_maximum_occurrences["editPdfWatermarkText:::fontColor"]=0
operation_parameters_maximum_occurrences["editPdfWatermarkText:::fontTransparency"]=0
operation_parameters_maximum_occurrences["editTextBase64Decode:::request"]=0
operation_parameters_maximum_occurrences["editTextBase64Detect:::request"]=0
operation_parameters_maximum_occurrences["editTextBase64Encode:::request"]=0
operation_parameters_maximum_occurrences["editTextChangeLineEndings:::lineEndingType"]=0
operation_parameters_maximum_occurrences["editTextChangeLineEndings:::inputFile"]=0
operation_parameters_maximum_occurrences["editTextDetectLineEndings:::inputFile"]=0
operation_parameters_maximum_occurrences["editTextFindRegex:::request"]=0
operation_parameters_maximum_occurrences["editTextFindSimple:::request"]=0
operation_parameters_maximum_occurrences["editTextRemoveAllWhitespace:::request"]=0
operation_parameters_maximum_occurrences["editTextRemoveHtml:::request"]=0
operation_parameters_maximum_occurrences["editTextReplaceRegex:::request"]=0
operation_parameters_maximum_occurrences["editTextReplaceSimple:::request"]=0
operation_parameters_maximum_occurrences["editTextTextEncodingDetect:::inputFile"]=0
operation_parameters_maximum_occurrences["editTextTrimWhitespace:::request"]=0
operation_parameters_maximum_occurrences["mergeDocumentDocx:::inputFile1"]=0
operation_parameters_maximum_occurrences["mergeDocumentDocx:::inputFile2"]=0
operation_parameters_maximum_occurrences["mergeDocumentDocxMulti:::inputFile1"]=0
operation_parameters_maximum_occurrences["mergeDocumentDocxMulti:::inputFile2"]=0
operation_parameters_maximum_occurrences["mergeDocumentDocxMulti:::inputFile3"]=0
operation_parameters_maximum_occurrences["mergeDocumentDocxMulti:::inputFile4"]=0
operation_parameters_maximum_occurrences["mergeDocumentDocxMulti:::inputFile5"]=0
operation_parameters_maximum_occurrences["mergeDocumentDocxMulti:::inputFile6"]=0
operation_parameters_maximum_occurrences["mergeDocumentDocxMulti:::inputFile7"]=0
operation_parameters_maximum_occurrences["mergeDocumentDocxMulti:::inputFile8"]=0
operation_parameters_maximum_occurrences["mergeDocumentDocxMulti:::inputFile9"]=0
operation_parameters_maximum_occurrences["mergeDocumentDocxMulti:::inputFile10"]=0
operation_parameters_maximum_occurrences["mergeDocumentPdf:::inputFile1"]=0
operation_parameters_maximum_occurrences["mergeDocumentPdf:::inputFile2"]=0
operation_parameters_maximum_occurrences["mergeDocumentPdfMulti:::inputFile1"]=0
operation_parameters_maximum_occurrences["mergeDocumentPdfMulti:::inputFile2"]=0
operation_parameters_maximum_occurrences["mergeDocumentPdfMulti:::inputFile3"]=0
operation_parameters_maximum_occurrences["mergeDocumentPdfMulti:::inputFile4"]=0
operation_parameters_maximum_occurrences["mergeDocumentPdfMulti:::inputFile5"]=0
operation_parameters_maximum_occurrences["mergeDocumentPdfMulti:::inputFile6"]=0
operation_parameters_maximum_occurrences["mergeDocumentPdfMulti:::inputFile7"]=0
operation_parameters_maximum_occurrences["mergeDocumentPdfMulti:::inputFile8"]=0
operation_parameters_maximum_occurrences["mergeDocumentPdfMulti:::inputFile9"]=0
operation_parameters_maximum_occurrences["mergeDocumentPdfMulti:::inputFile10"]=0
operation_parameters_maximum_occurrences["mergeDocumentPng:::inputFile1"]=0
operation_parameters_maximum_occurrences["mergeDocumentPng:::inputFile2"]=0
operation_parameters_maximum_occurrences["mergeDocumentPngMulti:::inputFile1"]=0
operation_parameters_maximum_occurrences["mergeDocumentPngMulti:::inputFile2"]=0
operation_parameters_maximum_occurrences["mergeDocumentPngMulti:::inputFile3"]=0
operation_parameters_maximum_occurrences["mergeDocumentPngMulti:::inputFile4"]=0
operation_parameters_maximum_occurrences["mergeDocumentPngMulti:::inputFile5"]=0
operation_parameters_maximum_occurrences["mergeDocumentPngMulti:::inputFile6"]=0
operation_parameters_maximum_occurrences["mergeDocumentPngMulti:::inputFile7"]=0
operation_parameters_maximum_occurrences["mergeDocumentPngMulti:::inputFile8"]=0
operation_parameters_maximum_occurrences["mergeDocumentPngMulti:::inputFile9"]=0
operation_parameters_maximum_occurrences["mergeDocumentPngMulti:::inputFile10"]=0
operation_parameters_maximum_occurrences["mergeDocumentPptx:::inputFile1"]=0
operation_parameters_maximum_occurrences["mergeDocumentPptx:::inputFile2"]=0
operation_parameters_maximum_occurrences["mergeDocumentPptxMulti:::inputFile1"]=0
operation_parameters_maximum_occurrences["mergeDocumentPptxMulti:::inputFile2"]=0
operation_parameters_maximum_occurrences["mergeDocumentPptxMulti:::inputFile3"]=0
operation_parameters_maximum_occurrences["mergeDocumentPptxMulti:::inputFile4"]=0
operation_parameters_maximum_occurrences["mergeDocumentPptxMulti:::inputFile5"]=0
operation_parameters_maximum_occurrences["mergeDocumentPptxMulti:::inputFile6"]=0
operation_parameters_maximum_occurrences["mergeDocumentPptxMulti:::inputFile7"]=0
operation_parameters_maximum_occurrences["mergeDocumentPptxMulti:::inputFile8"]=0
operation_parameters_maximum_occurrences["mergeDocumentPptxMulti:::inputFile9"]=0
operation_parameters_maximum_occurrences["mergeDocumentPptxMulti:::inputFile10"]=0
operation_parameters_maximum_occurrences["mergeDocumentTxt:::inputFile1"]=0
operation_parameters_maximum_occurrences["mergeDocumentTxt:::inputFile2"]=0
operation_parameters_maximum_occurrences["mergeDocumentTxtMulti:::inputFile1"]=0
operation_parameters_maximum_occurrences["mergeDocumentTxtMulti:::inputFile2"]=0
operation_parameters_maximum_occurrences["mergeDocumentTxtMulti:::inputFile3"]=0
operation_parameters_maximum_occurrences["mergeDocumentTxtMulti:::inputFile4"]=0
operation_parameters_maximum_occurrences["mergeDocumentTxtMulti:::inputFile5"]=0
operation_parameters_maximum_occurrences["mergeDocumentTxtMulti:::inputFile6"]=0
operation_parameters_maximum_occurrences["mergeDocumentTxtMulti:::inputFile7"]=0
operation_parameters_maximum_occurrences["mergeDocumentTxtMulti:::inputFile8"]=0
operation_parameters_maximum_occurrences["mergeDocumentTxtMulti:::inputFile9"]=0
operation_parameters_maximum_occurrences["mergeDocumentTxtMulti:::inputFile10"]=0
operation_parameters_maximum_occurrences["mergeDocumentXlsx:::inputFile1"]=0
operation_parameters_maximum_occurrences["mergeDocumentXlsx:::inputFile2"]=0
operation_parameters_maximum_occurrences["mergeDocumentXlsxMulti:::inputFile1"]=0
operation_parameters_maximum_occurrences["mergeDocumentXlsxMulti:::inputFile2"]=0
operation_parameters_maximum_occurrences["mergeDocumentXlsxMulti:::inputFile3"]=0
operation_parameters_maximum_occurrences["mergeDocumentXlsxMulti:::inputFile4"]=0
operation_parameters_maximum_occurrences["mergeDocumentXlsxMulti:::inputFile5"]=0
operation_parameters_maximum_occurrences["mergeDocumentXlsxMulti:::inputFile6"]=0
operation_parameters_maximum_occurrences["mergeDocumentXlsxMulti:::inputFile7"]=0
operation_parameters_maximum_occurrences["mergeDocumentXlsxMulti:::inputFile8"]=0
operation_parameters_maximum_occurrences["mergeDocumentXlsxMulti:::inputFile9"]=0
operation_parameters_maximum_occurrences["mergeDocumentXlsxMulti:::inputFile10"]=0
operation_parameters_maximum_occurrences["splitDocumentDocx:::inputFile"]=0
operation_parameters_maximum_occurrences["splitDocumentDocx:::returnDocumentContents"]=0
operation_parameters_maximum_occurrences["splitDocumentPdfByPage:::inputFile"]=0
operation_parameters_maximum_occurrences["splitDocumentPdfByPage:::returnDocumentContents"]=0
operation_parameters_maximum_occurrences["splitDocumentPptx:::inputFile"]=0
operation_parameters_maximum_occurrences["splitDocumentPptx:::returnDocumentContents"]=0
operation_parameters_maximum_occurrences["splitDocumentTxtByLine:::inputFile"]=0
operation_parameters_maximum_occurrences["splitDocumentTxtByString:::inputFile"]=0
operation_parameters_maximum_occurrences["splitDocumentTxtByString:::splitDelimiter"]=0
operation_parameters_maximum_occurrences["splitDocumentTxtByString:::skipEmptyElements"]=0
operation_parameters_maximum_occurrences["splitDocumentXlsx:::inputFile"]=0
operation_parameters_maximum_occurrences["splitDocumentXlsx:::returnDocumentContents"]=0
operation_parameters_maximum_occurrences["validateDocumentAutodetectValidation:::inputFile"]=0
operation_parameters_maximum_occurrences["validateDocumentCsvValidation:::inputFile"]=0
operation_parameters_maximum_occurrences["validateDocumentDocxValidation:::inputFile"]=0
operation_parameters_maximum_occurrences["validateDocumentEmlValidation:::inputFile"]=0
operation_parameters_maximum_occurrences["validateDocumentExecutableValidation:::inputFile"]=0
operation_parameters_maximum_occurrences["validateDocumentGZipValidation:::inputFile"]=0
operation_parameters_maximum_occurrences["validateDocumentJsonValidation:::inputFile"]=0
operation_parameters_maximum_occurrences["validateDocumentMsgValidation:::inputFile"]=0
operation_parameters_maximum_occurrences["validateDocumentPdfValidation:::inputFile"]=0
operation_parameters_maximum_occurrences["validateDocumentPptxValidation:::inputFile"]=0
operation_parameters_maximum_occurrences["validateDocumentRarValidation:::inputFile"]=0
operation_parameters_maximum_occurrences["validateDocumentTarValidation:::inputFile"]=0
operation_parameters_maximum_occurrences["validateDocumentXlsxValidation:::inputFile"]=0
operation_parameters_maximum_occurrences["validateDocumentXmlValidation:::inputFile"]=0
operation_parameters_maximum_occurrences["validateDocumentZipValidation:::inputFile"]=0
operation_parameters_maximum_occurrences["viewerToolsCreateSimple:::inputFile"]=0
operation_parameters_maximum_occurrences["zipArchiveZipCreate:::inputFile1"]=0
operation_parameters_maximum_occurrences["zipArchiveZipCreate:::inputFile2"]=0
operation_parameters_maximum_occurrences["zipArchiveZipCreate:::inputFile3"]=0
operation_parameters_maximum_occurrences["zipArchiveZipCreate:::inputFile4"]=0
operation_parameters_maximum_occurrences["zipArchiveZipCreate:::inputFile5"]=0
operation_parameters_maximum_occurrences["zipArchiveZipCreate:::inputFile6"]=0
operation_parameters_maximum_occurrences["zipArchiveZipCreate:::inputFile7"]=0
operation_parameters_maximum_occurrences["zipArchiveZipCreate:::inputFile8"]=0
operation_parameters_maximum_occurrences["zipArchiveZipCreate:::inputFile9"]=0
operation_parameters_maximum_occurrences["zipArchiveZipCreate:::inputFile10"]=0
operation_parameters_maximum_occurrences["zipArchiveZipCreateAdvanced:::request"]=0
operation_parameters_maximum_occurrences["zipArchiveZipDecrypt:::inputFile"]=0
operation_parameters_maximum_occurrences["zipArchiveZipDecrypt:::zipPassword"]=0
operation_parameters_maximum_occurrences["zipArchiveZipEncryptAdvanced:::encryptionRequest"]=0
operation_parameters_maximum_occurrences["zipArchiveZipExtract:::inputFile"]=0

##
# The type of collection for specifying multiple values for parameter:
# - multi, csv, ssv, tsv
declare -A operation_parameters_collection_type
operation_parameters_collection_type["compareDocumentDocx:::inputFile1"]=""
operation_parameters_collection_type["compareDocumentDocx:::inputFile2"]=""
operation_parameters_collection_type["convertDataCsvToJson:::inputFile"]=""
operation_parameters_collection_type["convertDataCsvToJson:::columnNamesFromFirstRow"]=""
operation_parameters_collection_type["convertDataJsonToXml:::JsonObject"]=""
operation_parameters_collection_type["convertDataXlsToJson:::inputFile"]=""
operation_parameters_collection_type["convertDataXlsxToJson:::inputFile"]=""
operation_parameters_collection_type["convertDataXmlEditAddAttributeWithXPath:::inputFile"]=""
operation_parameters_collection_type["convertDataXmlEditAddAttributeWithXPath:::XPathExpression"]=""
operation_parameters_collection_type["convertDataXmlEditAddAttributeWithXPath:::XmlAttributeName"]=""
operation_parameters_collection_type["convertDataXmlEditAddAttributeWithXPath:::XmlAttributeValue"]=""
operation_parameters_collection_type["convertDataXmlEditAddChildWithXPath:::inputFile"]=""
operation_parameters_collection_type["convertDataXmlEditAddChildWithXPath:::XPathExpression"]=""
operation_parameters_collection_type["convertDataXmlEditAddChildWithXPath:::XmlNodeToAdd"]=""
operation_parameters_collection_type["convertDataXmlEditRemoveAllChildNodesWithXPath:::inputFile"]=""
operation_parameters_collection_type["convertDataXmlEditRemoveAllChildNodesWithXPath:::XPathExpression"]=""
operation_parameters_collection_type["convertDataXmlEditReplaceWithXPath:::inputFile"]=""
operation_parameters_collection_type["convertDataXmlEditReplaceWithXPath:::XPathExpression"]=""
operation_parameters_collection_type["convertDataXmlEditReplaceWithXPath:::XmlNodeReplacement"]=""
operation_parameters_collection_type["convertDataXmlEditSetValueWithXPath:::inputFile"]=""
operation_parameters_collection_type["convertDataXmlEditSetValueWithXPath:::XPathExpression"]=""
operation_parameters_collection_type["convertDataXmlEditSetValueWithXPath:::XmlValue"]=""
operation_parameters_collection_type["convertDataXmlFilterWithXPath:::XPathExpression"]=""
operation_parameters_collection_type["convertDataXmlFilterWithXPath:::inputFile"]=""
operation_parameters_collection_type["convertDataXmlQueryWithXQuery:::inputFile"]=""
operation_parameters_collection_type["convertDataXmlQueryWithXQuery:::XQuery"]=""
operation_parameters_collection_type["convertDataXmlQueryWithXQueryMulti:::inputFile1"]=""
operation_parameters_collection_type["convertDataXmlQueryWithXQueryMulti:::XQuery"]=""
operation_parameters_collection_type["convertDataXmlQueryWithXQueryMulti:::inputFile2"]=""
operation_parameters_collection_type["convertDataXmlQueryWithXQueryMulti:::inputFile3"]=""
operation_parameters_collection_type["convertDataXmlQueryWithXQueryMulti:::inputFile4"]=""
operation_parameters_collection_type["convertDataXmlQueryWithXQueryMulti:::inputFile5"]=""
operation_parameters_collection_type["convertDataXmlQueryWithXQueryMulti:::inputFile6"]=""
operation_parameters_collection_type["convertDataXmlQueryWithXQueryMulti:::inputFile7"]=""
operation_parameters_collection_type["convertDataXmlQueryWithXQueryMulti:::inputFile8"]=""
operation_parameters_collection_type["convertDataXmlQueryWithXQueryMulti:::inputFile9"]=""
operation_parameters_collection_type["convertDataXmlQueryWithXQueryMulti:::inputFile10"]=""
operation_parameters_collection_type["convertDataXmlRemoveWithXPath:::XPathExpression"]=""
operation_parameters_collection_type["convertDataXmlRemoveWithXPath:::inputFile"]=""
operation_parameters_collection_type["convertDataXmlToJson:::inputFile"]=""
operation_parameters_collection_type["convertDataXmlTransformWithXsltToXml:::inputFile"]=""
operation_parameters_collection_type["convertDataXmlTransformWithXsltToXml:::transformFile"]=""
operation_parameters_collection_type["convertDocumentAutodetectGetInfo:::inputFile"]=""
operation_parameters_collection_type["convertDocumentAutodetectToJpg:::inputFile"]=""
operation_parameters_collection_type["convertDocumentAutodetectToJpg:::quality"]=""
operation_parameters_collection_type["convertDocumentAutodetectToPdf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentAutodetectToPngArray:::inputFile"]=""
operation_parameters_collection_type["convertDocumentAutodetectToThumbnail:::inputFile"]=""
operation_parameters_collection_type["convertDocumentAutodetectToThumbnail:::maxWidth"]=""
operation_parameters_collection_type["convertDocumentAutodetectToThumbnail:::maxHeight"]=""
operation_parameters_collection_type["convertDocumentAutodetectToThumbnail:::extension"]=""
operation_parameters_collection_type["convertDocumentAutodetectToThumbnailsAdvanced:::inputFile"]=""
operation_parameters_collection_type["convertDocumentAutodetectToThumbnailsAdvanced:::pages"]=""
operation_parameters_collection_type["convertDocumentAutodetectToThumbnailsAdvanced:::maxWidth"]=""
operation_parameters_collection_type["convertDocumentAutodetectToThumbnailsAdvanced:::maxHeight"]=""
operation_parameters_collection_type["convertDocumentAutodetectToThumbnailsAdvanced:::extension"]=""
operation_parameters_collection_type["convertDocumentAutodetectToTxt:::inputFile"]=""
operation_parameters_collection_type["convertDocumentAutodetectToTxt:::textFormattingMode"]=""
operation_parameters_collection_type["convertDocumentCsvToXlsx:::inputFile"]=""
operation_parameters_collection_type["convertDocumentDocToDocx:::inputFile"]=""
operation_parameters_collection_type["convertDocumentDocToPdf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentDocToTxt:::inputFile"]=""
operation_parameters_collection_type["convertDocumentDocxToHtml:::inputFile"]=""
operation_parameters_collection_type["convertDocumentDocxToJpg:::inputFile"]=""
operation_parameters_collection_type["convertDocumentDocxToJpg:::quality"]=""
operation_parameters_collection_type["convertDocumentDocxToPdf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentDocxToPng:::inputFile"]=""
operation_parameters_collection_type["convertDocumentDocxToRtf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentDocxToTxt:::inputFile"]=""
operation_parameters_collection_type["convertDocumentDocxToTxt:::textFormattingMode"]=""
operation_parameters_collection_type["convertDocumentEmlToHtml:::inputFile"]=""
operation_parameters_collection_type["convertDocumentEmlToHtml:::bodyOnly"]=""
operation_parameters_collection_type["convertDocumentEmlToHtml:::includeAttachments"]=""
operation_parameters_collection_type["convertDocumentEmlToJpg:::inputFile"]=""
operation_parameters_collection_type["convertDocumentEmlToJpg:::quality"]=""
operation_parameters_collection_type["convertDocumentEmlToPdf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentEmlToPdf:::bodyOnly"]=""
operation_parameters_collection_type["convertDocumentEmlToPng:::inputFile"]=""
operation_parameters_collection_type["convertDocumentGetFileTypeIcon:::fileExtension"]=""
operation_parameters_collection_type["convertDocumentGetFileTypeIcon:::iconSize"]=""
operation_parameters_collection_type["convertDocumentGetFileTypeIconAdvanced:::fileExtension"]=""
operation_parameters_collection_type["convertDocumentGetFileTypeIconAdvanced:::iconSize"]=""
operation_parameters_collection_type["convertDocumentHtmlToPdf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentHtmlToPng:::inputFile"]=""
operation_parameters_collection_type["convertDocumentHtmlToTxt:::inputFile"]=""
operation_parameters_collection_type["convertDocumentKeynoteToJpg:::inputFile"]=""
operation_parameters_collection_type["convertDocumentKeynoteToJpg:::quality"]=""
operation_parameters_collection_type["convertDocumentKeynoteToPdf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentKeynoteToPng:::inputFile"]=""
operation_parameters_collection_type["convertDocumentKeynoteToPptx:::inputFile"]=""
operation_parameters_collection_type["convertDocumentMsgToHtml:::inputFile"]=""
operation_parameters_collection_type["convertDocumentMsgToHtml:::bodyOnly"]=""
operation_parameters_collection_type["convertDocumentMsgToHtml:::includeAttachments"]=""
operation_parameters_collection_type["convertDocumentMsgToJpg:::inputFile"]=""
operation_parameters_collection_type["convertDocumentMsgToJpg:::quality"]=""
operation_parameters_collection_type["convertDocumentMsgToPdf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentMsgToPdf:::bodyOnly"]=""
operation_parameters_collection_type["convertDocumentMsgToPng:::inputFile"]=""
operation_parameters_collection_type["convertDocumentOdpToJpg:::inputFile"]=""
operation_parameters_collection_type["convertDocumentOdpToJpg:::quality"]=""
operation_parameters_collection_type["convertDocumentOdpToPdf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentOdpToPng:::inputFile"]=""
operation_parameters_collection_type["convertDocumentOdpToPptx:::inputFile"]=""
operation_parameters_collection_type["convertDocumentOdsToJpg:::inputFile"]=""
operation_parameters_collection_type["convertDocumentOdsToJpg:::quality"]=""
operation_parameters_collection_type["convertDocumentOdsToPdf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentOdsToPng:::inputFile"]=""
operation_parameters_collection_type["convertDocumentOdsToXlsx:::inputFile"]=""
operation_parameters_collection_type["convertDocumentOdtToDocx:::inputFile"]=""
operation_parameters_collection_type["convertDocumentOdtToJpg:::inputFile"]=""
operation_parameters_collection_type["convertDocumentOdtToJpg:::quality"]=""
operation_parameters_collection_type["convertDocumentOdtToPdf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentOdtToPng:::inputFile"]=""
operation_parameters_collection_type["convertDocumentPdfToDocx:::inputFile"]=""
operation_parameters_collection_type["convertDocumentPdfToDocxRasterize:::inputFile"]=""
operation_parameters_collection_type["convertDocumentPdfToJpg:::inputFile"]=""
operation_parameters_collection_type["convertDocumentPdfToJpg:::quality"]=""
operation_parameters_collection_type["convertDocumentPdfToPngArray:::inputFile"]=""
operation_parameters_collection_type["convertDocumentPdfToPngSingle:::inputFile"]=""
operation_parameters_collection_type["convertDocumentPdfToPptx:::inputFile"]=""
operation_parameters_collection_type["convertDocumentPdfToTxt:::inputFile"]=""
operation_parameters_collection_type["convertDocumentPdfToTxt:::textFormattingMode"]=""
operation_parameters_collection_type["convertDocumentPngArrayToPdf:::inputFile1"]=""
operation_parameters_collection_type["convertDocumentPngArrayToPdf:::inputFile2"]=""
operation_parameters_collection_type["convertDocumentPngArrayToPdf:::inputFile3"]=""
operation_parameters_collection_type["convertDocumentPngArrayToPdf:::inputFile4"]=""
operation_parameters_collection_type["convertDocumentPngArrayToPdf:::inputFile5"]=""
operation_parameters_collection_type["convertDocumentPngArrayToPdf:::inputFile6"]=""
operation_parameters_collection_type["convertDocumentPngArrayToPdf:::inputFile7"]=""
operation_parameters_collection_type["convertDocumentPngArrayToPdf:::inputFile8"]=""
operation_parameters_collection_type["convertDocumentPngArrayToPdf:::inputFile9"]=""
operation_parameters_collection_type["convertDocumentPngArrayToPdf:::inputFile10"]=""
operation_parameters_collection_type["convertDocumentPptToPdf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentPptToPptx:::inputFile"]=""
operation_parameters_collection_type["convertDocumentPptxToPdf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentPptxToPng:::inputFile"]=""
operation_parameters_collection_type["convertDocumentPptxToTxt:::inputFile"]=""
operation_parameters_collection_type["convertDocumentRtfToDocx:::inputFile"]=""
operation_parameters_collection_type["convertDocumentRtfToHtml:::inputFile"]=""
operation_parameters_collection_type["convertDocumentRtfToJpg:::inputFile"]=""
operation_parameters_collection_type["convertDocumentRtfToJpg:::quality"]=""
operation_parameters_collection_type["convertDocumentRtfToPdf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentRtfToPng:::inputFile"]=""
operation_parameters_collection_type["convertDocumentXlsToCsv:::inputFile"]=""
operation_parameters_collection_type["convertDocumentXlsToPdf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentXlsToXlsx:::inputFile"]=""
operation_parameters_collection_type["convertDocumentXlsxToCsv:::inputFile"]=""
operation_parameters_collection_type["convertDocumentXlsxToCsv:::outputEncoding"]=""
operation_parameters_collection_type["convertDocumentXlsxToCsvMulti:::inputFile"]=""
operation_parameters_collection_type["convertDocumentXlsxToCsvMulti:::outputEncoding"]=""
operation_parameters_collection_type["convertDocumentXlsxToPdf:::inputFile"]=""
operation_parameters_collection_type["convertDocumentXlsxToPng:::inputFile"]=""
operation_parameters_collection_type["convertDocumentXlsxToTxt:::inputFile"]=""
operation_parameters_collection_type["convertImageGetImageInfo:::inputFile"]=""
operation_parameters_collection_type["convertImageImageFormatConvert:::format1"]=""
operation_parameters_collection_type["convertImageImageFormatConvert:::format2"]=""
operation_parameters_collection_type["convertImageImageFormatConvert:::inputFile"]=""
operation_parameters_collection_type["convertImageImageSetDPI:::dpi"]=""
operation_parameters_collection_type["convertImageImageSetDPI:::inputFile"]=""
operation_parameters_collection_type["convertImageMultipageImageFormatConvert:::format1"]=""
operation_parameters_collection_type["convertImageMultipageImageFormatConvert:::format2"]=""
operation_parameters_collection_type["convertImageMultipageImageFormatConvert:::inputFile"]=""
operation_parameters_collection_type["convertTemplateApplyDocxTemplate:::inputFile"]=""
operation_parameters_collection_type["convertTemplateApplyDocxTemplate:::templateDefinition"]=""
operation_parameters_collection_type["convertTemplateApplyHtmlTemplate:::value"]=""
operation_parameters_collection_type["convertWebHtmlToDocx:::inputRequest"]=""
operation_parameters_collection_type["convertWebHtmlToPdf:::input"]=""
operation_parameters_collection_type["convertWebHtmlToPng:::input"]=""
operation_parameters_collection_type["convertWebHtmlToTxt:::input"]=""
operation_parameters_collection_type["convertWebMdToHtml:::inputFile"]=""
operation_parameters_collection_type["convertWebUrlToPdf:::input"]=""
operation_parameters_collection_type["convertWebUrlToScreenshot:::input"]=""
operation_parameters_collection_type["convertWebUrlToTxt:::input"]=""
operation_parameters_collection_type["editDocumentBeginEditing:::inputFile"]=""
operation_parameters_collection_type["editDocumentDocxBody:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxCreateBlankDocument:::input"]=""
operation_parameters_collection_type["editDocumentDocxDeletePages:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxDeleteTableRow:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxDeleteTableRowRange:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxFindParagraph:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxGetComments:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxGetCommentsHierarchical:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxGetHeadersAndFooters:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxGetImages:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxGetSections:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxGetStyles:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxGetTableByIndex:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxGetTableRow:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxGetTables:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxInsertCommentOnParagraph:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxInsertImage:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxInsertParagraph:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxInsertTable:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxInsertTableRow:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxPages:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxRemoveHeadersAndFooters:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxRemoveObject:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxReplace:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxReplaceParagraph:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxSetFooter:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxSetFooterAddPageNumber:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxSetHeader:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxUpdateTableCell:::reqConfig"]=""
operation_parameters_collection_type["editDocumentDocxUpdateTableRow:::reqConfig"]=""
operation_parameters_collection_type["editDocumentFinishEditing:::reqConfig"]=""
operation_parameters_collection_type["editDocumentPptxDeleteSlides:::reqConfig"]=""
operation_parameters_collection_type["editDocumentPptxReplace:::reqConfig"]=""
operation_parameters_collection_type["editDocumentXlsxAppendRow:::input"]=""
operation_parameters_collection_type["editDocumentXlsxClearCellByIndex:::input"]=""
operation_parameters_collection_type["editDocumentXlsxClearRow:::input"]=""
operation_parameters_collection_type["editDocumentXlsxCreateBlankSpreadsheet:::input"]=""
operation_parameters_collection_type["editDocumentXlsxCreateSpreadsheetFromData:::input"]=""
operation_parameters_collection_type["editDocumentXlsxDeleteWorksheet:::reqConfig"]=""
operation_parameters_collection_type["editDocumentXlsxDisableSharedWorkbook:::input"]=""
operation_parameters_collection_type["editDocumentXlsxEnableSharedWorkbook:::input"]=""
operation_parameters_collection_type["editDocumentXlsxGetCellByIdentifier:::input"]=""
operation_parameters_collection_type["editDocumentXlsxGetCellByIndex:::input"]=""
operation_parameters_collection_type["editDocumentXlsxGetColumns:::input"]=""
operation_parameters_collection_type["editDocumentXlsxGetImages:::input"]=""
operation_parameters_collection_type["editDocumentXlsxGetRowsAndCells:::input"]=""
operation_parameters_collection_type["editDocumentXlsxGetSpecificRow:::input"]=""
operation_parameters_collection_type["editDocumentXlsxGetStyles:::input"]=""
operation_parameters_collection_type["editDocumentXlsxGetWorksheets:::input"]=""
operation_parameters_collection_type["editDocumentXlsxInsertWorksheet:::input"]=""
operation_parameters_collection_type["editDocumentXlsxRenameWorksheet:::input"]=""
operation_parameters_collection_type["editDocumentXlsxSetCellByIdentifier:::input"]=""
operation_parameters_collection_type["editDocumentXlsxSetCellByIndex:::input"]=""
operation_parameters_collection_type["editPdfAddAnnotations:::request"]=""
operation_parameters_collection_type["editPdfDecrypt:::password"]=""
operation_parameters_collection_type["editPdfDecrypt:::inputFile"]=""
operation_parameters_collection_type["editPdfDeletePages:::inputFile"]=""
operation_parameters_collection_type["editPdfDeletePages:::pageStart"]=""
operation_parameters_collection_type["editPdfDeletePages:::pageEnd"]=""
operation_parameters_collection_type["editPdfEncrypt:::inputFile"]=""
operation_parameters_collection_type["editPdfEncrypt:::userPassword"]=""
operation_parameters_collection_type["editPdfEncrypt:::ownerPassword"]=""
operation_parameters_collection_type["editPdfEncrypt:::encryptionKeyLength"]=""
operation_parameters_collection_type["editPdfGetAnnotations:::inputFile"]=""
operation_parameters_collection_type["editPdfGetFormFields:::inputFile"]=""
operation_parameters_collection_type["editPdfGetMetadata:::inputFile"]=""
operation_parameters_collection_type["editPdfGetPdfTextByPages:::inputFile"]=""
operation_parameters_collection_type["editPdfGetPdfTextByPages:::textFormattingMode"]=""
operation_parameters_collection_type["editPdfInsertPages:::sourceFile"]=""
operation_parameters_collection_type["editPdfInsertPages:::destinationFile"]=""
operation_parameters_collection_type["editPdfInsertPages:::pageStartSource"]=""
operation_parameters_collection_type["editPdfInsertPages:::pageEndSource"]=""
operation_parameters_collection_type["editPdfInsertPages:::pageInsertBeforeDesitnation"]=""
operation_parameters_collection_type["editPdfRasterize:::inputFile"]=""
operation_parameters_collection_type["editPdfRemoveAllAnnotations:::inputFile"]=""
operation_parameters_collection_type["editPdfRemoveAnnotationItem:::inputFile"]=""
operation_parameters_collection_type["editPdfRemoveAnnotationItem:::annotationIndex"]=""
operation_parameters_collection_type["editPdfRotateAllPages:::inputFile"]=""
operation_parameters_collection_type["editPdfRotateAllPages:::rotationAngle"]=""
operation_parameters_collection_type["editPdfRotatePageRange:::inputFile"]=""
operation_parameters_collection_type["editPdfRotatePageRange:::rotationAngle"]=""
operation_parameters_collection_type["editPdfRotatePageRange:::pageStart"]=""
operation_parameters_collection_type["editPdfRotatePageRange:::pageEnd"]=""
operation_parameters_collection_type["editPdfSetFormFields:::fieldValues"]=""
operation_parameters_collection_type["editPdfSetMetadata:::request"]=""
operation_parameters_collection_type["editPdfSetPermissions:::ownerPassword"]=""
operation_parameters_collection_type["editPdfSetPermissions:::userPassword"]=""
operation_parameters_collection_type["editPdfSetPermissions:::inputFile"]=""
operation_parameters_collection_type["editPdfSetPermissions:::encryptionKeyLength"]=""
operation_parameters_collection_type["editPdfSetPermissions:::allowPrinting"]=""
operation_parameters_collection_type["editPdfSetPermissions:::allowDocumentAssembly"]=""
operation_parameters_collection_type["editPdfSetPermissions:::allowContentExtraction"]=""
operation_parameters_collection_type["editPdfSetPermissions:::allowFormFilling"]=""
operation_parameters_collection_type["editPdfSetPermissions:::allowEditing"]=""
operation_parameters_collection_type["editPdfSetPermissions:::allowAnnotations"]=""
operation_parameters_collection_type["editPdfSetPermissions:::allowDegradedPrinting"]=""
operation_parameters_collection_type["editPdfWatermarkText:::watermarkText"]=""
operation_parameters_collection_type["editPdfWatermarkText:::inputFile"]=""
operation_parameters_collection_type["editPdfWatermarkText:::fontName"]=""
operation_parameters_collection_type["editPdfWatermarkText:::fontSize"]=""
operation_parameters_collection_type["editPdfWatermarkText:::fontColor"]=""
operation_parameters_collection_type["editPdfWatermarkText:::fontTransparency"]=""
operation_parameters_collection_type["editTextBase64Decode:::request"]=""
operation_parameters_collection_type["editTextBase64Detect:::request"]=""
operation_parameters_collection_type["editTextBase64Encode:::request"]=""
operation_parameters_collection_type["editTextChangeLineEndings:::lineEndingType"]=""
operation_parameters_collection_type["editTextChangeLineEndings:::inputFile"]=""
operation_parameters_collection_type["editTextDetectLineEndings:::inputFile"]=""
operation_parameters_collection_type["editTextFindRegex:::request"]=""
operation_parameters_collection_type["editTextFindSimple:::request"]=""
operation_parameters_collection_type["editTextRemoveAllWhitespace:::request"]=""
operation_parameters_collection_type["editTextRemoveHtml:::request"]=""
operation_parameters_collection_type["editTextReplaceRegex:::request"]=""
operation_parameters_collection_type["editTextReplaceSimple:::request"]=""
operation_parameters_collection_type["editTextTextEncodingDetect:::inputFile"]=""
operation_parameters_collection_type["editTextTrimWhitespace:::request"]=""
operation_parameters_collection_type["mergeDocumentDocx:::inputFile1"]=""
operation_parameters_collection_type["mergeDocumentDocx:::inputFile2"]=""
operation_parameters_collection_type["mergeDocumentDocxMulti:::inputFile1"]=""
operation_parameters_collection_type["mergeDocumentDocxMulti:::inputFile2"]=""
operation_parameters_collection_type["mergeDocumentDocxMulti:::inputFile3"]=""
operation_parameters_collection_type["mergeDocumentDocxMulti:::inputFile4"]=""
operation_parameters_collection_type["mergeDocumentDocxMulti:::inputFile5"]=""
operation_parameters_collection_type["mergeDocumentDocxMulti:::inputFile6"]=""
operation_parameters_collection_type["mergeDocumentDocxMulti:::inputFile7"]=""
operation_parameters_collection_type["mergeDocumentDocxMulti:::inputFile8"]=""
operation_parameters_collection_type["mergeDocumentDocxMulti:::inputFile9"]=""
operation_parameters_collection_type["mergeDocumentDocxMulti:::inputFile10"]=""
operation_parameters_collection_type["mergeDocumentPdf:::inputFile1"]=""
operation_parameters_collection_type["mergeDocumentPdf:::inputFile2"]=""
operation_parameters_collection_type["mergeDocumentPdfMulti:::inputFile1"]=""
operation_parameters_collection_type["mergeDocumentPdfMulti:::inputFile2"]=""
operation_parameters_collection_type["mergeDocumentPdfMulti:::inputFile3"]=""
operation_parameters_collection_type["mergeDocumentPdfMulti:::inputFile4"]=""
operation_parameters_collection_type["mergeDocumentPdfMulti:::inputFile5"]=""
operation_parameters_collection_type["mergeDocumentPdfMulti:::inputFile6"]=""
operation_parameters_collection_type["mergeDocumentPdfMulti:::inputFile7"]=""
operation_parameters_collection_type["mergeDocumentPdfMulti:::inputFile8"]=""
operation_parameters_collection_type["mergeDocumentPdfMulti:::inputFile9"]=""
operation_parameters_collection_type["mergeDocumentPdfMulti:::inputFile10"]=""
operation_parameters_collection_type["mergeDocumentPng:::inputFile1"]=""
operation_parameters_collection_type["mergeDocumentPng:::inputFile2"]=""
operation_parameters_collection_type["mergeDocumentPngMulti:::inputFile1"]=""
operation_parameters_collection_type["mergeDocumentPngMulti:::inputFile2"]=""
operation_parameters_collection_type["mergeDocumentPngMulti:::inputFile3"]=""
operation_parameters_collection_type["mergeDocumentPngMulti:::inputFile4"]=""
operation_parameters_collection_type["mergeDocumentPngMulti:::inputFile5"]=""
operation_parameters_collection_type["mergeDocumentPngMulti:::inputFile6"]=""
operation_parameters_collection_type["mergeDocumentPngMulti:::inputFile7"]=""
operation_parameters_collection_type["mergeDocumentPngMulti:::inputFile8"]=""
operation_parameters_collection_type["mergeDocumentPngMulti:::inputFile9"]=""
operation_parameters_collection_type["mergeDocumentPngMulti:::inputFile10"]=""
operation_parameters_collection_type["mergeDocumentPptx:::inputFile1"]=""
operation_parameters_collection_type["mergeDocumentPptx:::inputFile2"]=""
operation_parameters_collection_type["mergeDocumentPptxMulti:::inputFile1"]=""
operation_parameters_collection_type["mergeDocumentPptxMulti:::inputFile2"]=""
operation_parameters_collection_type["mergeDocumentPptxMulti:::inputFile3"]=""
operation_parameters_collection_type["mergeDocumentPptxMulti:::inputFile4"]=""
operation_parameters_collection_type["mergeDocumentPptxMulti:::inputFile5"]=""
operation_parameters_collection_type["mergeDocumentPptxMulti:::inputFile6"]=""
operation_parameters_collection_type["mergeDocumentPptxMulti:::inputFile7"]=""
operation_parameters_collection_type["mergeDocumentPptxMulti:::inputFile8"]=""
operation_parameters_collection_type["mergeDocumentPptxMulti:::inputFile9"]=""
operation_parameters_collection_type["mergeDocumentPptxMulti:::inputFile10"]=""
operation_parameters_collection_type["mergeDocumentTxt:::inputFile1"]=""
operation_parameters_collection_type["mergeDocumentTxt:::inputFile2"]=""
operation_parameters_collection_type["mergeDocumentTxtMulti:::inputFile1"]=""
operation_parameters_collection_type["mergeDocumentTxtMulti:::inputFile2"]=""
operation_parameters_collection_type["mergeDocumentTxtMulti:::inputFile3"]=""
operation_parameters_collection_type["mergeDocumentTxtMulti:::inputFile4"]=""
operation_parameters_collection_type["mergeDocumentTxtMulti:::inputFile5"]=""
operation_parameters_collection_type["mergeDocumentTxtMulti:::inputFile6"]=""
operation_parameters_collection_type["mergeDocumentTxtMulti:::inputFile7"]=""
operation_parameters_collection_type["mergeDocumentTxtMulti:::inputFile8"]=""
operation_parameters_collection_type["mergeDocumentTxtMulti:::inputFile9"]=""
operation_parameters_collection_type["mergeDocumentTxtMulti:::inputFile10"]=""
operation_parameters_collection_type["mergeDocumentXlsx:::inputFile1"]=""
operation_parameters_collection_type["mergeDocumentXlsx:::inputFile2"]=""
operation_parameters_collection_type["mergeDocumentXlsxMulti:::inputFile1"]=""
operation_parameters_collection_type["mergeDocumentXlsxMulti:::inputFile2"]=""
operation_parameters_collection_type["mergeDocumentXlsxMulti:::inputFile3"]=""
operation_parameters_collection_type["mergeDocumentXlsxMulti:::inputFile4"]=""
operation_parameters_collection_type["mergeDocumentXlsxMulti:::inputFile5"]=""
operation_parameters_collection_type["mergeDocumentXlsxMulti:::inputFile6"]=""
operation_parameters_collection_type["mergeDocumentXlsxMulti:::inputFile7"]=""
operation_parameters_collection_type["mergeDocumentXlsxMulti:::inputFile8"]=""
operation_parameters_collection_type["mergeDocumentXlsxMulti:::inputFile9"]=""
operation_parameters_collection_type["mergeDocumentXlsxMulti:::inputFile10"]=""
operation_parameters_collection_type["splitDocumentDocx:::inputFile"]=""
operation_parameters_collection_type["splitDocumentDocx:::returnDocumentContents"]=""
operation_parameters_collection_type["splitDocumentPdfByPage:::inputFile"]=""
operation_parameters_collection_type["splitDocumentPdfByPage:::returnDocumentContents"]=""
operation_parameters_collection_type["splitDocumentPptx:::inputFile"]=""
operation_parameters_collection_type["splitDocumentPptx:::returnDocumentContents"]=""
operation_parameters_collection_type["splitDocumentTxtByLine:::inputFile"]=""
operation_parameters_collection_type["splitDocumentTxtByString:::inputFile"]=""
operation_parameters_collection_type["splitDocumentTxtByString:::splitDelimiter"]=""
operation_parameters_collection_type["splitDocumentTxtByString:::skipEmptyElements"]=""
operation_parameters_collection_type["splitDocumentXlsx:::inputFile"]=""
operation_parameters_collection_type["splitDocumentXlsx:::returnDocumentContents"]=""
operation_parameters_collection_type["validateDocumentAutodetectValidation:::inputFile"]=""
operation_parameters_collection_type["validateDocumentCsvValidation:::inputFile"]=""
operation_parameters_collection_type["validateDocumentDocxValidation:::inputFile"]=""
operation_parameters_collection_type["validateDocumentEmlValidation:::inputFile"]=""
operation_parameters_collection_type["validateDocumentExecutableValidation:::inputFile"]=""
operation_parameters_collection_type["validateDocumentGZipValidation:::inputFile"]=""
operation_parameters_collection_type["validateDocumentJsonValidation:::inputFile"]=""
operation_parameters_collection_type["validateDocumentMsgValidation:::inputFile"]=""
operation_parameters_collection_type["validateDocumentPdfValidation:::inputFile"]=""
operation_parameters_collection_type["validateDocumentPptxValidation:::inputFile"]=""
operation_parameters_collection_type["validateDocumentRarValidation:::inputFile"]=""
operation_parameters_collection_type["validateDocumentTarValidation:::inputFile"]=""
operation_parameters_collection_type["validateDocumentXlsxValidation:::inputFile"]=""
operation_parameters_collection_type["validateDocumentXmlValidation:::inputFile"]=""
operation_parameters_collection_type["validateDocumentZipValidation:::inputFile"]=""
operation_parameters_collection_type["viewerToolsCreateSimple:::inputFile"]=""
operation_parameters_collection_type["zipArchiveZipCreate:::inputFile1"]=""
operation_parameters_collection_type["zipArchiveZipCreate:::inputFile2"]=""
operation_parameters_collection_type["zipArchiveZipCreate:::inputFile3"]=""
operation_parameters_collection_type["zipArchiveZipCreate:::inputFile4"]=""
operation_parameters_collection_type["zipArchiveZipCreate:::inputFile5"]=""
operation_parameters_collection_type["zipArchiveZipCreate:::inputFile6"]=""
operation_parameters_collection_type["zipArchiveZipCreate:::inputFile7"]=""
operation_parameters_collection_type["zipArchiveZipCreate:::inputFile8"]=""
operation_parameters_collection_type["zipArchiveZipCreate:::inputFile9"]=""
operation_parameters_collection_type["zipArchiveZipCreate:::inputFile10"]=""
operation_parameters_collection_type["zipArchiveZipCreateAdvanced:::request"]=""
operation_parameters_collection_type["zipArchiveZipDecrypt:::inputFile"]=""
operation_parameters_collection_type["zipArchiveZipDecrypt:::zipPassword"]=""
operation_parameters_collection_type["zipArchiveZipEncryptAdvanced:::encryptionRequest"]=""
operation_parameters_collection_type["zipArchiveZipExtract:::inputFile"]=""


##
# Map for body parameters passed after operation as
# PARAMETER==STRING_VALUE or PARAMETER:=NUMERIC_VALUE
# These will be mapped to top level json keys ( { "PARAMETER": "VALUE" })
declare -A body_parameters

##
# These arguments will be directly passed to cURL
curl_arguments=""

##
# The host for making the request
host="https://api.cloudmersive.com"

##
# The user credentials for basic authentication
basic_auth_credential=""

##
# The user API key
apikey_auth_credential=""

##
# If true, the script will only output the actual cURL command that would be
# used
print_curl=false

##
# The operation ID passed on the command line
operation=""

##
# The provided Accept header value
header_accept=""

##
# The provided Content-type header value
header_content_type="application/json"

##
# If there is any body content on the stdin pass it to the body of the request
body_content_temp_file=""

##
# If this variable is set to true, the request will be performed even
# if parameters for required query, header or body values are not provided
# (path parameters are still required).
force=false

##
# Declare some mime types abbreviations for easier content-type and accepts
# headers specification
declare -A mime_type_abbreviations
# text/*
mime_type_abbreviations["text"]="text/plain"
mime_type_abbreviations["html"]="text/html"
mime_type_abbreviations["md"]="text/x-markdown"
mime_type_abbreviations["csv"]="text/csv"
mime_type_abbreviations["css"]="text/css"
mime_type_abbreviations["rtf"]="text/rtf"
# application/*
mime_type_abbreviations["json"]="application/json"
mime_type_abbreviations["xml"]="application/xml"
mime_type_abbreviations["yaml"]="application/yaml"
mime_type_abbreviations["js"]="application/javascript"
mime_type_abbreviations["bin"]="application/octet-stream"
mime_type_abbreviations["rdf"]="application/rdf+xml"
# image/*
mime_type_abbreviations["jpg"]="image/jpeg"
mime_type_abbreviations["png"]="image/png"
mime_type_abbreviations["gif"]="image/gif"
mime_type_abbreviations["bmp"]="image/bmp"
mime_type_abbreviations["tiff"]="image/tiff"


##############################################################################
#
# Escape special URL characters
# Based on table at http://www.w3schools.com/tags/ref_urlencode.asp
#
##############################################################################
url_escape() {
    local raw_url="$1"

    value=$(sed -e 's/ /%20/g' \
       -e 's/!/%21/g' \
       -e 's/"/%22/g' \
       -e 's/#/%23/g' \
       -e 's/\&/%26/g' \
       -e 's/'\''/%28/g' \
       -e 's/(/%28/g' \
       -e 's/)/%29/g' \
       -e 's/:/%3A/g' \
       -e 's/\t/%09/g' \
       -e 's/?/%3F/g' <<<"$raw_url");

    echo "$value"
}

##############################################################################
#
# Lookup the mime type abbreviation in the mime_type_abbreviations array.
# If not present assume the user provided a valid mime type
#
##############################################################################
lookup_mime_type() {
    local mime_type="$1"

    if [[ ${mime_type_abbreviations[$mime_type]} ]]; then
        echo "${mime_type_abbreviations[$mime_type]}"
    else
        echo "$mime_type"
    fi
}

##############################################################################
#
# Converts an associative array into a list of cURL header
# arguments (-H "KEY: VALUE")
#
##############################################################################
header_arguments_to_curl() {
    local headers_curl=""
    local api_key_header=""
    local api_key_header_in_cli=""
    api_key_header="Apikey"

    for key in "${!header_arguments[@]}"; do
        headers_curl+="-H \"${key}: ${header_arguments[${key}]}\" "
        if [[ "${key}XX" == "${api_key_header}XX" ]]; then
            api_key_header_in_cli="YES"
        fi
    done
    #
    # If the api_key was not provided in the header, try one from the
    # environment variable
    #
    if [[ -z $api_key_header_in_cli && -n $apikey_auth_credential ]]; then
        headers_curl+="-H \"${api_key_header}: ${apikey_auth_credential}\""
    fi
    headers_curl+=" "

    echo "${headers_curl}"
}

##############################################################################
#
# Converts an associative array into a simple JSON with keys as top
# level object attributes
#
# \todo Add conversion of more complex attributes using paths
#
##############################################################################
body_parameters_to_json() {
    local body_json="-d '{"
    local count=0
    for key in "${!body_parameters[@]}"; do
        if [[ $((count++)) -gt 0 ]]; then
            body_json+=", "
        fi
        body_json+="\"${key}\": ${body_parameters[${key}]}"
    done
    body_json+="}'"

    if [[ "${#body_parameters[@]}" -eq 0 ]]; then
        echo ""
    else
        echo "${body_json}"
    fi
}

##############################################################################
#
# Helper method for showing error because for example echo in
# build_request_path() is evaluated as part of command line not printed on
# output. Anyway better idea for resource clean up ;-).
#
##############################################################################
ERROR_MSG=""
function finish {
    if [[ -n "$ERROR_MSG" ]]; then
        echo >&2 "${OFF}${RED}$ERROR_MSG"
        echo >&2 "${OFF}Check usage: '${script_name} --help'"
    fi
}
trap finish EXIT


##############################################################################
#
# Validate and build request path including query parameters
#
##############################################################################
build_request_path() {
    local path_template=$1
    local -n path_params=$2
    local -n query_params=$3


    #
    # Check input parameters count against minimum and maximum required
    #
    if [[ "$force" = false ]]; then
        local was_error=""
        for qparam in "${query_params[@]}" "${path_params[@]}"; do
            local parameter_values
            mapfile -t parameter_values < <(sed -e 's/'":::"'/\n/g' <<<"${operation_parameters[$qparam]}")

            #
            # Check if the number of provided values is not less than minimum required
            #
            if [[ ${#parameter_values[@]} -lt ${operation_parameters_minimum_occurrences["${operation}:::${qparam}"]} ]]; then
                echo "ERROR: Too few values provided for '${qparam}' parameter."
                was_error=true
            fi

            #
            # Check if the number of provided values is not more than maximum
            #
            if [[ ${operation_parameters_maximum_occurrences["${operation}:::${qparam}"]} -gt 0 \
                  && ${#parameter_values[@]} -gt ${operation_parameters_maximum_occurrences["${operation}:::${qparam}"]} ]]; then
                echo "ERROR: Too many values provided for '${qparam}' parameter"
                was_error=true
            fi
        done
        if [[ -n "$was_error" ]]; then
            exit 1
        fi
    fi

    # First replace all path parameters in the path
    for pparam in "${path_params[@]}"; do
        local path_regex="(.*)(\\{$pparam\\})(.*)"
        if [[ $path_template =~ $path_regex ]]; then
            path_template=${BASH_REMATCH[1]}${operation_parameters[$pparam]}${BASH_REMATCH[3]}
        fi
    done

    local query_request_part=""

    local count=0
    for qparam in "${query_params[@]}"; do
        # Get the array of parameter values
        local parameter_value=""
        local parameter_values
        mapfile -t parameter_values < <(sed -e 's/'":::"'/\n/g' <<<"${operation_parameters[$qparam]}")

        if [[ -n "${parameter_values[*]}" ]]; then
            if [[ $((count++)) -gt 0 ]]; then
                query_request_part+="&"
            fi
        fi


        #
        # Append parameters without specific cardinality
        #
        local collection_type="${operation_parameters_collection_type["${operation}:::${qparam}"]}"
        if [[ "${collection_type}" == "" ]]; then
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+="&"
                fi
                parameter_value+="${qparam}=${qvalue}"
            done
        #
        # Append parameters specified as 'mutli' collections i.e. param=value1&param=value2&...
        #
        elif [[ "${collection_type}" == "multi" ]]; then
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+="&"
                fi
                parameter_value+="${qparam}=${qvalue}"
            done
        #
        # Append parameters specified as 'csv' collections i.e. param=value1,value2,...
        #
        elif [[ "${collection_type}" == "csv" ]]; then
            parameter_value+="${qparam}="
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+=","
                fi
                parameter_value+="${qvalue}"
            done
        #
        # Append parameters specified as 'ssv' collections i.e. param="value1 value2 ..."
        #
        elif [[ "${collection_type}" == "ssv" ]]; then
            parameter_value+="${qparam}="
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+=" "
                fi
                parameter_value+="${qvalue}"
            done
        #
        # Append parameters specified as 'tsv' collections i.e. param="value1\tvalue2\t..."
        #
        elif [[ "${collection_type}" == "tsv" ]]; then
            parameter_value+="${qparam}="
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+="\\t"
                fi
                parameter_value+="${qvalue}"
            done
        else
            echo "Unsupported collection format \"${collection_type}\""
            exit 1
        fi

        if [[ -n "${parameter_value}" ]]; then
            query_request_part+="${parameter_value}"
        fi

    done


    # Now append query parameters - if any
    if [[ -n "${query_request_part}" ]]; then
        path_template+="?${query_request_part}"
    fi

    echo "$path_template"
}



###############################################################################
#
# Print main help message
#
###############################################################################
print_help() {
cat <<EOF

${BOLD}${WHITE}convertapi command line client (API version v1)${OFF}

${BOLD}${WHITE}Usage${OFF}

  ${GREEN}${script_name}${OFF} [-h|--help] [-V|--version] [--about] [${RED}<curl-options>${OFF}]
           [-ac|--accept ${GREEN}<mime-type>${OFF}] [-ct,--content-type ${GREEN}<mime-type>${OFF}]
           [--host ${CYAN}<url>${OFF}] [--dry-run] [-nc|--no-colors] ${YELLOW}<operation>${OFF} [-h|--help]
           [${BLUE}<headers>${OFF}] [${MAGENTA}<parameters>${OFF}] [${MAGENTA}<body-parameters>${OFF}]

  - ${CYAN}<url>${OFF} - endpoint of the REST service without basepath

  - ${RED}<curl-options>${OFF} - any valid cURL options can be passed before ${YELLOW}<operation>${OFF}
  - ${GREEN}<mime-type>${OFF} - either full mime-type or one of supported abbreviations:
                   (text, html, md, csv, css, rtf, json, xml, yaml, js, bin,
                    rdf, jpg, png, gif, bmp, tiff)
  - ${BLUE}<headers>${OFF} - HTTP headers can be passed in the form ${YELLOW}HEADER${OFF}:${BLUE}VALUE${OFF}
  - ${MAGENTA}<parameters>${OFF} - REST operation parameters can be passed in the following
                   forms:
                   * ${YELLOW}KEY${OFF}=${BLUE}VALUE${OFF} - path or query parameters
  - ${MAGENTA}<body-parameters>${OFF} - simple JSON body content (first level only) can be build
                        using the following arguments:
                        * ${YELLOW}KEY${OFF}==${BLUE}VALUE${OFF} - body parameters which will be added to body
                                      JSON as '{ ..., "${YELLOW}KEY${OFF}": "${BLUE}VALUE${OFF}", ... }'
                        * ${YELLOW}KEY${OFF}:=${BLUE}VALUE${OFF} - body parameters which will be added to body
                                      JSON as '{ ..., "${YELLOW}KEY${OFF}": ${BLUE}VALUE${OFF}, ... }'

EOF
    echo -e "${BOLD}${WHITE}Authentication methods${OFF}"
    echo -e ""
    echo -e "  - ${BLUE}Api-key${OFF} - add '${RED}Apikey:<api-key>${OFF}' after ${YELLOW}<operation>${OFF}"
    
    echo ""
    echo -e "${BOLD}${WHITE}Operations (grouped by tags)${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}[compareDocument]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}compareDocumentDocx${OFF};Compare Two Word DOCX (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[convertData]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}convertDataCsvToJson${OFF};Convert CSV to JSON conversion (AUTH)
  ${CYAN}convertDataJsonToXml${OFF};Convert JSON to XML conversion (AUTH)
  ${CYAN}convertDataXlsToJson${OFF};Convert Excel (97-2003) XLS to JSON conversion (AUTH)
  ${CYAN}convertDataXlsxToJson${OFF};Convert Excel XLSX to JSON conversion (AUTH)
  ${CYAN}convertDataXmlEditAddAttributeWithXPath${OFF};Adds an attribute to all XML nodes matching XPath expression (AUTH)
  ${CYAN}convertDataXmlEditAddChildWithXPath${OFF};Adds an XML node as a child to XML nodes matching XPath expression (AUTH)
  ${CYAN}convertDataXmlEditRemoveAllChildNodesWithXPath${OFF};Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes (AUTH)
  ${CYAN}convertDataXmlEditReplaceWithXPath${OFF};Replaces XML nodes matching XPath expression with new node (AUTH)
  ${CYAN}convertDataXmlEditSetValueWithXPath${OFF};Sets the value contents of XML nodes matching XPath expression (AUTH)
  ${CYAN}convertDataXmlFilterWithXPath${OFF};Filter, select XML nodes using XPath expression, get results (AUTH)
  ${CYAN}convertDataXmlQueryWithXQuery${OFF};Query an XML file using XQuery query, get results (AUTH)
  ${CYAN}convertDataXmlQueryWithXQueryMulti${OFF};Query multiple XML files using XQuery query, get results (AUTH)
  ${CYAN}convertDataXmlRemoveWithXPath${OFF};Remove, delete XML nodes and items matching XPath expression (AUTH)
  ${CYAN}convertDataXmlToJson${OFF};Convert XML to JSON conversion (AUTH)
  ${CYAN}convertDataXmlTransformWithXsltToXml${OFF};Transform XML document file with XSLT into a new XML document (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[convertDocument]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}convertDocumentAutodetectGetInfo${OFF};Get document type information (AUTH)
  ${CYAN}convertDocumentAutodetectToJpg${OFF};Convert Document to JPG/JPEG image array (AUTH)
  ${CYAN}convertDocumentAutodetectToPdf${OFF};Convert Document to PDF (AUTH)
  ${CYAN}convertDocumentAutodetectToPngArray${OFF};Convert Document to PNG array (AUTH)
  ${CYAN}convertDocumentAutodetectToThumbnail${OFF};Convert File to Thumbnail Image (AUTH)
  ${CYAN}convertDocumentAutodetectToThumbnailsAdvanced${OFF};Convert File to Thumbnail Image Object (AUTH)
  ${CYAN}convertDocumentAutodetectToTxt${OFF};Convert Document to Text (txt) (AUTH)
  ${CYAN}convertDocumentCsvToXlsx${OFF};Convert CSV to Excel XLSX Spreadsheet (AUTH)
  ${CYAN}convertDocumentDocToDocx${OFF};Convert Word DOC (97-03) Document to DOCX (AUTH)
  ${CYAN}convertDocumentDocToPdf${OFF};Convert Word DOC (97-03) Document to PDF (AUTH)
  ${CYAN}convertDocumentDocToTxt${OFF};Convert Word DOC (97-03) Document to Text (txt) (AUTH)
  ${CYAN}convertDocumentDocxToHtml${OFF};Convert Word DOCX Document to HTML Document (AUTH)
  ${CYAN}convertDocumentDocxToJpg${OFF};Convert Word DOCX Document to JPG/JPEG image array (AUTH)
  ${CYAN}convertDocumentDocxToPdf${OFF};Convert Word DOCX Document to PDF (AUTH)
  ${CYAN}convertDocumentDocxToPng${OFF};Convert Word DOCX Document to PNG image array (AUTH)
  ${CYAN}convertDocumentDocxToRtf${OFF};Convert Word DOCX Document to RTF (AUTH)
  ${CYAN}convertDocumentDocxToTxt${OFF};Convert Word DOCX Document to Text (txt) (AUTH)
  ${CYAN}convertDocumentEmlToHtml${OFF};Convert Email EML file to HTML string (AUTH)
  ${CYAN}convertDocumentEmlToJpg${OFF};Convert Email EML file to JPG/JPEG image array (AUTH)
  ${CYAN}convertDocumentEmlToPdf${OFF};Convert Email EML file to PDF document (AUTH)
  ${CYAN}convertDocumentEmlToPng${OFF};Convert Email EML file to PNG image array (AUTH)
  ${CYAN}convertDocumentGetFileTypeIcon${OFF};Get PNG icon file for the file extension (AUTH)
  ${CYAN}convertDocumentGetFileTypeIconAdvanced${OFF};Get PNG icon byte array for the file extension (AUTH)
  ${CYAN}convertDocumentHtmlToPdf${OFF};Convert HTML document file to PDF Document (AUTH)
  ${CYAN}convertDocumentHtmlToPng${OFF};Convert HTML document file to PNG image array (AUTH)
  ${CYAN}convertDocumentHtmlToTxt${OFF};HTML Document file to Text (txt) (AUTH)
  ${CYAN}convertDocumentKeynoteToJpg${OFF};Convert Keynote Presentation (KEY) to JPG/JPEG image array (AUTH)
  ${CYAN}convertDocumentKeynoteToPdf${OFF};Convert Keynote Presentation (KEY) to PDF (AUTH)
  ${CYAN}convertDocumentKeynoteToPng${OFF};Convert Keynote Presentation (KEY) to PNG image array (AUTH)
  ${CYAN}convertDocumentKeynoteToPptx${OFF};Convert Keynote Presentation (KEY) to PPTX (AUTH)
  ${CYAN}convertDocumentMsgToHtml${OFF};Convert Email MSG file to HTML string (AUTH)
  ${CYAN}convertDocumentMsgToJpg${OFF};Convert Email MSG file to JPG/JPEG image array (AUTH)
  ${CYAN}convertDocumentMsgToPdf${OFF};Convert Email MSG file to PDF document (AUTH)
  ${CYAN}convertDocumentMsgToPng${OFF};Convert Email MSG file to PNG image array (AUTH)
  ${CYAN}convertDocumentOdpToJpg${OFF};Convert ODP Presentation to JPG/JPEG image array (AUTH)
  ${CYAN}convertDocumentOdpToPdf${OFF};Convert ODP Presentation to PDF (AUTH)
  ${CYAN}convertDocumentOdpToPng${OFF};Convert ODP Presentation to PNG image array (AUTH)
  ${CYAN}convertDocumentOdpToPptx${OFF};Convert ODP Presentation to PPTX (AUTH)
  ${CYAN}convertDocumentOdsToJpg${OFF};Convert ODS Spreadsheet to JPG/JPEG image array (AUTH)
  ${CYAN}convertDocumentOdsToPdf${OFF};Convert ODS Spreadsheet to PDF (AUTH)
  ${CYAN}convertDocumentOdsToPng${OFF};Convert ODS Spreadsheet to PNG image array (AUTH)
  ${CYAN}convertDocumentOdsToXlsx${OFF};Convert ODS Spreadsheet to XLSX (AUTH)
  ${CYAN}convertDocumentOdtToDocx${OFF};Convert ODT Text File to Word DOCX (AUTH)
  ${CYAN}convertDocumentOdtToJpg${OFF};Convert ODT Text File to JPG/JPEG image array (AUTH)
  ${CYAN}convertDocumentOdtToPdf${OFF};Convert ODT Text File to PDF (AUTH)
  ${CYAN}convertDocumentOdtToPng${OFF};Convert ODT Text File to PNG image array (AUTH)
  ${CYAN}convertDocumentPdfToDocx${OFF};Convert PDF to Word DOCX Document (AUTH)
  ${CYAN}convertDocumentPdfToDocxRasterize${OFF};Convert PDF to Word DOCX Document based on rasterized version of the PDF (AUTH)
  ${CYAN}convertDocumentPdfToJpg${OFF};Convert PDF to JPG/JPEG image array (AUTH)
  ${CYAN}convertDocumentPdfToPngArray${OFF};Convert PDF to PNG Image Array (AUTH)
  ${CYAN}convertDocumentPdfToPngSingle${OFF};Convert PDF to Single PNG image (AUTH)
  ${CYAN}convertDocumentPdfToPptx${OFF};Convert PDF to PowerPoint PPTX Presentation (AUTH)
  ${CYAN}convertDocumentPdfToTxt${OFF};Convert PDF Document to Text (txt) (AUTH)
  ${CYAN}convertDocumentPngArrayToPdf${OFF};Convert PNG Array to PDF (AUTH)
  ${CYAN}convertDocumentPptToPdf${OFF};Convert PowerPoint PPT (97-03) Presentation to PDF (AUTH)
  ${CYAN}convertDocumentPptToPptx${OFF};Convert PowerPoint PPT (97-03) Presentation to PPTX (AUTH)
  ${CYAN}convertDocumentPptxToPdf${OFF};Convert PowerPoint PPTX Presentation to PDF (AUTH)
  ${CYAN}convertDocumentPptxToPng${OFF};Convert PowerPoint PPTX to PNG image array (AUTH)
  ${CYAN}convertDocumentPptxToTxt${OFF};Convert PowerPoint PPTX Presentation to Text (txt) (AUTH)
  ${CYAN}convertDocumentRtfToDocx${OFF};Convert Rich Text Format RTF to DOCX Document (AUTH)
  ${CYAN}convertDocumentRtfToHtml${OFF};Convert Rich Text Format RTF to HTML Document (AUTH)
  ${CYAN}convertDocumentRtfToJpg${OFF};Convert Rich Text Format RTF to JPG/JPEG image array (AUTH)
  ${CYAN}convertDocumentRtfToPdf${OFF};Convert Rich Text Format RTF to PDF (AUTH)
  ${CYAN}convertDocumentRtfToPng${OFF};Convert Rich Text Format RTF to PNG image array (AUTH)
  ${CYAN}convertDocumentXlsToCsv${OFF};Convert Excel XLS (97-03) Spreadsheet to CSV (AUTH)
  ${CYAN}convertDocumentXlsToPdf${OFF};Convert Excel XLS (97-03) Spreadsheet to PDF (AUTH)
  ${CYAN}convertDocumentXlsToXlsx${OFF};Convert Excel XLS (97-03) Spreadsheet to XLSX (AUTH)
  ${CYAN}convertDocumentXlsxToCsv${OFF};Convert Excel XLSX Spreadsheet to CSV, Single Worksheet (AUTH)
  ${CYAN}convertDocumentXlsxToCsvMulti${OFF};Convert Excel XLSX Spreadsheet to CSV, Multiple Worksheets (AUTH)
  ${CYAN}convertDocumentXlsxToPdf${OFF};Convert Excel XLSX Spreadsheet to PDF (AUTH)
  ${CYAN}convertDocumentXlsxToPng${OFF};Convert Excel XLSX spreadsheet to PNG image array (AUTH)
  ${CYAN}convertDocumentXlsxToTxt${OFF};Convert Excel XLSX Spreadsheet to Text (txt) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[convertImage]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}convertImageGetImageInfo${OFF};Get information about an image (AUTH)
  ${CYAN}convertImageImageFormatConvert${OFF};Image format conversion (AUTH)
  ${CYAN}convertImageImageSetDPI${OFF};Change image DPI (AUTH)
  ${CYAN}convertImageMultipageImageFormatConvert${OFF};Multi-page image format conversion (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[convertTemplate]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}convertTemplateApplyDocxTemplate${OFF};Apply Word DOCX template (AUTH)
  ${CYAN}convertTemplateApplyHtmlTemplate${OFF};Apply HTML template (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[convertWeb]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}convertWebHtmlToDocx${OFF};Convert HTML to Word DOCX Document (AUTH)
  ${CYAN}convertWebHtmlToPdf${OFF};Convert HTML string to PDF (AUTH)
  ${CYAN}convertWebHtmlToPng${OFF};Convert HTML string to PNG screenshot (AUTH)
  ${CYAN}convertWebHtmlToTxt${OFF};Convert HTML string to text (txt) (AUTH)
  ${CYAN}convertWebMdToHtml${OFF};Convert Markdown to HTML (AUTH)
  ${CYAN}convertWebUrlToPdf${OFF};Convert a URL to PDF (AUTH)
  ${CYAN}convertWebUrlToScreenshot${OFF};Take screenshot of URL (AUTH)
  ${CYAN}convertWebUrlToTxt${OFF};Convert website URL page to text (txt) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[editDocument]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}editDocumentBeginEditing${OFF};Begin editing a document (AUTH)
  ${CYAN}editDocumentDocxBody${OFF};Get body from a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxCreateBlankDocument${OFF};Create a blank Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxDeletePages${OFF};Delete, remove pages from a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxDeleteTableRow${OFF};Deletes a table row in an existing table in a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxDeleteTableRowRange${OFF};Deletes a range of multiple table rows in an existing table in a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxFindParagraph${OFF};Find matching paragraphs in a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxGetComments${OFF};Get comments from a Word DOCX document as a flat list (AUTH)
  ${CYAN}editDocumentDocxGetCommentsHierarchical${OFF};Get comments from a Word DOCX document hierarchically (AUTH)
  ${CYAN}editDocumentDocxGetHeadersAndFooters${OFF};Get content of a footer from a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxGetImages${OFF};Get images from a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxGetSections${OFF};Get sections from a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxGetStyles${OFF};Get styles from a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxGetTableByIndex${OFF};Get a specific table by index in a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxGetTableRow${OFF};Gets the contents of an existing table row in an existing table in a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxGetTables${OFF};Get all tables in Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxInsertCommentOnParagraph${OFF};Insert a new comment into a Word DOCX document attached to a paragraph (AUTH)
  ${CYAN}editDocumentDocxInsertImage${OFF};Insert image into a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxInsertParagraph${OFF};Insert a new paragraph into a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxInsertTable${OFF};Insert a new table into a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxInsertTableRow${OFF};Insert a new row into an existing table in a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxPages${OFF};Get pages and content from a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxRemoveHeadersAndFooters${OFF};Remove headers and footers from Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxRemoveObject${OFF};Delete any object in a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxReplace${OFF};Replace string in Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxReplaceParagraph${OFF};Replace matching paragraphs in a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxSetFooter${OFF};Set the footer in a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxSetFooterAddPageNumber${OFF};Add page number to footer in a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxSetHeader${OFF};Set the header in a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxUpdateTableCell${OFF};Update, set contents of a table cell in an existing table in a Word DOCX document (AUTH)
  ${CYAN}editDocumentDocxUpdateTableRow${OFF};Update, set contents of a table row in an existing table in a Word DOCX document (AUTH)
  ${CYAN}editDocumentFinishEditing${OFF};Finish editing document, and download result from document editing (AUTH)
  ${CYAN}editDocumentPptxDeleteSlides${OFF};Delete, remove slides from a PowerPoint PPTX presentation document (AUTH)
  ${CYAN}editDocumentPptxReplace${OFF};Replace string in PowerPoint PPTX presentation (AUTH)
  ${CYAN}editDocumentXlsxAppendRow${OFF};Append row to a Excel XLSX spreadsheet, worksheet (AUTH)
  ${CYAN}editDocumentXlsxClearCellByIndex${OFF};Clear cell contents in an Excel XLSX spreadsheet, worksheet by index (AUTH)
  ${CYAN}editDocumentXlsxClearRow${OFF};Clear row from a Excel XLSX spreadsheet, worksheet (AUTH)
  ${CYAN}editDocumentXlsxCreateBlankSpreadsheet${OFF};Create a blank Excel XLSX spreadsheet (AUTH)
  ${CYAN}editDocumentXlsxCreateSpreadsheetFromData${OFF};Create a new Excel XLSX spreadsheet from column and row data (AUTH)
  ${CYAN}editDocumentXlsxDeleteWorksheet${OFF};Delete, remove worksheet from an Excel XLSX spreadsheet document (AUTH)
  ${CYAN}editDocumentXlsxDisableSharedWorkbook${OFF};Disable Shared Workbook (legacy) in Excel XLSX spreadsheet (AUTH)
  ${CYAN}editDocumentXlsxEnableSharedWorkbook${OFF};Enable Shared Workbook (legacy) in Excel XLSX spreadsheet (AUTH)
  ${CYAN}editDocumentXlsxGetCellByIdentifier${OFF};Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier (AUTH)
  ${CYAN}editDocumentXlsxGetCellByIndex${OFF};Get cell from an Excel XLSX spreadsheet, worksheet by index (AUTH)
  ${CYAN}editDocumentXlsxGetColumns${OFF};Get columns from a Excel XLSX spreadsheet, worksheet (AUTH)
  ${CYAN}editDocumentXlsxGetImages${OFF};Get images from a Excel XLSX spreadsheet, worksheet (AUTH)
  ${CYAN}editDocumentXlsxGetRowsAndCells${OFF};Get rows and cells from a Excel XLSX spreadsheet, worksheet (AUTH)
  ${CYAN}editDocumentXlsxGetSpecificRow${OFF};Get a specific row from a Excel XLSX spreadsheet, worksheet by path (AUTH)
  ${CYAN}editDocumentXlsxGetStyles${OFF};Get styles from a Excel XLSX spreadsheet, worksheet (AUTH)
  ${CYAN}editDocumentXlsxGetWorksheets${OFF};Get worksheets from a Excel XLSX spreadsheet (AUTH)
  ${CYAN}editDocumentXlsxInsertWorksheet${OFF};Insert a new worksheet into an Excel XLSX spreadsheet (AUTH)
  ${CYAN}editDocumentXlsxRenameWorksheet${OFF};Rename a specific worksheet in a Excel XLSX spreadsheet (AUTH)
  ${CYAN}editDocumentXlsxSetCellByIdentifier${OFF};Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier (AUTH)
  ${CYAN}editDocumentXlsxSetCellByIndex${OFF};Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[editPdf]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}editPdfAddAnnotations${OFF};Add one or more PDF annotations, comments in the PDF document (AUTH)
  ${CYAN}editPdfDecrypt${OFF};Decrypt and password-protect a PDF (AUTH)
  ${CYAN}editPdfDeletePages${OFF};Remove, delete pages from a PDF document (AUTH)
  ${CYAN}editPdfEncrypt${OFF};Encrypt and password-protect a PDF (AUTH)
  ${CYAN}editPdfGetAnnotations${OFF};Get PDF annotations, including comments in the document (AUTH)
  ${CYAN}editPdfGetFormFields${OFF};Gets PDF Form fields and values (AUTH)
  ${CYAN}editPdfGetMetadata${OFF};Get PDF document metadata (AUTH)
  ${CYAN}editPdfGetPdfTextByPages${OFF};Get text in a PDF document by page (AUTH)
  ${CYAN}editPdfInsertPages${OFF};Insert, copy pages from one PDF document into another (AUTH)
  ${CYAN}editPdfRasterize${OFF};Rasterize a PDF to an image-based PDF (AUTH)
  ${CYAN}editPdfRemoveAllAnnotations${OFF};Remove all PDF annotations, including comments in the document (AUTH)
  ${CYAN}editPdfRemoveAnnotationItem${OFF};Remove a specific PDF annotation, comment in the document (AUTH)
  ${CYAN}editPdfRotateAllPages${OFF};Rotate all pages in a PDF document (AUTH)
  ${CYAN}editPdfRotatePageRange${OFF};Rotate a range, subset of pages in a PDF document (AUTH)
  ${CYAN}editPdfSetFormFields${OFF};Sets ands fills PDF Form field values (AUTH)
  ${CYAN}editPdfSetMetadata${OFF};Sets PDF document metadata (AUTH)
  ${CYAN}editPdfSetPermissions${OFF};Encrypt, password-protect and set restricted permissions on a PDF (AUTH)
  ${CYAN}editPdfWatermarkText${OFF};Add a text watermark to a PDF (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[editText]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}editTextBase64Decode${OFF};Base 64 decode, convert base 64 string to binary content (AUTH)
  ${CYAN}editTextBase64Detect${OFF};Detect, check if text string is base 64 encoded (AUTH)
  ${CYAN}editTextBase64Encode${OFF};Base 64 encode, convert binary or file data to a text string (AUTH)
  ${CYAN}editTextChangeLineEndings${OFF};Set, change line endings of a text file (AUTH)
  ${CYAN}editTextDetectLineEndings${OFF};Detect line endings of a text file (AUTH)
  ${CYAN}editTextFindRegex${OFF};Find a regular expression regex in text input (AUTH)
  ${CYAN}editTextFindSimple${OFF};Find a string in text input (AUTH)
  ${CYAN}editTextRemoveAllWhitespace${OFF};Remove whitespace from text string (AUTH)
  ${CYAN}editTextRemoveHtml${OFF};Remove HTML from text string (AUTH)
  ${CYAN}editTextReplaceRegex${OFF};Replace a string in text with a regex regular expression string (AUTH)
  ${CYAN}editTextReplaceSimple${OFF};Replace a string in text with another string value (AUTH)
  ${CYAN}editTextTextEncodingDetect${OFF};Detect text encoding of file (AUTH)
  ${CYAN}editTextTrimWhitespace${OFF};Trim leading and trailing whitespace from text string (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[mergeDocument]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}mergeDocumentDocx${OFF};Merge Two Word DOCX Together (AUTH)
  ${CYAN}mergeDocumentDocxMulti${OFF};Merge Multple Word DOCX Together (AUTH)
  ${CYAN}mergeDocumentPdf${OFF};Merge Two PDF Files Together (AUTH)
  ${CYAN}mergeDocumentPdfMulti${OFF};Merge Multple PDF Files Together (AUTH)
  ${CYAN}mergeDocumentPng${OFF};Merge Two PNG Files Together (AUTH)
  ${CYAN}mergeDocumentPngMulti${OFF};Merge Multple PNG Files Together (AUTH)
  ${CYAN}mergeDocumentPptx${OFF};Merge Two PowerPoint PPTX Together (AUTH)
  ${CYAN}mergeDocumentPptxMulti${OFF};Merge Multple PowerPoint PPTX Together (AUTH)
  ${CYAN}mergeDocumentTxt${OFF};Merge Two Text (TXT) Files Together (AUTH)
  ${CYAN}mergeDocumentTxtMulti${OFF};Merge Multple Text (TXT) Files Together (AUTH)
  ${CYAN}mergeDocumentXlsx${OFF};Merge Two Excel XLSX Together (AUTH)
  ${CYAN}mergeDocumentXlsxMulti${OFF};Merge Multple Excel XLSX Together (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[splitDocument]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}splitDocumentDocx${OFF};Split a single Word Document DOCX into Separate Documents by Page (AUTH)
  ${CYAN}splitDocumentPdfByPage${OFF};Split a PDF file into separate PDF files, one per page (AUTH)
  ${CYAN}splitDocumentPptx${OFF};Split a single PowerPoint Presentation PPTX into Separate Slides (AUTH)
  ${CYAN}splitDocumentTxtByLine${OFF};Split a single Text file (txt) into lines (AUTH)
  ${CYAN}splitDocumentTxtByString${OFF};Split a single Text file (txt) by a string delimiter (AUTH)
  ${CYAN}splitDocumentXlsx${OFF};Split a single Excel XLSX into Separate Worksheets (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[validateDocument]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}validateDocumentAutodetectValidation${OFF};Autodetect content type and validate (AUTH)
  ${CYAN}validateDocumentCsvValidation${OFF};Validate a CSV file document (CSV) (AUTH)
  ${CYAN}validateDocumentDocxValidation${OFF};Validate a Word document (DOCX) (AUTH)
  ${CYAN}validateDocumentEmlValidation${OFF};Validate if an EML file is executable (AUTH)
  ${CYAN}validateDocumentExecutableValidation${OFF};Validate if a file is executable (AUTH)
  ${CYAN}validateDocumentGZipValidation${OFF};Validate a GZip Archive file (gzip or gz) (AUTH)
  ${CYAN}validateDocumentJsonValidation${OFF};Validate a JSON file (AUTH)
  ${CYAN}validateDocumentMsgValidation${OFF};Validate if an MSG file is executable (AUTH)
  ${CYAN}validateDocumentPdfValidation${OFF};Validate a PDF document file (AUTH)
  ${CYAN}validateDocumentPptxValidation${OFF};Validate a PowerPoint presentation (PPTX) (AUTH)
  ${CYAN}validateDocumentRarValidation${OFF};Validate a RAR Archive file (RAR) (AUTH)
  ${CYAN}validateDocumentTarValidation${OFF};Validate a TAR Tarball Archive file (TAR) (AUTH)
  ${CYAN}validateDocumentXlsxValidation${OFF};Validate a Excel document (XLSX) (AUTH)
  ${CYAN}validateDocumentXmlValidation${OFF};Validate an XML file (AUTH)
  ${CYAN}validateDocumentZipValidation${OFF};Validate a Zip Archive file (zip) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[viewerTools]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}viewerToolsCreateSimple${OFF};Create a web-based viewer (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[zipArchive]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}zipArchiveZipCreate${OFF};Compress files to create a new zip archive (AUTH)
  ${CYAN}zipArchiveZipCreateAdvanced${OFF};Compress files and folders to create a new zip archive with advanced options (AUTH)
  ${CYAN}zipArchiveZipDecrypt${OFF};Decrypt and remove password protection on a zip file (AUTH)
  ${CYAN}zipArchiveZipEncryptAdvanced${OFF};Encrypt and password protect a zip file (AUTH)
  ${CYAN}zipArchiveZipExtract${OFF};Extract, decompress files and folders from a zip archive (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}Options${OFF}"
    echo -e "  -h,--help\\t\\t\\t\\tPrint this help"
    echo -e "  -V,--version\\t\\t\\t\\tPrint API version"
    echo -e "  --about\\t\\t\\t\\tPrint the information about service"
    echo -e "  --host ${CYAN}<url>${OFF}\\t\\t\\t\\tSpecify the host URL "
echo -e "              \\t\\t\\t\\t(e.g. 'https://api.cloudmersive.com')"

    echo -e "  --force\\t\\t\\t\\tForce command invocation in spite of missing"
    echo -e "         \\t\\t\\t\\trequired parameters or wrong content type"
    echo -e "  --dry-run\\t\\t\\t\\tPrint out the cURL command without"
    echo -e "           \\t\\t\\t\\texecuting it"
    echo -e "  -nc,--no-colors\\t\\t\\tEnforce print without colors, otherwise autodected"
    echo -e "  -ac,--accept ${YELLOW}<mime-type>${OFF}\\t\\tSet the 'Accept' header in the request"
    echo -e "  -ct,--content-type ${YELLOW}<mime-type>${OFF}\\tSet the 'Content-type' header in "
    echo -e "                                \\tthe request"
    echo ""
}


##############################################################################
#
# Print REST service description
#
##############################################################################
print_about() {
    echo ""
    echo -e "${BOLD}${WHITE}convertapi command line client (API version v1)${OFF}"
    echo ""
    echo -e "License: "
    echo -e "Contact: "
    echo ""
read -r -d '' appdescription <<EOF

Convert API lets you effortlessly convert file formats and types.
EOF
echo "$appdescription" | paste -sd' ' | fold -sw 80
}


##############################################################################
#
# Print REST api version
#
##############################################################################
print_version() {
    echo ""
    echo -e "${BOLD}convertapi command line client (API version v1)${OFF}"
    echo ""
}

##############################################################################
#
# Print help for compareDocumentDocx operation
#
##############################################################################
print_compareDocumentDocx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}compareDocumentDocx - Compare Two Word DOCX${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Compare two Office Word Documents (docx) files and highlight the differences" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDataCsvToJson operation
#
##############################################################################
print_convertDataCsvToJson_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDataCsvToJson - Convert CSV to JSON conversion${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert a CSV file to a JSON object array" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}columnNamesFromFirstRow${OFF} ${BLUE}[boolean]${OFF}${OFF} - Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. ${YELLOW}Specify as: columnNamesFromFirstRow:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDataJsonToXml operation
#
##############################################################################
print_convertDataJsonToXml_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDataJsonToXml - Convert JSON to XML conversion${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert a JSON object into XML" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Input JSON to convert to XML" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDataXlsToJson operation
#
##############################################################################
print_convertDataXlsToJson_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDataXlsToJson - Convert Excel (97-2003) XLS to JSON conversion${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert an Excel (97-2003) XLS file to a JSON object array" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDataXlsxToJson operation
#
##############################################################################
print_convertDataXlsxToJson_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDataXlsxToJson - Convert Excel XLSX to JSON conversion${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert an Excel XLSX file to a JSON object array" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDataXmlEditAddAttributeWithXPath operation
#
##############################################################################
print_convertDataXmlEditAddAttributeWithXPath_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDataXmlEditAddAttributeWithXPath - Adds an attribute to all XML nodes matching XPath expression${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}XPathExpression${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Valid XML XPath query expression ${YELLOW}Specify as: XPathExpression:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}XmlAttributeName${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Name of the XML attribute to add ${YELLOW}Specify as: XmlAttributeName:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}XmlAttributeValue${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Value of the XML attribute to add ${YELLOW}Specify as: XmlAttributeValue:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDataXmlEditAddChildWithXPath operation
#
##############################################################################
print_convertDataXmlEditAddChildWithXPath_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDataXmlEditAddChildWithXPath - Adds an XML node as a child to XML nodes matching XPath expression${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}XPathExpression${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Valid XML XPath query expression ${YELLOW}Specify as: XPathExpression:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}XmlNodeToAdd${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - XML Node to add as a child ${YELLOW}Specify as: XmlNodeToAdd:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDataXmlEditRemoveAllChildNodesWithXPath operation
#
##############################################################################
print_convertDataXmlEditRemoveAllChildNodesWithXPath_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDataXmlEditRemoveAllChildNodesWithXPath - Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}XPathExpression${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Valid XML XPath query expression ${YELLOW}Specify as: XPathExpression:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDataXmlEditReplaceWithXPath operation
#
##############################################################################
print_convertDataXmlEditReplaceWithXPath_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDataXmlEditReplaceWithXPath - Replaces XML nodes matching XPath expression with new node${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}XPathExpression${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Valid XML XPath query expression ${YELLOW}Specify as: XPathExpression:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}XmlNodeReplacement${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - XML Node replacement content ${YELLOW}Specify as: XmlNodeReplacement:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDataXmlEditSetValueWithXPath operation
#
##############################################################################
print_convertDataXmlEditSetValueWithXPath_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDataXmlEditSetValueWithXPath - Sets the value contents of XML nodes matching XPath expression${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}XPathExpression${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Valid XML XPath query expression ${YELLOW}Specify as: XPathExpression:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}XmlValue${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - XML Value to set into the matching XML nodes ${YELLOW}Specify as: XmlValue:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDataXmlFilterWithXPath operation
#
##############################################################################
print_convertDataXmlFilterWithXPath_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDataXmlFilterWithXPath - Filter, select XML nodes using XPath expression, get results${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Return the reuslts of filtering, selecting an XML document with an XPath expression" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}XPathExpression${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Valid XML XPath query expression ${YELLOW}Specify as: XPathExpression:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDataXmlQueryWithXQuery operation
#
##############################################################################
print_convertDataXmlQueryWithXQuery_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDataXmlQueryWithXQuery - Query an XML file using XQuery query, get results${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}XQuery${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported ${YELLOW}Specify as: XQuery:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDataXmlQueryWithXQueryMulti operation
#
##############################################################################
print_convertDataXmlQueryWithXQueryMulti_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDataXmlQueryWithXQueryMulti - Query multiple XML files using XQuery query, get results${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\"books.xml\") or doc(\"restaurants.xml\") if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}XQuery${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported ${YELLOW}Specify as: XQuery:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDataXmlRemoveWithXPath operation
#
##############################################################################
print_convertDataXmlRemoveWithXPath_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDataXmlRemoveWithXPath - Remove, delete XML nodes and items matching XPath expression${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}XPathExpression${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Valid XML XPath query expression ${YELLOW}Specify as: XPathExpression:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDataXmlToJson operation
#
##############################################################################
print_convertDataXmlToJson_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDataXmlToJson - Convert XML to JSON conversion${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert an XML string or file into JSON" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDataXmlTransformWithXsltToXml operation
#
##############################################################################
print_convertDataXmlTransformWithXsltToXml_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDataXmlTransformWithXsltToXml - Transform XML document file with XSLT into a new XML document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert an XML string or file into JSON" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentAutodetectGetInfo operation
#
##############################################################################
print_convertDocumentAutodetectGetInfo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentAutodetectGetInfo - Get document type information${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Auto-detects a document's type information; does not require file extension.  Analyzes file contents to confirm file type.  Even if no file extension is present, the auto-detect system will reliably analyze the contents of the file and identify its file type.  Supports over 100 image file formats, Office document file formats, PDF, and more." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentAutodetectToJpg operation
#
##############################################################################
print_convertDocumentAutodetectToJpg_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentAutodetectToJpg - Convert Document to JPG/JPEG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Automatically detect file type and convert it to an array of JPG/JPEG Images.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files. Customize image quality using quality header." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}quality${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. ${YELLOW}Specify as: quality:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentAutodetectToPdf operation
#
##############################################################################
print_convertDocumentAutodetectToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentAutodetectToPdf - Convert Document to PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Automatically detect file type and convert it to PDF.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentAutodetectToPngArray operation
#
##############################################################################
print_convertDocumentAutodetectToPngArray_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentAutodetectToPngArray - Convert Document to PNG array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Automatically detect file type and convert it to an array of PNG images.  Supports all of the major Office document file formats, over 100 image formats, and even multi-page TIFF files." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentAutodetectToThumbnail operation
#
##############################################################################
print_convertDocumentAutodetectToThumbnail_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentAutodetectToThumbnail - Convert File to Thumbnail Image${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Automatically detect file type and convert it to a PNG thumbnail. Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files. Returns a generic PNG thumbnail for unsupported formats. Maximum thumbnail size is 2048x2048." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}maxWidth${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; Maximum width of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. ${YELLOW}Specify as: maxWidth:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}maxHeight${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; Maximum height of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. ${YELLOW}Specify as: maxHeight:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}extension${OFF} ${BLUE}[string]${OFF}${OFF} - Optional; Specify the file extension of the inputFile. This will improve the response time in most cases. Also allows unsupported files without extensions to still return a corresponding generic icon. ${YELLOW}Specify as: extension:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentAutodetectToThumbnailsAdvanced operation
#
##############################################################################
print_convertDocumentAutodetectToThumbnailsAdvanced_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentAutodetectToThumbnailsAdvanced - Convert File to Thumbnail Image Object${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Automatically detect file type and convert it to an array of PNG thumbnails, returned as an object. May specify the number of pages for multiple thumbnails; default is one thumbnail. Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files. Returns a generic PNG thumbnail for unsupported formats. Maximum thumbnail size is 2048x2048." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}pages${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; Specify how many pages of the document will be converted to thumbnails. Default is 1 page. ${YELLOW}Specify as: pages:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}maxWidth${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; Maximum width of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. ${YELLOW}Specify as: maxWidth:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}maxHeight${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; Maximum height of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. ${YELLOW}Specify as: maxHeight:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}extension${OFF} ${BLUE}[string]${OFF}${OFF} - Optional; Specify the file extension of the inputFile. This will improve the response time in most cases. Also allows unsupported files without extensions to still return a corresponding generic icon. ${YELLOW}Specify as: extension:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentAutodetectToTxt operation
#
##############################################################################
print_convertDocumentAutodetectToTxt_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentAutodetectToTxt - Convert Document to Text (txt)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Automatically detect file type and convert it to Text.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT) and PDF files.  For spreadsheets, all worksheets will be included.  If you wish to exclude certain pages, worksheets, slides, etc. use the Split document API first, or the delete pages/slides/worksheet APIs first to adjust the document to the target state prior to converting to text." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}textFormattingMode${OFF} ${BLUE}[string]${OFF}${OFF} - Optional; specify how whitespace should be handled when converting the document to text.  Possible values are 'preserveWhitespace' which will attempt to preserve whitespace in the document and relative positioning of text within the document, and 'minimizeWhitespace' which will not insert additional spaces into the document in most cases.  Default is 'preserveWhitespace'. ${YELLOW}Specify as: textFormattingMode:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentCsvToXlsx operation
#
##############################################################################
print_convertDocumentCsvToXlsx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentCsvToXlsx - Convert CSV to Excel XLSX Spreadsheet${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert CSV file to Office Excel XLSX Workbooks file format." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentDocToDocx operation
#
##############################################################################
print_convertDocumentDocToDocx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentDocToDocx - Convert Word DOC (97-03) Document to DOCX${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert/upgrade Office Word (97-2003 Format) Documents (doc) to the modern DOCX format" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentDocToPdf operation
#
##############################################################################
print_convertDocumentDocToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentDocToPdf - Convert Word DOC (97-03) Document to PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Word (97-2003 Format) Documents (doc) to standard PDF" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentDocToTxt operation
#
##############################################################################
print_convertDocumentDocToTxt_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentDocToTxt - Convert Word DOC (97-03) Document to Text (txt)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Word DOC (97-03) Document (doc) to text" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentDocxToHtml operation
#
##############################################################################
print_convertDocumentDocxToHtml_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentDocxToHtml - Convert Word DOCX Document to HTML Document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Word Document (DOCX) to HTML Document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentDocxToJpg operation
#
##############################################################################
print_convertDocumentDocxToJpg_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentDocxToJpg - Convert Word DOCX Document to JPG/JPEG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts an Office Word Document (DOCX) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}quality${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. ${YELLOW}Specify as: quality:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentDocxToPdf operation
#
##############################################################################
print_convertDocumentDocxToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentDocxToPdf - Convert Word DOCX Document to PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Word Documents (docx) to standard PDF" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentDocxToPng operation
#
##############################################################################
print_convertDocumentDocxToPng_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentDocxToPng - Convert Word DOCX Document to PNG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts an Office Word Document (DOCX) file to an array of PNG images, one for each page." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentDocxToRtf operation
#
##############################################################################
print_convertDocumentDocxToRtf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentDocxToRtf - Convert Word DOCX Document to RTF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert an Office Word Document (DOCX) to Rich Text Format Document (RTF)" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentDocxToTxt operation
#
##############################################################################
print_convertDocumentDocxToTxt_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentDocxToTxt - Convert Word DOCX Document to Text (txt)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Word Documents (docx) to text" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}textFormattingMode${OFF} ${BLUE}[string]${OFF}${OFF} - Optional; specify how whitespace should be handled when converting the document to text.  Possible values are 'preserveWhitespace' which will attempt to preserve whitespace in the document and relative positioning of text within the document, and 'minimizeWhitespace' which will not insert additional spaces into the document in most cases.  Default is 'minimizeWhitespace'. ${YELLOW}Specify as: textFormattingMode:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentEmlToHtml operation
#
##############################################################################
print_convertDocumentEmlToHtml_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentEmlToHtml - Convert Email EML file to HTML string${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Outlook Email EML file to HTML string and attachments. Supports images if they are base 64 inline." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}bodyOnly${OFF} ${BLUE}[boolean]${OFF}${OFF} - Optional; If true, the HTML string will only include the body of the email. Other information such as subject will still be given as properties in the response object. Default is false. ${YELLOW}Specify as: bodyOnly:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}includeAttachments${OFF} ${BLUE}[boolean]${OFF}${OFF} - Optional; If false, the response object will not include any attachment files from the input file. Default is true. ${YELLOW}Specify as: includeAttachments:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentEmlToJpg operation
#
##############################################################################
print_convertDocumentEmlToJpg_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentEmlToJpg - Convert Email EML file to JPG/JPEG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts an Outlook Email File (EML) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}quality${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. ${YELLOW}Specify as: quality:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentEmlToPdf operation
#
##############################################################################
print_convertDocumentEmlToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentEmlToPdf - Convert Email EML file to PDF document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Outlook Email EML file to PDF document. Supports images if they are base 64 inline." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}bodyOnly${OFF} ${BLUE}[boolean]${OFF}${OFF} - Optional; If true, the HTML string will only include the body of the email. Other information such as subject will still be given as properties in the response object. Default is false. ${YELLOW}Specify as: bodyOnly:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentEmlToPng operation
#
##############################################################################
print_convertDocumentEmlToPng_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentEmlToPng - Convert Email EML file to PNG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts an Outlook Email File (EML) to an array of PNG images, one for each page." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentGetFileTypeIcon operation
#
##############################################################################
print_convertDocumentGetFileTypeIcon_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentGetFileTypeIcon - Get PNG icon file for the file extension${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns a PNG icon for the given file format extension as a file for download. User may specify the icon size. Supports over 100 file formats, with a generic icon for unsupported formats." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fileExtension${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Required; The file extension to be used for the icon. Limited to 4 AlphaNumeric characters. ${YELLOW}Specify as: fileExtension:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}iconSize${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; The desired width of the icon, preserving its aspect ratio. ${YELLOW}Specify as: iconSize:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentGetFileTypeIconAdvanced operation
#
##############################################################################
print_convertDocumentGetFileTypeIconAdvanced_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentGetFileTypeIconAdvanced - Get PNG icon byte array for the file extension${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns a PNG icon for the given file format extension directly as a byte array. User may specify the icon size. Supports over 100 file formats, with a generic icon for unsupported formats." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fileExtension${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Required; The file extension to be used for the icon. Limited to 4 AlphaNumeric characters. ${YELLOW}Specify as: fileExtension:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}iconSize${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; The desired width of the icon, preserving its aspect ratio. ${YELLOW}Specify as: iconSize:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentHtmlToPdf operation
#
##############################################################################
print_convertDocumentHtmlToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentHtmlToPdf - Convert HTML document file to PDF Document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert standard HTML, with full support for CSS, JavaScript, Images, and other complex behavior to PDF.  To use external files such as images, use an absolute URL to the file." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentHtmlToPng operation
#
##############################################################################
print_convertDocumentHtmlToPng_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentHtmlToPng - Convert HTML document file to PNG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert standard HTML, with full support for CSS, JavaScript, Images, and other complex behavior to an array of PNG images, one for each page.  To use external files in your HTML such as images, use an absolute URL to the file." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentHtmlToTxt operation
#
##############################################################################
print_convertDocumentHtmlToTxt_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentHtmlToTxt - HTML Document file to Text (txt)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "HTML document to text" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentKeynoteToJpg operation
#
##############################################################################
print_convertDocumentKeynoteToJpg_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentKeynoteToJpg - Convert Keynote Presentation (KEY) to JPG/JPEG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts a Mac Keynote Presentation (KEY) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}quality${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. ${YELLOW}Specify as: quality:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentKeynoteToPdf operation
#
##############################################################################
print_convertDocumentKeynoteToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentKeynoteToPdf - Convert Keynote Presentation (KEY) to PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Mac Keynote Presentation (KEY) to standard PDF" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentKeynoteToPng operation
#
##############################################################################
print_convertDocumentKeynoteToPng_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentKeynoteToPng - Convert Keynote Presentation (KEY) to PNG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts a Mac Keynote Presentation (KEY) to an array of PNG images, one for each page." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentKeynoteToPptx operation
#
##############################################################################
print_convertDocumentKeynoteToPptx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentKeynoteToPptx - Convert Keynote Presentation (KEY) to PPTX${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Mac Keynote Presentation (KEY) to PowerPoint Presentation (PPTX)" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentMsgToHtml operation
#
##############################################################################
print_convertDocumentMsgToHtml_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentMsgToHtml - Convert Email MSG file to HTML string${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Outlook Email MSG file to HTML string and attachments. Supports images if they are base 64 inline. Supports most, but not all, RTF bodied MSG files." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}bodyOnly${OFF} ${BLUE}[boolean]${OFF}${OFF} - Optional; If true, the HTML string will only include the body of the MSG. Other information such as subject will still be given as properties in the response object. Default is false. ${YELLOW}Specify as: bodyOnly:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}includeAttachments${OFF} ${BLUE}[boolean]${OFF}${OFF} - Optional; If false, the response object will not include any attachment files from the input file. Default is true. ${YELLOW}Specify as: includeAttachments:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentMsgToJpg operation
#
##############################################################################
print_convertDocumentMsgToJpg_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentMsgToJpg - Convert Email MSG file to JPG/JPEG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts an Outlook Message File (MSG) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}quality${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. ${YELLOW}Specify as: quality:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentMsgToPdf operation
#
##############################################################################
print_convertDocumentMsgToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentMsgToPdf - Convert Email MSG file to PDF document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Outlook Email MSG file to PDF document. Supports images if they are base 64 inline. Supports most, but not all, RTF bodied MSG files." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}bodyOnly${OFF} ${BLUE}[boolean]${OFF}${OFF} - Optional; If true, the HTML string will only include the body of the email. Other information such as subject will still be given as properties in the response object. Default is false. ${YELLOW}Specify as: bodyOnly:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentMsgToPng operation
#
##############################################################################
print_convertDocumentMsgToPng_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentMsgToPng - Convert Email MSG file to PNG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts an Outlook Email Message File (MSG) to an array of PNG images, one for each page." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentOdpToJpg operation
#
##############################################################################
print_convertDocumentOdpToJpg_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentOdpToJpg - Convert ODP Presentation to JPG/JPEG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts an Open Document Presentation (ODP) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}quality${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. ${YELLOW}Specify as: quality:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentOdpToPdf operation
#
##############################################################################
print_convertDocumentOdpToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentOdpToPdf - Convert ODP Presentation to PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Open Document Presentation (ODP) to standard PDF" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentOdpToPng operation
#
##############################################################################
print_convertDocumentOdpToPng_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentOdpToPng - Convert ODP Presentation to PNG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts an Office Open Document Presentation (ODP) to an array of PNG images, one for each page." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentOdpToPptx operation
#
##############################################################################
print_convertDocumentOdpToPptx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentOdpToPptx - Convert ODP Presentation to PPTX${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Open Document Presentation (ODP) to PowerPoint Presentation (PPTX)" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentOdsToJpg operation
#
##############################################################################
print_convertDocumentOdsToJpg_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentOdsToJpg - Convert ODS Spreadsheet to JPG/JPEG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts an Open Document Spreadsheet (ODS) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}quality${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. ${YELLOW}Specify as: quality:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentOdsToPdf operation
#
##############################################################################
print_convertDocumentOdsToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentOdsToPdf - Convert ODS Spreadsheet to PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Open Document Spreadsheet (ODS) to standard PDF" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentOdsToPng operation
#
##############################################################################
print_convertDocumentOdsToPng_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentOdsToPng - Convert ODS Spreadsheet to PNG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts an Office Open Document Spreadsheet (ODS) to an array of PNG images, one for each page." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentOdsToXlsx operation
#
##############################################################################
print_convertDocumentOdsToXlsx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentOdsToXlsx - Convert ODS Spreadsheet to XLSX${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Open Document Spreadsheet (ODS) to Excel Spreadsheet (XLSX)" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentOdtToDocx operation
#
##############################################################################
print_convertDocumentOdtToDocx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentOdtToDocx - Convert ODT Text File to Word DOCX${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Open Document Text File (ODT) to Word DOCX Document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentOdtToJpg operation
#
##############################################################################
print_convertDocumentOdtToJpg_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentOdtToJpg - Convert ODT Text File to JPG/JPEG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts an Open Document Text File (ODT) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}quality${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. ${YELLOW}Specify as: quality:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentOdtToPdf operation
#
##############################################################################
print_convertDocumentOdtToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentOdtToPdf - Convert ODT Text File to PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Open Document Text File (ODT) to standard PDF" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentOdtToPng operation
#
##############################################################################
print_convertDocumentOdtToPng_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentOdtToPng - Convert ODT Text File to PNG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts an Office Open Document Text File (ODT) to an array of PNG images, one for each page." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentPdfToDocx operation
#
##############################################################################
print_convertDocumentPdfToDocx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentPdfToDocx - Convert PDF to Word DOCX Document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert standard PDF to Office Word Documents (docx).    Converts a PDF at high fidelity into Word format, where it can be easily edited and processed." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentPdfToDocxRasterize operation
#
##############################################################################
print_convertDocumentPdfToDocxRasterize_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentPdfToDocxRasterize - Convert PDF to Word DOCX Document based on rasterized version of the PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert standard PDF to Office Word Documents (docx), but first rasterize the PDF.    Converts a PDF at high fidelity into Word format." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentPdfToJpg operation
#
##############################################################################
print_convertDocumentPdfToJpg_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentPdfToJpg - Convert PDF to JPG/JPEG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts a PDF Document to an array of JPG/JPEG images, one for each page. Customize image quality using quality header." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}quality${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. ${YELLOW}Specify as: quality:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentPdfToPngArray operation
#
##############################################################################
print_convertDocumentPdfToPngArray_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentPdfToPngArray - Convert PDF to PNG Image Array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert PDF document to PNG array, one image per page." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentPdfToPngSingle operation
#
##############################################################################
print_convertDocumentPdfToPngSingle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentPdfToPngSingle - Convert PDF to Single PNG image${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert PDF document to a single tall PNG image, by stacking/concatenating the images vertically into a single \"tall\" image" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentPdfToPptx operation
#
##############################################################################
print_convertDocumentPdfToPptx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentPdfToPptx - Convert PDF to PowerPoint PPTX Presentation${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert standard PDF to Office PowerPoint Presentation (pptx).  Converts a PDF file at high fidelity into PowerPoint format, where it can be easily edited and processed." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentPdfToTxt operation
#
##############################################################################
print_convertDocumentPdfToTxt_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentPdfToTxt - Convert PDF Document to Text (txt)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "PDF document to text" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}textFormattingMode${OFF} ${BLUE}[string]${OFF}${OFF} - Optional; specify how whitespace should be handled when converting PDF to text.  Possible values are 'preserveWhitespace' which will attempt to preserve whitespace in the document and relative positioning of text within the document, and 'minimizeWhitespace' which will not insert additional spaces into the document in most cases.  Default is 'preserveWhitespace'. ${YELLOW}Specify as: textFormattingMode:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentPngArrayToPdf operation
#
##############################################################################
print_convertDocumentPngArrayToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentPngArrayToPdf - Convert PNG Array to PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert an array of PNG images, one image per page, into a newly-created PDF.  Supports images of different sizes as input." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentPptToPdf operation
#
##############################################################################
print_convertDocumentPptToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentPptToPdf - Convert PowerPoint PPT (97-03) Presentation to PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office PowerPoint (97-2003) Documents (ppt) to standard PDF" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentPptToPptx operation
#
##############################################################################
print_convertDocumentPptToPptx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentPptToPptx - Convert PowerPoint PPT (97-03) Presentation to PPTX${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert/upgrade Office PowerPoint (97-2003) Documents (ppt) to modern PPTX" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentPptxToPdf operation
#
##############################################################################
print_convertDocumentPptxToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentPptxToPdf - Convert PowerPoint PPTX Presentation to PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office PowerPoint Documents (pptx) to standard PDF" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentPptxToPng operation
#
##############################################################################
print_convertDocumentPptxToPng_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentPptxToPng - Convert PowerPoint PPTX to PNG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts a PowerPoint Presentation (PPTX) file to an array of PNG images, one for each page." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentPptxToTxt operation
#
##############################################################################
print_convertDocumentPptxToTxt_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentPptxToTxt - Convert PowerPoint PPTX Presentation to Text (txt)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office PowerPoint Documents (pptx) to standard Text" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentRtfToDocx operation
#
##############################################################################
print_convertDocumentRtfToDocx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentRtfToDocx - Convert Rich Text Format RTF to DOCX Document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Rich Text Format Document (RTF) to Word DOCX Document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentRtfToHtml operation
#
##############################################################################
print_convertDocumentRtfToHtml_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentRtfToHtml - Convert Rich Text Format RTF to HTML Document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Rich Text Format Document (RTF) to HTML Document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentRtfToJpg operation
#
##############################################################################
print_convertDocumentRtfToJpg_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentRtfToJpg - Convert Rich Text Format RTF to JPG/JPEG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts a Rich Text Format Document (RTF) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}quality${OFF} ${BLUE}[integer]${OFF}${OFF} - Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. ${YELLOW}Specify as: quality:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentRtfToPdf operation
#
##############################################################################
print_convertDocumentRtfToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentRtfToPdf - Convert Rich Text Format RTF to PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Rich Text Format Document (RTF) to standard PDF" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentRtfToPng operation
#
##############################################################################
print_convertDocumentRtfToPng_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentRtfToPng - Convert Rich Text Format RTF to PNG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts a Rich Text Format Document (RTF) to an array of PNG images, one for each page." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentXlsToCsv operation
#
##############################################################################
print_convertDocumentXlsToCsv_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentXlsToCsv - Convert Excel XLS (97-03) Spreadsheet to CSV${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert/upgrade Office Excel (97-2003) Workbooks (xls) to standard CSV format." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentXlsToPdf operation
#
##############################################################################
print_convertDocumentXlsToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentXlsToPdf - Convert Excel XLS (97-03) Spreadsheet to PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Excel (97-2003) Workbooks (xls) to standard PDF.  Converts all worksheets in the workbook to PDF." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentXlsToXlsx operation
#
##############################################################################
print_convertDocumentXlsToXlsx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentXlsToXlsx - Convert Excel XLS (97-03) Spreadsheet to XLSX${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert/upgrade Office Excel (97-2003) Workbooks (xls) to modern XLSX format." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentXlsxToCsv operation
#
##############################################################################
print_convertDocumentXlsxToCsv_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentXlsxToCsv - Convert Excel XLSX Spreadsheet to CSV, Single Worksheet${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Excel Workbooks (XLSX) to standard Comma-Separated Values (CSV) format.  Supports both XLSX and XLSB file Excel formats.  If the input file contains multiple worksheets, the first one is used.  If you wish to convert all of the worksheets (not just the first one), be sure to use the xlsx/to/csv/multi API." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}outputEncoding${OFF} ${BLUE}[string]${OFF}${OFF} - Optional, set the output text encoding for the result; possible values are UTF-8, ASCII and UTF-32.  Default is UTF-8. ${YELLOW}Specify as: outputEncoding:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentXlsxToCsvMulti operation
#
##############################################################################
print_convertDocumentXlsxToCsvMulti_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentXlsxToCsvMulti - Convert Excel XLSX Spreadsheet to CSV, Multiple Worksheets${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Excel Workbooks (XLSX) to standard Comma-Separated Values (CSV) format, with support for multiple worksheets.  Supports both XLSX and XLSB file Excel formats.  Returns multiple CSV files, one for each worksheet (tab) in the spreadsheet." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}outputEncoding${OFF} ${BLUE}[string]${OFF}${OFF} - Optional, set the output text encoding for the result; possible values are UTF-8, ASCII and UTF-32.  Default is UTF-8. ${YELLOW}Specify as: outputEncoding:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentXlsxToPdf operation
#
##############################################################################
print_convertDocumentXlsxToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentXlsxToPdf - Convert Excel XLSX Spreadsheet to PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Excel Workbooks (XLSX) to standard PDF.  Converts all worksheets in the workbook to PDF.  Supports both XLSX and XLSB Excel file formats." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentXlsxToPng operation
#
##############################################################################
print_convertDocumentXlsxToPng_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentXlsxToPng - Convert Excel XLSX spreadsheet to PNG image array${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts an Excel Spreadsheet (XLSX) file to an array of PNG images, one for each page." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertDocumentXlsxToTxt operation
#
##############################################################################
print_convertDocumentXlsxToTxt_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertDocumentXlsxToTxt - Convert Excel XLSX Spreadsheet to Text (txt)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert Office Excel Workbooks (XLSX) to standard Text.  Converts all worksheets in the workbook to Text.  Supports both XLSX and XLSB file formats.  When a spreadsheet contains multiple worksheets, will export all of the text from all of the worksheets.  If you wish to export the text from only one worksheet, try using the Split XLSX API to split the spreadsheet into multiple worksheet files, and then run XLSX to Text on the individual worksheet file that you need to extract the text from." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertImageGetImageInfo operation
#
##############################################################################
print_convertImageGetImageInfo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertImageGetImageInfo - Get information about an image${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get details from an image such as size, format and MIME type, compression, EXIF data such as location, DPI, unique colors, transparency information, and more" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertImageImageFormatConvert operation
#
##############################################################################
print_convertImageImageFormatConvert_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertImageImageFormatConvert - Image format conversion${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert between over 100 file formats, including key formats such as Photoshop (PSD), PNG, JPG, GIF, NEF, and BMP." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}format1${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Input file format as a 3+ letter file extension.  You can also provide UNKNOWN for unknown file formats. Supported formats include AAI, ART, ARW, AVS, BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT, DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC, HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG, JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD, PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG, PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB, RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF, TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F, YCbCr, YCbCrA, YUV ${YELLOW}Specify as: format1=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}format2${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Output (convert to this format) file format as a 3+ letter file extension.  Supported formats include AAI, ART, ARW, AVS, BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT, DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC, HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG, JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD, PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG, PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB, RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF, TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F, YCbCr, YCbCrA, YUV ${YELLOW}Specify as: format2=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertImageImageSetDPI operation
#
##############################################################################
print_convertImageImageSetDPI_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertImageImageSetDPI - Change image DPI${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Resize an image to have a different DPI" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dpi${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF}${OFF} - New DPI in pixels-per-inch, for example 300 DPI or 600 DPI ${YELLOW}Specify as: dpi=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertImageMultipageImageFormatConvert operation
#
##############################################################################
print_convertImageMultipageImageFormatConvert_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertImageMultipageImageFormatConvert - Multi-page image format conversion${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert between over 100 file formats, including support for Multiple-Page formats (e.g. PDFs, TIFFs, etc. with multiple pages)." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}format1${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Input file format as a 3+ letter file extension.  You can also provide UNKNOWN for unknown file formats.  Supported formats include AAI, ART, ARW, AVS, BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT, DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC, HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG, JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD, PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG, PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB, RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF, TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F, YCbCr, YCbCrA, YUV ${YELLOW}Specify as: format1=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}format2${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Output (convert to this format) file format as a 3+ letter file extension.  Supported formats include AAI, ART, ARW, AVS, BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT, DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC, HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG, JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD, PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG, PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB, RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF, TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F, YCbCr, YCbCrA, YUV ${YELLOW}Specify as: format2=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertTemplateApplyDocxTemplate operation
#
##############################################################################
print_convertTemplateApplyDocxTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertTemplateApplyDocxTemplate - Apply Word DOCX template${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Apply operations to fill in a Word DOCX template by replacing target template/placeholder strings in the DOCX with values, generating a final Word DOCX result.  For example, you could create a Word Document invoice containing strings such as \"{FirstName}\" and \"{LastName}\" and then replace these values with \"John\" and \"Smith\"." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}templateDefinition${OFF} ${BLUE}[map]${OFF}${OFF} - Template definition for the document, including what values to replace ${YELLOW}Specify as: templateDefinition:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertTemplateApplyHtmlTemplate operation
#
##############################################################################
print_convertTemplateApplyHtmlTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertTemplateApplyHtmlTemplate - Apply HTML template${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Apply operations to fill in an HTML template, generating a final HTML result" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Operations to apply to template" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertWebHtmlToDocx operation
#
##############################################################################
print_convertWebHtmlToDocx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertWebHtmlToDocx - Convert HTML to Word DOCX Document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert HTML to Office Word Document (DOCX) format" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - HTML input to convert to DOCX" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertWebHtmlToPdf operation
#
##############################################################################
print_convertWebHtmlToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertWebHtmlToPdf - Convert HTML string to PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Fully renders a website and returns a PDF of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - HTML to PDF request parameters" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertWebHtmlToPng operation
#
##############################################################################
print_convertWebHtmlToPng_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertWebHtmlToPng - Convert HTML string to PNG screenshot${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Fully renders a website and returns a PNG (screenshot) of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - HTML to PNG request parameters" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertWebHtmlToTxt operation
#
##############################################################################
print_convertWebHtmlToTxt_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertWebHtmlToTxt - Convert HTML string to text (txt)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts an HTML string input into text (txt); extracts text from HTML" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - HTML to Text request parameters" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertWebMdToHtml operation
#
##############################################################################
print_convertWebMdToHtml_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertWebMdToHtml - Convert Markdown to HTML${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Convert a markdown file (.md) to HTML" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertWebUrlToPdf operation
#
##############################################################################
print_convertWebUrlToPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertWebUrlToPdf - Convert a URL to PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Fully renders a website and returns a PDF of the full page.  Javascript, HTML5, CSS and other advanced features are all supported." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - URL to PDF request parameters" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertWebUrlToScreenshot operation
#
##############################################################################
print_convertWebUrlToScreenshot_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertWebUrlToScreenshot - Take screenshot of URL${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Fully renders a website and returns a PNG screenshot of the full page image.  Javascript, HTML5, CSS and other advanced features are all supported." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Screenshot request parameters" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for convertWebUrlToTxt operation
#
##############################################################################
print_convertWebUrlToTxt_help() {
    echo ""
    echo -e "${BOLD}${WHITE}convertWebUrlToTxt - Convert website URL page to text (txt)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Converts a website URL page into text (txt); extracts text from HTML" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - HTML to Text request parameters" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentBeginEditing operation
#
##############################################################################
print_editDocumentBeginEditing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentBeginEditing - Begin editing a document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxBody operation
#
##############################################################################
print_editDocumentDocxBody_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxBody - Get body from a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxCreateBlankDocument operation
#
##############################################################################
print_editDocumentDocxCreateBlankDocument_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxCreateBlankDocument - Create a blank Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxDeletePages operation
#
##############################################################################
print_editDocumentDocxDeletePages_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxDeletePages - Delete, remove pages from a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxDeleteTableRow operation
#
##############################################################################
print_editDocumentDocxDeleteTableRow_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxDeleteTableRow - Deletes a table row in an existing table in a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Deletes an existing table row in a Word DOCX Document and returns the result." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxDeleteTableRowRange operation
#
##############################################################################
print_editDocumentDocxDeleteTableRowRange_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxDeleteTableRowRange - Deletes a range of multiple table rows in an existing table in a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxFindParagraph operation
#
##############################################################################
print_editDocumentDocxFindParagraph_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxFindParagraph - Find matching paragraphs in a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxGetComments operation
#
##############################################################################
print_editDocumentDocxGetComments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxGetComments - Get comments from a Word DOCX document as a flat list${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies)." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxGetCommentsHierarchical operation
#
##############################################################################
print_editDocumentDocxGetCommentsHierarchical_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxGetCommentsHierarchical - Get comments from a Word DOCX document hierarchically${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxGetHeadersAndFooters operation
#
##############################################################################
print_editDocumentDocxGetHeadersAndFooters_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxGetHeadersAndFooters - Get content of a footer from a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the footer content from a Word Document (DOCX) format file" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxGetImages operation
#
##############################################################################
print_editDocumentDocxGetImages_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxGetImages - Get images from a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the images defined in the Word Document (DOCX) format file" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxGetSections operation
#
##############################################################################
print_editDocumentDocxGetSections_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxGetSections - Get sections from a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the sections defined in the Word Document (DOCX) format file" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxGetStyles operation
#
##############################################################################
print_editDocumentDocxGetStyles_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxGetStyles - Get styles from a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the styles defined in the Word Document (DOCX) format file" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxGetTableByIndex operation
#
##############################################################################
print_editDocumentDocxGetTableByIndex_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxGetTableByIndex - Get a specific table by index in a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the specific table object by its 0-based index in an Office Word Document (DOCX)" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxGetTableRow operation
#
##############################################################################
print_editDocumentDocxGetTableRow_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxGetTableRow - Gets the contents of an existing table row in an existing table in a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Gets the contents of an existing table row in a Word DOCX Document and returns the result." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxGetTables operation
#
##############################################################################
print_editDocumentDocxGetTables_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxGetTables - Get all tables in Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns all the table objects in an Office Word Document (docx)" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxInsertCommentOnParagraph operation
#
##############################################################################
print_editDocumentDocxInsertCommentOnParagraph_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxInsertCommentOnParagraph - Insert a new comment into a Word DOCX document attached to a paragraph${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxInsertImage operation
#
##############################################################################
print_editDocumentDocxInsertImage_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxInsertImage - Insert image into a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxInsertParagraph operation
#
##############################################################################
print_editDocumentDocxInsertParagraph_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxInsertParagraph - Insert a new paragraph into a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxInsertTable operation
#
##############################################################################
print_editDocumentDocxInsertTable_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxInsertTable - Insert a new table into a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxInsertTableRow operation
#
##############################################################################
print_editDocumentDocxInsertTableRow_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxInsertTableRow - Insert a new row into an existing table in a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxPages operation
#
##############################################################################
print_editDocumentDocxPages_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxPages - Get pages and content from a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the pages and contents of each page defined in the Word Document (DOCX) format file" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxRemoveHeadersAndFooters operation
#
##############################################################################
print_editDocumentDocxRemoveHeadersAndFooters_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxRemoveHeadersAndFooters - Remove headers and footers from Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxRemoveObject operation
#
##############################################################################
print_editDocumentDocxRemoveObject_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxRemoveObject - Delete any object in a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxReplace operation
#
##############################################################################
print_editDocumentDocxReplace_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxReplace - Replace string in Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Replace all instances of a string in an Office Word Document (docx)" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document string replacement configuration input" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxReplaceParagraph operation
#
##############################################################################
print_editDocumentDocxReplaceParagraph_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxReplaceParagraph - Replace matching paragraphs in a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxSetFooter operation
#
##############################################################################
print_editDocumentDocxSetFooter_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxSetFooter - Set the footer in a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxSetFooterAddPageNumber operation
#
##############################################################################
print_editDocumentDocxSetFooterAddPageNumber_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxSetFooterAddPageNumber - Add page number to footer in a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxSetHeader operation
#
##############################################################################
print_editDocumentDocxSetHeader_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxSetHeader - Set the header in a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxUpdateTableCell operation
#
##############################################################################
print_editDocumentDocxUpdateTableCell_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxUpdateTableCell - Update, set contents of a table cell in an existing table in a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentDocxUpdateTableRow operation
#
##############################################################################
print_editDocumentDocxUpdateTableRow_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentDocxUpdateTableRow - Update, set contents of a table row in an existing table in a Word DOCX document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentFinishEditing operation
#
##############################################################################
print_editDocumentFinishEditing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentFinishEditing - Finish editing document, and download result from document editing${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Cloudmersive Document URL to complete editing on" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentPptxDeleteSlides operation
#
##############################################################################
print_editDocumentPptxDeleteSlides_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentPptxDeleteSlides - Delete, remove slides from a PowerPoint PPTX presentation document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Edits the input PowerPoint PPTX presentation document to remove the specified slides" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Presentation input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentPptxReplace operation
#
##############################################################################
print_editDocumentPptxReplace_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentPptxReplace - Replace string in PowerPoint PPTX presentation${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Replace all instances of a string in an Office PowerPoint Document (pptx)" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Replacement document configuration input" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxAppendRow operation
#
##############################################################################
print_editDocumentXlsxAppendRow_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxAppendRow - Append row to a Excel XLSX spreadsheet, worksheet${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Appends a row to the end of an Excel Spreadsheet worksheet." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxClearCellByIndex operation
#
##############################################################################
print_editDocumentXlsxClearCellByIndex_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxClearCellByIndex - Clear cell contents in an Excel XLSX spreadsheet, worksheet by index${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxClearRow operation
#
##############################################################################
print_editDocumentXlsxClearRow_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxClearRow - Clear row from a Excel XLSX spreadsheet, worksheet${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxCreateBlankSpreadsheet operation
#
##############################################################################
print_editDocumentXlsxCreateBlankSpreadsheet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxCreateBlankSpreadsheet - Create a blank Excel XLSX spreadsheet${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns a blank Excel XLSX Spreadsheet (XLSX) format file" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxCreateSpreadsheetFromData operation
#
##############################################################################
print_editDocumentXlsxCreateSpreadsheetFromData_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxCreateSpreadsheetFromData - Create a new Excel XLSX spreadsheet from column and row data${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxDeleteWorksheet operation
#
##############################################################################
print_editDocumentXlsxDeleteWorksheet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxDeleteWorksheet - Delete, remove worksheet from an Excel XLSX spreadsheet document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Spreadsheet input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxDisableSharedWorkbook operation
#
##############################################################################
print_editDocumentXlsxDisableSharedWorkbook_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxDisableSharedWorkbook - Disable Shared Workbook (legacy) in Excel XLSX spreadsheet${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxEnableSharedWorkbook operation
#
##############################################################################
print_editDocumentXlsxEnableSharedWorkbook_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxEnableSharedWorkbook - Enable Shared Workbook (legacy) in Excel XLSX spreadsheet${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxGetCellByIdentifier operation
#
##############################################################################
print_editDocumentXlsxGetCellByIdentifier_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxGetCellByIdentifier - Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxGetCellByIndex operation
#
##############################################################################
print_editDocumentXlsxGetCellByIndex_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxGetCellByIndex - Get cell from an Excel XLSX spreadsheet, worksheet by index${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxGetColumns operation
#
##############################################################################
print_editDocumentXlsxGetColumns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxGetColumns - Get columns from a Excel XLSX spreadsheet, worksheet${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the columns defined in the Excel Spreadsheet worksheet" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxGetImages operation
#
##############################################################################
print_editDocumentXlsxGetImages_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxGetImages - Get images from a Excel XLSX spreadsheet, worksheet${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the images defined in the Excel Spreadsheet worksheet" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxGetRowsAndCells operation
#
##############################################################################
print_editDocumentXlsxGetRowsAndCells_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxGetRowsAndCells - Get rows and cells from a Excel XLSX spreadsheet, worksheet${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the rows and cells defined in the Excel Spreadsheet worksheet" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxGetSpecificRow operation
#
##############################################################################
print_editDocumentXlsxGetSpecificRow_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxGetSpecificRow - Get a specific row from a Excel XLSX spreadsheet, worksheet by path${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxGetStyles operation
#
##############################################################################
print_editDocumentXlsxGetStyles_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxGetStyles - Get styles from a Excel XLSX spreadsheet, worksheet${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the style defined in the Excel Spreadsheet" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxGetWorksheets operation
#
##############################################################################
print_editDocumentXlsxGetWorksheets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxGetWorksheets - Get worksheets from a Excel XLSX spreadsheet${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxInsertWorksheet operation
#
##############################################################################
print_editDocumentXlsxInsertWorksheet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxInsertWorksheet - Insert a new worksheet into an Excel XLSX spreadsheet${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Inserts a new worksheet into an Excel Spreadsheet" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxRenameWorksheet operation
#
##############################################################################
print_editDocumentXlsxRenameWorksheet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxRenameWorksheet - Rename a specific worksheet in a Excel XLSX spreadsheet${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxSetCellByIdentifier operation
#
##############################################################################
print_editDocumentXlsxSetCellByIdentifier_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxSetCellByIdentifier - Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editDocumentXlsxSetCellByIndex operation
#
##############################################################################
print_editDocumentXlsxSetCellByIndex_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editDocumentXlsxSetCellByIndex - Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Document input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfAddAnnotations operation
#
##############################################################################
print_editPdfAddAnnotations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfAddAnnotations - Add one or more PDF annotations, comments in the PDF document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Adds one or more annotations, comments to a PDF document." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfDecrypt operation
#
##############################################################################
print_editPdfDecrypt_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfDecrypt - Decrypt and password-protect a PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Decrypt a PDF document with a password.  Decrypted PDF will no longer require a password to open." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}password${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Valid password for the PDF file ${YELLOW}Specify as: password:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfDeletePages operation
#
##############################################################################
print_editPdfDeletePages_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfDeletePages - Remove, delete pages from a PDF document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Remove one or more pages from a PDF document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}pageStart${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF}${OFF} - Page number (1 based) to start deleting pages from (inclusive). ${YELLOW}Specify as: pageStart:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pageEnd${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF}${OFF} - Page number (1 based) to stop deleting pages from (inclusive). ${YELLOW}Specify as: pageEnd:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfEncrypt operation
#
##############################################################################
print_editPdfEncrypt_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfEncrypt - Encrypt and password-protect a PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}userPassword${OFF} ${BLUE}[string]${OFF}${OFF} - Password of a user (reader) of the PDF file ${YELLOW}Specify as: userPassword:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}ownerPassword${OFF} ${BLUE}[string]${OFF}${OFF} - Password of a owner (creator/editor) of the PDF file ${YELLOW}Specify as: ownerPassword:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}encryptionKeyLength${OFF} ${BLUE}[string]${OFF}${OFF} - Possible values are \"128\" (128-bit RC4 encryption) and \"256\" (256-bit AES encryption).  Default is 256. ${YELLOW}Specify as: encryptionKeyLength:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfGetAnnotations operation
#
##############################################################################
print_editPdfGetAnnotations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfGetAnnotations - Get PDF annotations, including comments in the document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Enumerates the annotations, including comments and notes, in a PDF document." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfGetFormFields operation
#
##############################################################################
print_editPdfGetFormFields_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfGetFormFields - Gets PDF Form fields and values${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfGetMetadata operation
#
##############################################################################
print_editPdfGetMetadata_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfGetMetadata - Get PDF document metadata${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the metadata from the PDF document, including Title, Author, etc." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfGetPdfTextByPages operation
#
##############################################################################
print_editPdfGetPdfTextByPages_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfGetPdfTextByPages - Get text in a PDF document by page${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Gets the text in a PDF by page" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}textFormattingMode${OFF} ${BLUE}[string]${OFF}${OFF} - Optional; specify how whitespace should be handled when converting the document to text.  Possible values are 'preserveWhitespace' which will attempt to preserve whitespace in the document and relative positioning of text within the document, and 'minimizeWhitespace' which will not insert additional spaces into the document in most cases.  Default is 'preserveWhitespace'. ${YELLOW}Specify as: textFormattingMode:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfInsertPages operation
#
##############################################################################
print_editPdfInsertPages_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfInsertPages - Insert, copy pages from one PDF document into another${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document)." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}pageStartSource${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF}${OFF} - Page number (1 based) to start copying pages from (inclusive) in the Source file. ${YELLOW}Specify as: pageStartSource:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pageEndSource${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF}${OFF} - Page number (1 based) to stop copying pages pages from (inclusive) in the Source file. ${YELLOW}Specify as: pageEndSource:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pageInsertBeforeDesitnation${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF}${OFF} - Page number (1 based) to insert the pages before in the Destination file. ${YELLOW}Specify as: pageInsertBeforeDesitnation:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfRasterize operation
#
##############################################################################
print_editPdfRasterize_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfRasterize - Rasterize a PDF to an image-based PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfRemoveAllAnnotations operation
#
##############################################################################
print_editPdfRemoveAllAnnotations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfRemoveAllAnnotations - Remove all PDF annotations, including comments in the document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Removes all of the annotations, including comments and notes, in a PDF document." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfRemoveAnnotationItem operation
#
##############################################################################
print_editPdfRemoveAnnotationItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfRemoveAnnotationItem - Remove a specific PDF annotation, comment in the document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Removes a specific annotation in a PDF document, using the AnnotationIndex.  To enumerate AnnotationIndex for all of the annotations in the PDF document, use the /edit/pdf/annotations/list API." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}annotationIndex${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF}${OFF} - The 0-based index of the annotation in the document ${YELLOW}Specify as: annotationIndex:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfRotateAllPages operation
#
##############################################################################
print_editPdfRotateAllPages_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfRotateAllPages - Rotate all pages in a PDF document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Rotate all of the pages in a PDF document by a multiple of 90 degrees" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}rotationAngle${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF}${OFF} - The angle to rotate the page in degrees, must be a multiple of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc. ${YELLOW}Specify as: rotationAngle:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfRotatePageRange operation
#
##############################################################################
print_editPdfRotatePageRange_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfRotatePageRange - Rotate a range, subset of pages in a PDF document${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Rotate a range of specific pages in a PDF document by a multiple of 90 degrees" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}rotationAngle${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF}${OFF} - The angle to rotate the page in degrees, must be a multiple of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc. ${YELLOW}Specify as: rotationAngle:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pageStart${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF}${OFF} - Page number (1 based) to start rotating pages from (inclusive). ${YELLOW}Specify as: pageStart:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pageEnd${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF}${OFF} - Page number (1 based) to stop rotating pages from (inclusive). ${YELLOW}Specify as: pageEnd:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfSetFormFields operation
#
##############################################################################
print_editPdfSetFormFields_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfSetFormFields - Sets ands fills PDF Form field values${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfSetMetadata operation
#
##############################################################################
print_editPdfSetMetadata_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfSetMetadata - Sets PDF document metadata${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Sets (writes) metadata into the input PDF document, including Title, Author, etc." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfSetPermissions operation
#
##############################################################################
print_editPdfSetPermissions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfSetPermissions - Encrypt, password-protect and set restricted permissions on a PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM)." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}ownerPassword${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Password of a owner (creator/editor) of the PDF file (required) ${YELLOW}Specify as: ownerPassword:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userPassword${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Password of a user (reader) of the PDF file (optional) ${YELLOW}Specify as: userPassword:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}encryptionKeyLength${OFF} ${BLUE}[string]${OFF}${OFF} - Possible values are \"128\" (128-bit RC4 encryption) and \"256\" (256-bit AES encryption).  Default is 256. ${YELLOW}Specify as: encryptionKeyLength:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}allowPrinting${OFF} ${BLUE}[boolean]${OFF}${OFF} - Set to false to disable printing through DRM.  Default is true. ${YELLOW}Specify as: allowPrinting:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}allowDocumentAssembly${OFF} ${BLUE}[boolean]${OFF}${OFF} - Set to false to disable document assembly through DRM.  Default is true. ${YELLOW}Specify as: allowDocumentAssembly:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}allowContentExtraction${OFF} ${BLUE}[boolean]${OFF}${OFF} - Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true. ${YELLOW}Specify as: allowContentExtraction:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}allowFormFilling${OFF} ${BLUE}[boolean]${OFF}${OFF} - Set to false to disable filling out form fields in the PDF through DRM.  Default is true. ${YELLOW}Specify as: allowFormFilling:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}allowEditing${OFF} ${BLUE}[boolean]${OFF}${OFF} - Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true. ${YELLOW}Specify as: allowEditing:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}allowAnnotations${OFF} ${BLUE}[boolean]${OFF}${OFF} - Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true. ${YELLOW}Specify as: allowAnnotations:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}allowDegradedPrinting${OFF} ${BLUE}[boolean]${OFF}${OFF} - Set to false to disable degraded printing of the PDF through DRM.  Default is true. ${YELLOW}Specify as: allowDegradedPrinting:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editPdfWatermarkText operation
#
##############################################################################
print_editPdfWatermarkText_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editPdfWatermarkText - Add a text watermark to a PDF${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Adds a text watermark to a PDF" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}watermarkText${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Watermark text to add to the PDF (required) ${YELLOW}Specify as: watermarkText:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fontName${OFF} ${BLUE}[string]${OFF}${OFF} - Font Family Name for the watermark text; default is Times New Roman ${YELLOW}Specify as: fontName:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fontSize${OFF} ${BLUE}[integer]${OFF}${OFF} - Font Size in points of the text; default is 150 ${YELLOW}Specify as: fontSize:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fontColor${OFF} ${BLUE}[string]${OFF}${OFF} - Font color in hexadecimal or HTML color name; default is Red ${YELLOW}Specify as: fontColor:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fontTransparency${OFF} ${BLUE}[integer]${OFF}${OFF} - Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5 ${YELLOW}Specify as: fontTransparency:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editTextBase64Decode operation
#
##############################################################################
print_editTextBase64Decode_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editTextBase64Decode - Base 64 decode, convert base 64 string to binary content${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Decodes / converts base 64 UTF-8 text string to binary content" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editTextBase64Detect operation
#
##############################################################################
print_editTextBase64Detect_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editTextBase64Detect - Detect, check if text string is base 64 encoded${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Checks, detects if input string is base 64 encoded" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editTextBase64Encode operation
#
##############################################################################
print_editTextBase64Encode_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editTextBase64Encode - Base 64 encode, convert binary or file data to a text string${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Encodes / converts binary or file data to a text string" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editTextChangeLineEndings operation
#
##############################################################################
print_editTextChangeLineEndings_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editTextChangeLineEndings - Set, change line endings of a text file${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Sets the line ending type of a text file; set to Windows, Unix or Mac." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}lineEndingType${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Required; 'Windows' will use carriage return and line feed, 'Unix' will use newline, and 'Mac' will use carriage return ${YELLOW}Specify as: lineEndingType:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editTextDetectLineEndings operation
#
##############################################################################
print_editTextDetectLineEndings_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editTextDetectLineEndings - Detect line endings of a text file${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Detect line ending type (Windows, Unix or Mac) of an input file." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editTextFindRegex operation
#
##############################################################################
print_editTextFindRegex_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editTextFindRegex - Find a regular expression regex in text input${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Find all occurrences of the input regular expression in the input content, and returns the matches" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editTextFindSimple operation
#
##############################################################################
print_editTextFindSimple_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editTextFindSimple - Find a string in text input${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Finds all occurrences of the input string in the input content, and returns the matches" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editTextRemoveAllWhitespace operation
#
##############################################################################
print_editTextRemoveAllWhitespace_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editTextRemoveAllWhitespace - Remove whitespace from text string${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editTextRemoveHtml operation
#
##############################################################################
print_editTextRemoveHtml_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editTextRemoveHtml - Remove HTML from text string${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editTextReplaceRegex operation
#
##############################################################################
print_editTextReplaceRegex_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editTextReplaceRegex - Replace a string in text with a regex regular expression string${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Replaces all occurrences of the input regular expression regex string in the input content, and returns the result" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editTextReplaceSimple operation
#
##############################################################################
print_editTextReplaceSimple_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editTextReplaceSimple - Replace a string in text with another string value${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Replaces all occurrences of the input string in the input content, and returns the result" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editTextTextEncodingDetect operation
#
##############################################################################
print_editTextTextEncodingDetect_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editTextTextEncodingDetect - Detect text encoding of file${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Checks text encoding of file" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for editTextTrimWhitespace operation
#
##############################################################################
print_editTextTrimWhitespace_help() {
    echo ""
    echo -e "${BOLD}${WHITE}editTextTrimWhitespace - Trim leading and trailing whitespace from text string${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for mergeDocumentDocx operation
#
##############################################################################
print_mergeDocumentDocx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}mergeDocumentDocx - Merge Two Word DOCX Together${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Combine two Office Word Documents (docx) into one single Office Word document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for mergeDocumentDocxMulti operation
#
##############################################################################
print_mergeDocumentDocxMulti_help() {
    echo ""
    echo -e "${BOLD}${WHITE}mergeDocumentDocxMulti - Merge Multple Word DOCX Together${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Combine multiple Office Word Documents (docx) into one single Office Word document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for mergeDocumentPdf operation
#
##############################################################################
print_mergeDocumentPdf_help() {
    echo ""
    echo -e "${BOLD}${WHITE}mergeDocumentPdf - Merge Two PDF Files Together${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Combine two PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for mergeDocumentPdfMulti operation
#
##############################################################################
print_mergeDocumentPdfMulti_help() {
    echo ""
    echo -e "${BOLD}${WHITE}mergeDocumentPdfMulti - Merge Multple PDF Files Together${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for mergeDocumentPng operation
#
##############################################################################
print_mergeDocumentPng_help() {
    echo ""
    echo -e "${BOLD}${WHITE}mergeDocumentPng - Merge Two PNG Files Together${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Combine two PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for mergeDocumentPngMulti operation
#
##############################################################################
print_mergeDocumentPngMulti_help() {
    echo ""
    echo -e "${BOLD}${WHITE}mergeDocumentPngMulti - Merge Multple PNG Files Together${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for mergeDocumentPptx operation
#
##############################################################################
print_mergeDocumentPptx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}mergeDocumentPptx - Merge Two PowerPoint PPTX Together${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Combine two Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for mergeDocumentPptxMulti operation
#
##############################################################################
print_mergeDocumentPptxMulti_help() {
    echo ""
    echo -e "${BOLD}${WHITE}mergeDocumentPptxMulti - Merge Multple PowerPoint PPTX Together${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for mergeDocumentTxt operation
#
##############################################################################
print_mergeDocumentTxt_help() {
    echo ""
    echo -e "${BOLD}${WHITE}mergeDocumentTxt - Merge Two Text (TXT) Files Together${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Combine two Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for mergeDocumentTxtMulti operation
#
##############################################################################
print_mergeDocumentTxtMulti_help() {
    echo ""
    echo -e "${BOLD}${WHITE}mergeDocumentTxtMulti - Merge Multple Text (TXT) Files Together${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Combine multiple Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for mergeDocumentXlsx operation
#
##############################################################################
print_mergeDocumentXlsx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}mergeDocumentXlsx - Merge Two Excel XLSX Together${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Combine two Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for mergeDocumentXlsxMulti operation
#
##############################################################################
print_mergeDocumentXlsxMulti_help() {
    echo ""
    echo -e "${BOLD}${WHITE}mergeDocumentXlsxMulti - Merge Multple Excel XLSX Together${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for splitDocumentDocx operation
#
##############################################################################
print_splitDocumentDocx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}splitDocumentDocx - Split a single Word Document DOCX into Separate Documents by Page${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Split a Word DOCX Document, comprised of multiple pages into separate Word DOCX document files, with each containing exactly one page." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}returnDocumentContents${OFF} ${BLUE}[boolean]${OFF}${OFF} - Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting document.  Default is true. ${YELLOW}Specify as: returnDocumentContents:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for splitDocumentPdfByPage operation
#
##############################################################################
print_splitDocumentPdfByPage_help() {
    echo ""
    echo -e "${BOLD}${WHITE}splitDocumentPdfByPage - Split a PDF file into separate PDF files, one per page${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Split an input PDF file into separate pages, comprised of one PDF file per page." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}returnDocumentContents${OFF} ${BLUE}[boolean]${OFF}${OFF} - Set to true to directly return all of the document contents in the DocumentContents field; set to false to return contents as temporary URLs (more efficient for large operations).  Default is false. ${YELLOW}Specify as: returnDocumentContents:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for splitDocumentPptx operation
#
##############################################################################
print_splitDocumentPptx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}splitDocumentPptx - Split a single PowerPoint Presentation PPTX into Separate Slides${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Split an PowerPoint PPTX Presentation, comprised of multiple slides into separate PowerPoint PPTX presentation files, with each containing exactly one slide." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}returnDocumentContents${OFF} ${BLUE}[boolean]${OFF}${OFF} - Set to true to return the contents of each presentation directly, set to false to only return URLs to each resulting presentation.  Default is true. ${YELLOW}Specify as: returnDocumentContents:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for splitDocumentTxtByLine operation
#
##############################################################################
print_splitDocumentTxtByLine_help() {
    echo ""
    echo -e "${BOLD}${WHITE}splitDocumentTxtByLine - Split a single Text file (txt) into lines${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Split a Text (txt) Document by line, returning each line separately in order.  Supports multiple types of newlines." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for splitDocumentTxtByString operation
#
##############################################################################
print_splitDocumentTxtByString_help() {
    echo ""
    echo -e "${BOLD}${WHITE}splitDocumentTxtByString - Split a single Text file (txt) by a string delimiter${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Split a Text (txt) Document by a string delimiter, returning each component of the string as an array of strings." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}splitDelimiter${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Required; String to split up the input file on ${YELLOW}Specify as: splitDelimiter:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}skipEmptyElements${OFF} ${BLUE}[boolean]${OFF}${OFF} - Optional; If true, empty elements will be skipped in the output ${YELLOW}Specify as: skipEmptyElements:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for splitDocumentXlsx operation
#
##############################################################################
print_splitDocumentXlsx_help() {
    echo ""
    echo -e "${BOLD}${WHITE}splitDocumentXlsx - Split a single Excel XLSX into Separate Worksheets${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Split an Excel XLSX Spreadsheet, comprised of multiple Worksheets (or Tabs) into separate Excel XLSX spreadsheet files, with each containing exactly one Worksheet." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}returnDocumentContents${OFF} ${BLUE}[boolean]${OFF}${OFF} - Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting worksheet.  Default is true. ${YELLOW}Specify as: returnDocumentContents:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for validateDocumentAutodetectValidation operation
#
##############################################################################
print_validateDocumentAutodetectValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}validateDocumentAutodetectValidation - Autodetect content type and validate${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Automatically detect the type of content, verify and validate that the content is indeed fully valid at depth, and then report the validation result." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for validateDocumentCsvValidation operation
#
##############################################################################
print_validateDocumentCsvValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}validateDocumentCsvValidation - Validate a CSV file document (CSV)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Validate a CSV file document (CSV); if the document is not valid, identifies the errors in the document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for validateDocumentDocxValidation operation
#
##############################################################################
print_validateDocumentDocxValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}validateDocumentDocxValidation - Validate a Word document (DOCX)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Validate a Word document (DOCX); if the document is not valid, identifies the errors in the document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for validateDocumentEmlValidation operation
#
##############################################################################
print_validateDocumentEmlValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}validateDocumentEmlValidation - Validate if an EML file is executable${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Validate if an input file is an EML email file; if the document is not valid" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for validateDocumentExecutableValidation operation
#
##############################################################################
print_validateDocumentExecutableValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}validateDocumentExecutableValidation - Validate if a file is executable${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Validate if an input file is a binary executable file; if the document is not valid" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for validateDocumentGZipValidation operation
#
##############################################################################
print_validateDocumentGZipValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}validateDocumentGZipValidation - Validate a GZip Archive file (gzip or gz)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Validate a GZip archive file (GZIP or GZ)" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for validateDocumentJsonValidation operation
#
##############################################################################
print_validateDocumentJsonValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}validateDocumentJsonValidation - Validate a JSON file${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Validate a JSON (JavaScript Object Notation) document file; if the document is not valid, identifies the errors in the document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for validateDocumentMsgValidation operation
#
##############################################################################
print_validateDocumentMsgValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}validateDocumentMsgValidation - Validate if an MSG file is executable${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Validate if an input file is an MSG email file; if the document is not valid" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for validateDocumentPdfValidation operation
#
##############################################################################
print_validateDocumentPdfValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}validateDocumentPdfValidation - Validate a PDF document file${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Validate a PDF document; if the document is not valid, identifies the errors in the document.  Also checks if the PDF is password protected." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for validateDocumentPptxValidation operation
#
##############################################################################
print_validateDocumentPptxValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}validateDocumentPptxValidation - Validate a PowerPoint presentation (PPTX)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Validate a PowerPoint presentation (PPTX); if the document is not valid, identifies the errors in the document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for validateDocumentRarValidation operation
#
##############################################################################
print_validateDocumentRarValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}validateDocumentRarValidation - Validate a RAR Archive file (RAR)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Validate a RAR archive file (RAR)" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for validateDocumentTarValidation operation
#
##############################################################################
print_validateDocumentTarValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}validateDocumentTarValidation - Validate a TAR Tarball Archive file (TAR)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Validate a TAR tarball archive file (TAR)" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for validateDocumentXlsxValidation operation
#
##############################################################################
print_validateDocumentXlsxValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}validateDocumentXlsxValidation - Validate a Excel document (XLSX)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Validate a Excel document (XLSX); if the document is not valid, identifies the errors in the document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for validateDocumentXmlValidation operation
#
##############################################################################
print_validateDocumentXmlValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}validateDocumentXmlValidation - Validate an XML file${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Validate an XML document file; if the document is not valid, identifies the errors in the document" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for validateDocumentZipValidation operation
#
##############################################################################
print_validateDocumentZipValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}validateDocumentZipValidation - Validate a Zip Archive file (zip)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Validate a Zip archive file (ZIP)" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for viewerToolsCreateSimple operation
#
##############################################################################
print_viewerToolsCreateSimple_help() {
    echo ""
    echo -e "${BOLD}${WHITE}viewerToolsCreateSimple - Create a web-based viewer${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Creates an HTML embed code for a simple web-based viewer of a document; supports Office document types and PDF." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for zipArchiveZipCreate operation
#
##############################################################################
print_zipArchiveZipCreate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}zipArchiveZipCreate - Compress files to create a new zip archive${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new zip archive by compressing input files." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for zipArchiveZipCreateAdvanced operation
#
##############################################################################
print_zipArchiveZipCreateAdvanced_help() {
    echo ""
    echo -e "${BOLD}${WHITE}zipArchiveZipCreateAdvanced - Compress files and folders to create a new zip archive with advanced options${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new zip archive by compressing input files, folders and leverage advanced options to control the structure of the resulting zip archive." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Input request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for zipArchiveZipDecrypt operation
#
##############################################################################
print_zipArchiveZipDecrypt_help() {
    echo ""
    echo -e "${BOLD}${WHITE}zipArchiveZipDecrypt - Decrypt and remove password protection on a zip file${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Decrypts and removes password protection from an encrypted zip file with the specified password" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}zipPassword${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF}${OFF} - Required; Password for the input archive ${YELLOW}Specify as: zipPassword:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for zipArchiveZipEncryptAdvanced operation
#
##############################################################################
print_zipArchiveZipEncryptAdvanced_help() {
    echo ""
    echo -e "${BOLD}${WHITE}zipArchiveZipEncryptAdvanced - Encrypt and password protect a zip file${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Encrypts and password protects an existing zip file with the specified password and encryption algorithm" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded]${OFF} ${RED}(required)${OFF}${OFF} - Encryption request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for zipArchiveZipExtract operation
#
##############################################################################
print_zipArchiveZipExtract_help() {
    echo ""
    echo -e "${BOLD}${WHITE}zipArchiveZipExtract - Extract, decompress files and folders from a zip archive${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Extracts a zip archive by decompressing files, and folders." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}


##############################################################################
#
# Call compareDocumentDocx operation
#
##############################################################################
call_compareDocumentDocx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/compare/docx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDataCsvToJson operation
#
##############################################################################
call_convertDataCsvToJson() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/csv/to/json" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDataJsonToXml operation
#
##############################################################################
call_convertDataJsonToXml() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/json/to/xml" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call convertDataXlsToJson operation
#
##############################################################################
call_convertDataXlsToJson() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xls/to/json" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDataXlsxToJson operation
#
##############################################################################
call_convertDataXlsxToJson() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xlsx/to/json" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDataXmlEditAddAttributeWithXPath operation
#
##############################################################################
call_convertDataXmlEditAddAttributeWithXPath() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xml/edit/xpath/add-attribute" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDataXmlEditAddChildWithXPath operation
#
##############################################################################
call_convertDataXmlEditAddChildWithXPath() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xml/edit/xpath/add-child" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDataXmlEditRemoveAllChildNodesWithXPath operation
#
##############################################################################
call_convertDataXmlEditRemoveAllChildNodesWithXPath() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xml/edit/xpath/remove-all-children" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDataXmlEditReplaceWithXPath operation
#
##############################################################################
call_convertDataXmlEditReplaceWithXPath() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xml/edit/xpath/replace" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDataXmlEditSetValueWithXPath operation
#
##############################################################################
call_convertDataXmlEditSetValueWithXPath() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xml/edit/xpath/set-value" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDataXmlFilterWithXPath operation
#
##############################################################################
call_convertDataXmlFilterWithXPath() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xml/select/xpath" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDataXmlQueryWithXQuery operation
#
##############################################################################
call_convertDataXmlQueryWithXQuery() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xml/query/xquery" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDataXmlQueryWithXQueryMulti operation
#
##############################################################################
call_convertDataXmlQueryWithXQueryMulti() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xml/query/xquery/multi" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDataXmlRemoveWithXPath operation
#
##############################################################################
call_convertDataXmlRemoveWithXPath() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xml/edit/xpath/remove" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDataXmlToJson operation
#
##############################################################################
call_convertDataXmlToJson() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xml/to/json" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDataXmlTransformWithXsltToXml operation
#
##############################################################################
call_convertDataXmlTransformWithXsltToXml() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xml/transform/xslt/to/xml" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentAutodetectGetInfo operation
#
##############################################################################
call_convertDocumentAutodetectGetInfo() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/autodetect/get-info" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentAutodetectToJpg operation
#
##############################################################################
call_convertDocumentAutodetectToJpg() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/autodetect/to/jpg" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentAutodetectToPdf operation
#
##############################################################################
call_convertDocumentAutodetectToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/autodetect/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentAutodetectToPngArray operation
#
##############################################################################
call_convertDocumentAutodetectToPngArray() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/autodetect/to/png" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentAutodetectToThumbnail operation
#
##############################################################################
call_convertDocumentAutodetectToThumbnail() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/autodetect/to/thumbnail" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentAutodetectToThumbnailsAdvanced operation
#
##############################################################################
call_convertDocumentAutodetectToThumbnailsAdvanced() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/autodetect/to/thumbnail/advanced" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentAutodetectToTxt operation
#
##############################################################################
call_convertDocumentAutodetectToTxt() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/autodetect/to/txt" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentCsvToXlsx operation
#
##############################################################################
call_convertDocumentCsvToXlsx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/csv/to/xlsx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentDocToDocx operation
#
##############################################################################
call_convertDocumentDocToDocx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/doc/to/docx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentDocToPdf operation
#
##############################################################################
call_convertDocumentDocToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/doc/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentDocToTxt operation
#
##############################################################################
call_convertDocumentDocToTxt() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/doc/to/txt" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentDocxToHtml operation
#
##############################################################################
call_convertDocumentDocxToHtml() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/docx/to/html" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentDocxToJpg operation
#
##############################################################################
call_convertDocumentDocxToJpg() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/docx/to/jpg" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentDocxToPdf operation
#
##############################################################################
call_convertDocumentDocxToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/docx/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentDocxToPng operation
#
##############################################################################
call_convertDocumentDocxToPng() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/docx/to/png" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentDocxToRtf operation
#
##############################################################################
call_convertDocumentDocxToRtf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/docx/to/rtf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentDocxToTxt operation
#
##############################################################################
call_convertDocumentDocxToTxt() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/docx/to/txt" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentEmlToHtml operation
#
##############################################################################
call_convertDocumentEmlToHtml() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/eml/to/html" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentEmlToJpg operation
#
##############################################################################
call_convertDocumentEmlToJpg() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/eml/to/jpg" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentEmlToPdf operation
#
##############################################################################
call_convertDocumentEmlToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/eml/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentEmlToPng operation
#
##############################################################################
call_convertDocumentEmlToPng() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/eml/to/png" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentGetFileTypeIcon operation
#
##############################################################################
call_convertDocumentGetFileTypeIcon() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/autodetect/get-icon" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentGetFileTypeIconAdvanced operation
#
##############################################################################
call_convertDocumentGetFileTypeIconAdvanced() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/autodetect/get-icon/advanced" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentHtmlToPdf operation
#
##############################################################################
call_convertDocumentHtmlToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/html/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentHtmlToPng operation
#
##############################################################################
call_convertDocumentHtmlToPng() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/html/to/png" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentHtmlToTxt operation
#
##############################################################################
call_convertDocumentHtmlToTxt() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/html/to/txt" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentKeynoteToJpg operation
#
##############################################################################
call_convertDocumentKeynoteToJpg() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/key/to/jpg" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentKeynoteToPdf operation
#
##############################################################################
call_convertDocumentKeynoteToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/key/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentKeynoteToPng operation
#
##############################################################################
call_convertDocumentKeynoteToPng() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/key/to/png" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentKeynoteToPptx operation
#
##############################################################################
call_convertDocumentKeynoteToPptx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/key/to/pptx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentMsgToHtml operation
#
##############################################################################
call_convertDocumentMsgToHtml() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/msg/to/html" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentMsgToJpg operation
#
##############################################################################
call_convertDocumentMsgToJpg() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/msg/to/jpg" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentMsgToPdf operation
#
##############################################################################
call_convertDocumentMsgToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/msg/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentMsgToPng operation
#
##############################################################################
call_convertDocumentMsgToPng() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/msg/to/png" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentOdpToJpg operation
#
##############################################################################
call_convertDocumentOdpToJpg() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/odp/to/jpg" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentOdpToPdf operation
#
##############################################################################
call_convertDocumentOdpToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/odp/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentOdpToPng operation
#
##############################################################################
call_convertDocumentOdpToPng() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/odp/to/png" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentOdpToPptx operation
#
##############################################################################
call_convertDocumentOdpToPptx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/odp/to/pptx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentOdsToJpg operation
#
##############################################################################
call_convertDocumentOdsToJpg() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/ods/to/jpg" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentOdsToPdf operation
#
##############################################################################
call_convertDocumentOdsToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/ods/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentOdsToPng operation
#
##############################################################################
call_convertDocumentOdsToPng() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/ods/to/png" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentOdsToXlsx operation
#
##############################################################################
call_convertDocumentOdsToXlsx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/ods/to/xlsx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentOdtToDocx operation
#
##############################################################################
call_convertDocumentOdtToDocx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/odt/to/docx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentOdtToJpg operation
#
##############################################################################
call_convertDocumentOdtToJpg() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/odt/to/jpg" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentOdtToPdf operation
#
##############################################################################
call_convertDocumentOdtToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/odt/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentOdtToPng operation
#
##############################################################################
call_convertDocumentOdtToPng() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/odt/to/png" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentPdfToDocx operation
#
##############################################################################
call_convertDocumentPdfToDocx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/pdf/to/docx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentPdfToDocxRasterize operation
#
##############################################################################
call_convertDocumentPdfToDocxRasterize() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/pdf/to/docx/rasterize" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentPdfToJpg operation
#
##############################################################################
call_convertDocumentPdfToJpg() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/pdf/to/jpg" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentPdfToPngArray operation
#
##############################################################################
call_convertDocumentPdfToPngArray() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/pdf/to/png" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentPdfToPngSingle operation
#
##############################################################################
call_convertDocumentPdfToPngSingle() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/pdf/to/png/merge-single" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentPdfToPptx operation
#
##############################################################################
call_convertDocumentPdfToPptx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/pdf/to/pptx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentPdfToTxt operation
#
##############################################################################
call_convertDocumentPdfToTxt() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/pdf/to/txt" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentPngArrayToPdf operation
#
##############################################################################
call_convertDocumentPngArrayToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/png/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentPptToPdf operation
#
##############################################################################
call_convertDocumentPptToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/ppt/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentPptToPptx operation
#
##############################################################################
call_convertDocumentPptToPptx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/ppt/to/pptx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentPptxToPdf operation
#
##############################################################################
call_convertDocumentPptxToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/pptx/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentPptxToPng operation
#
##############################################################################
call_convertDocumentPptxToPng() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/pptx/to/png" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentPptxToTxt operation
#
##############################################################################
call_convertDocumentPptxToTxt() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/pptx/to/txt" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentRtfToDocx operation
#
##############################################################################
call_convertDocumentRtfToDocx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/rtf/to/docx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentRtfToHtml operation
#
##############################################################################
call_convertDocumentRtfToHtml() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/rtf/to/html" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentRtfToJpg operation
#
##############################################################################
call_convertDocumentRtfToJpg() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/rtf/to/jpg" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentRtfToPdf operation
#
##############################################################################
call_convertDocumentRtfToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/rtf/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentRtfToPng operation
#
##############################################################################
call_convertDocumentRtfToPng() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/rtf/to/png" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentXlsToCsv operation
#
##############################################################################
call_convertDocumentXlsToCsv() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xls/to/csv" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentXlsToPdf operation
#
##############################################################################
call_convertDocumentXlsToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xls/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentXlsToXlsx operation
#
##############################################################################
call_convertDocumentXlsToXlsx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xls/to/xlsx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentXlsxToCsv operation
#
##############################################################################
call_convertDocumentXlsxToCsv() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xlsx/to/csv" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentXlsxToCsvMulti operation
#
##############################################################################
call_convertDocumentXlsxToCsvMulti() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xlsx/to/csv/multi" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentXlsxToPdf operation
#
##############################################################################
call_convertDocumentXlsxToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xlsx/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentXlsxToPng operation
#
##############################################################################
call_convertDocumentXlsxToPng() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xlsx/to/png" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertDocumentXlsxToTxt operation
#
##############################################################################
call_convertDocumentXlsxToTxt() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/xlsx/to/txt" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertImageGetImageInfo operation
#
##############################################################################
call_convertImageGetImageInfo() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/image/get-info" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertImageImageFormatConvert operation
#
##############################################################################
call_convertImageImageFormatConvert() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(format1 format2)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/image/{format1}/to/{format2}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertImageImageSetDPI operation
#
##############################################################################
call_convertImageImageSetDPI() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(dpi)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/image/set-dpi/{dpi}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertImageMultipageImageFormatConvert operation
#
##############################################################################
call_convertImageMultipageImageFormatConvert() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(format1 format2)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/image-multipage/{format1}/to/{format2}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertTemplateApplyDocxTemplate operation
#
##############################################################################
call_convertTemplateApplyDocxTemplate() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/template/docx/apply" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertTemplateApplyHtmlTemplate operation
#
##############################################################################
call_convertTemplateApplyHtmlTemplate() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/template/html/apply" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call convertWebHtmlToDocx operation
#
##############################################################################
call_convertWebHtmlToDocx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/html/to/docx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call convertWebHtmlToPdf operation
#
##############################################################################
call_convertWebHtmlToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/web/html/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call convertWebHtmlToPng operation
#
##############################################################################
call_convertWebHtmlToPng() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/web/html/to/png" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call convertWebHtmlToTxt operation
#
##############################################################################
call_convertWebHtmlToTxt() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/web/html/to/txt" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call convertWebMdToHtml operation
#
##############################################################################
call_convertWebMdToHtml() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/web/md/to/html" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call convertWebUrlToPdf operation
#
##############################################################################
call_convertWebUrlToPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/web/url/to/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call convertWebUrlToScreenshot operation
#
##############################################################################
call_convertWebUrlToScreenshot() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/web/url/to/screenshot" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call convertWebUrlToTxt operation
#
##############################################################################
call_convertWebUrlToTxt() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/web/url/to/txt" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentBeginEditing operation
#
##############################################################################
call_editDocumentBeginEditing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/begin-editing" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editDocumentDocxBody operation
#
##############################################################################
call_editDocumentDocxBody() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/get-body" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxCreateBlankDocument operation
#
##############################################################################
call_editDocumentDocxCreateBlankDocument() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/create/blank" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxDeletePages operation
#
##############################################################################
call_editDocumentDocxDeletePages() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/delete-pages" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxDeleteTableRow operation
#
##############################################################################
call_editDocumentDocxDeleteTableRow() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/delete-table-row" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxDeleteTableRowRange operation
#
##############################################################################
call_editDocumentDocxDeleteTableRowRange() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/delete-table-row/range" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxFindParagraph operation
#
##############################################################################
call_editDocumentDocxFindParagraph() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/find/paragraph" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxGetComments operation
#
##############################################################################
call_editDocumentDocxGetComments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/get-comments/flat-list" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxGetCommentsHierarchical operation
#
##############################################################################
call_editDocumentDocxGetCommentsHierarchical() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/get-comments/hierarchical" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxGetHeadersAndFooters operation
#
##############################################################################
call_editDocumentDocxGetHeadersAndFooters() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/get-headers-and-footers" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxGetImages operation
#
##############################################################################
call_editDocumentDocxGetImages() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/get-images" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxGetSections operation
#
##############################################################################
call_editDocumentDocxGetSections() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/get-sections" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxGetStyles operation
#
##############################################################################
call_editDocumentDocxGetStyles() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/get-styles" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxGetTableByIndex operation
#
##############################################################################
call_editDocumentDocxGetTableByIndex() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/get-table/by-index" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxGetTableRow operation
#
##############################################################################
call_editDocumentDocxGetTableRow() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/get-table-row" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxGetTables operation
#
##############################################################################
call_editDocumentDocxGetTables() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/get-tables" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxInsertCommentOnParagraph operation
#
##############################################################################
call_editDocumentDocxInsertCommentOnParagraph() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/insert-comment/on/paragraph" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxInsertImage operation
#
##############################################################################
call_editDocumentDocxInsertImage() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/insert-image" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxInsertParagraph operation
#
##############################################################################
call_editDocumentDocxInsertParagraph() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/insert-paragraph" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxInsertTable operation
#
##############################################################################
call_editDocumentDocxInsertTable() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/insert-table" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxInsertTableRow operation
#
##############################################################################
call_editDocumentDocxInsertTableRow() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/insert-table-row" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxPages operation
#
##############################################################################
call_editDocumentDocxPages() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/get-pages" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxRemoveHeadersAndFooters operation
#
##############################################################################
call_editDocumentDocxRemoveHeadersAndFooters() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/remove-headers-and-footers" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxRemoveObject operation
#
##############################################################################
call_editDocumentDocxRemoveObject() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/remove-object" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxReplace operation
#
##############################################################################
call_editDocumentDocxReplace() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/replace-all" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxReplaceParagraph operation
#
##############################################################################
call_editDocumentDocxReplaceParagraph() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/replace/paragraph" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxSetFooter operation
#
##############################################################################
call_editDocumentDocxSetFooter() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/set-footer" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxSetFooterAddPageNumber operation
#
##############################################################################
call_editDocumentDocxSetFooterAddPageNumber() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/set-footer/add-page-number" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxSetHeader operation
#
##############################################################################
call_editDocumentDocxSetHeader() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/set-header" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxUpdateTableCell operation
#
##############################################################################
call_editDocumentDocxUpdateTableCell() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/update-table-cell" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentDocxUpdateTableRow operation
#
##############################################################################
call_editDocumentDocxUpdateTableRow() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/docx/update-table-row" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentFinishEditing operation
#
##############################################################################
call_editDocumentFinishEditing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/finish-editing" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentPptxDeleteSlides operation
#
##############################################################################
call_editDocumentPptxDeleteSlides() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pptx/delete-slides" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentPptxReplace operation
#
##############################################################################
call_editDocumentPptxReplace() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pptx/replace-all" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxAppendRow operation
#
##############################################################################
call_editDocumentXlsxAppendRow() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/append-row" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxClearCellByIndex operation
#
##############################################################################
call_editDocumentXlsxClearCellByIndex() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/clear-cell/by-index" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxClearRow operation
#
##############################################################################
call_editDocumentXlsxClearRow() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/clear-row" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxCreateBlankSpreadsheet operation
#
##############################################################################
call_editDocumentXlsxCreateBlankSpreadsheet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/create/blank" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxCreateSpreadsheetFromData operation
#
##############################################################################
call_editDocumentXlsxCreateSpreadsheetFromData() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/create/from/data" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxDeleteWorksheet operation
#
##############################################################################
call_editDocumentXlsxDeleteWorksheet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/delete-worksheet" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxDisableSharedWorkbook operation
#
##############################################################################
call_editDocumentXlsxDisableSharedWorkbook() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/configuration/disable-shared-workbook" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxEnableSharedWorkbook operation
#
##############################################################################
call_editDocumentXlsxEnableSharedWorkbook() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/configuration/enable-shared-workbook" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxGetCellByIdentifier operation
#
##############################################################################
call_editDocumentXlsxGetCellByIdentifier() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/get-cell/by-identifier" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxGetCellByIndex operation
#
##############################################################################
call_editDocumentXlsxGetCellByIndex() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/get-cell/by-index" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxGetColumns operation
#
##############################################################################
call_editDocumentXlsxGetColumns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/get-columns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxGetImages operation
#
##############################################################################
call_editDocumentXlsxGetImages() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/get-images" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxGetRowsAndCells operation
#
##############################################################################
call_editDocumentXlsxGetRowsAndCells() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/get-rows-and-cells" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxGetSpecificRow operation
#
##############################################################################
call_editDocumentXlsxGetSpecificRow() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/get-specific-row" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxGetStyles operation
#
##############################################################################
call_editDocumentXlsxGetStyles() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/get-styles" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxGetWorksheets operation
#
##############################################################################
call_editDocumentXlsxGetWorksheets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/get-worksheets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxInsertWorksheet operation
#
##############################################################################
call_editDocumentXlsxInsertWorksheet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/insert-worksheet" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxRenameWorksheet operation
#
##############################################################################
call_editDocumentXlsxRenameWorksheet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/rename-worksheet" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxSetCellByIdentifier operation
#
##############################################################################
call_editDocumentXlsxSetCellByIdentifier() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/set-cell/by-identifier" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editDocumentXlsxSetCellByIndex operation
#
##############################################################################
call_editDocumentXlsxSetCellByIndex() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/xlsx/set-cell/by-index" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editPdfAddAnnotations operation
#
##############################################################################
call_editPdfAddAnnotations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/annotations/add-item" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editPdfDecrypt operation
#
##############################################################################
call_editPdfDecrypt() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/decrypt" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editPdfDeletePages operation
#
##############################################################################
call_editPdfDeletePages() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/pages/delete" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editPdfEncrypt operation
#
##############################################################################
call_editPdfEncrypt() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/encrypt" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editPdfGetAnnotations operation
#
##############################################################################
call_editPdfGetAnnotations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/annotations/list" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editPdfGetFormFields operation
#
##############################################################################
call_editPdfGetFormFields() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/form/get-fields" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editPdfGetMetadata operation
#
##############################################################################
call_editPdfGetMetadata() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/get-metadata" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editPdfGetPdfTextByPages operation
#
##############################################################################
call_editPdfGetPdfTextByPages() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/pages/get-text" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editPdfInsertPages operation
#
##############################################################################
call_editPdfInsertPages() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/pages/insert" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editPdfRasterize operation
#
##############################################################################
call_editPdfRasterize() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/rasterize" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editPdfRemoveAllAnnotations operation
#
##############################################################################
call_editPdfRemoveAllAnnotations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/annotations/remove-all" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editPdfRemoveAnnotationItem operation
#
##############################################################################
call_editPdfRemoveAnnotationItem() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/annotations/remove-item" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editPdfRotateAllPages operation
#
##############################################################################
call_editPdfRotateAllPages() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/pages/rotate/all" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editPdfRotatePageRange operation
#
##############################################################################
call_editPdfRotatePageRange() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/pages/rotate/page-range" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editPdfSetFormFields operation
#
##############################################################################
call_editPdfSetFormFields() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/form/set-fields" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editPdfSetMetadata operation
#
##############################################################################
call_editPdfSetMetadata() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/set-metadata" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editPdfSetPermissions operation
#
##############################################################################
call_editPdfSetPermissions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/encrypt/set-permissions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editPdfWatermarkText operation
#
##############################################################################
call_editPdfWatermarkText() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/pdf/watermark/text" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editTextBase64Decode operation
#
##############################################################################
call_editTextBase64Decode() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/text/encoding/base64/decode" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editTextBase64Detect operation
#
##############################################################################
call_editTextBase64Detect() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/text/encoding/base64/detect" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editTextBase64Encode operation
#
##############################################################################
call_editTextBase64Encode() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/text/encoding/base64/encode" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editTextChangeLineEndings operation
#
##############################################################################
call_editTextChangeLineEndings() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/text/line-endings/change" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editTextDetectLineEndings operation
#
##############################################################################
call_editTextDetectLineEndings() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/text/line-endings/detect" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editTextFindRegex operation
#
##############################################################################
call_editTextFindRegex() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/text/find/regex" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editTextFindSimple operation
#
##############################################################################
call_editTextFindSimple() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/text/find/string" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editTextRemoveAllWhitespace operation
#
##############################################################################
call_editTextRemoveAllWhitespace() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/text/remove/whitespace/all" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editTextRemoveHtml operation
#
##############################################################################
call_editTextRemoveHtml() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/text/remove/html" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editTextReplaceRegex operation
#
##############################################################################
call_editTextReplaceRegex() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/text/replace/regex" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editTextReplaceSimple operation
#
##############################################################################
call_editTextReplaceSimple() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/text/replace/string" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call editTextTextEncodingDetect operation
#
##############################################################################
call_editTextTextEncodingDetect() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/text/encoding/detect" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call editTextTrimWhitespace operation
#
##############################################################################
call_editTextTrimWhitespace() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/edit/text/remove/whitespace/trim" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call mergeDocumentDocx operation
#
##############################################################################
call_mergeDocumentDocx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/merge/docx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call mergeDocumentDocxMulti operation
#
##############################################################################
call_mergeDocumentDocxMulti() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/merge/docx/multi" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call mergeDocumentPdf operation
#
##############################################################################
call_mergeDocumentPdf() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/merge/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call mergeDocumentPdfMulti operation
#
##############################################################################
call_mergeDocumentPdfMulti() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/merge/pdf/multi" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call mergeDocumentPng operation
#
##############################################################################
call_mergeDocumentPng() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/merge/png/vertical" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call mergeDocumentPngMulti operation
#
##############################################################################
call_mergeDocumentPngMulti() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/merge/png/vertical/multi" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call mergeDocumentPptx operation
#
##############################################################################
call_mergeDocumentPptx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/merge/pptx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call mergeDocumentPptxMulti operation
#
##############################################################################
call_mergeDocumentPptxMulti() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/merge/pptx/multi" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call mergeDocumentTxt operation
#
##############################################################################
call_mergeDocumentTxt() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/merge/txt" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call mergeDocumentTxtMulti operation
#
##############################################################################
call_mergeDocumentTxtMulti() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/merge/txt/multi" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call mergeDocumentXlsx operation
#
##############################################################################
call_mergeDocumentXlsx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/merge/xlsx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call mergeDocumentXlsxMulti operation
#
##############################################################################
call_mergeDocumentXlsxMulti() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/merge/xlsx/multi" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call splitDocumentDocx operation
#
##############################################################################
call_splitDocumentDocx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/split/docx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call splitDocumentPdfByPage operation
#
##############################################################################
call_splitDocumentPdfByPage() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/split/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call splitDocumentPptx operation
#
##############################################################################
call_splitDocumentPptx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/split/pptx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call splitDocumentTxtByLine operation
#
##############################################################################
call_splitDocumentTxtByLine() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/split/txt/by-line" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call splitDocumentTxtByString operation
#
##############################################################################
call_splitDocumentTxtByString() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/split/txt/by-string" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call splitDocumentXlsx operation
#
##############################################################################
call_splitDocumentXlsx() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/split/xlsx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call validateDocumentAutodetectValidation operation
#
##############################################################################
call_validateDocumentAutodetectValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/validate/autodetect" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call validateDocumentCsvValidation operation
#
##############################################################################
call_validateDocumentCsvValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/validate/csv" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call validateDocumentDocxValidation operation
#
##############################################################################
call_validateDocumentDocxValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/validate/docx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call validateDocumentEmlValidation operation
#
##############################################################################
call_validateDocumentEmlValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/validate/eml" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call validateDocumentExecutableValidation operation
#
##############################################################################
call_validateDocumentExecutableValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/validate/executable" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call validateDocumentGZipValidation operation
#
##############################################################################
call_validateDocumentGZipValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/validate/gzip" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call validateDocumentJsonValidation operation
#
##############################################################################
call_validateDocumentJsonValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/validate/json" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call validateDocumentMsgValidation operation
#
##############################################################################
call_validateDocumentMsgValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/validate/msg" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call validateDocumentPdfValidation operation
#
##############################################################################
call_validateDocumentPdfValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/validate/pdf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call validateDocumentPptxValidation operation
#
##############################################################################
call_validateDocumentPptxValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/validate/pptx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call validateDocumentRarValidation operation
#
##############################################################################
call_validateDocumentRarValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/validate/rar" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call validateDocumentTarValidation operation
#
##############################################################################
call_validateDocumentTarValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/validate/tar" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call validateDocumentXlsxValidation operation
#
##############################################################################
call_validateDocumentXlsxValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/validate/xlsx" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call validateDocumentXmlValidation operation
#
##############################################################################
call_validateDocumentXmlValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/validate/xml" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call validateDocumentZipValidation operation
#
##############################################################################
call_validateDocumentZipValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/validate/zip" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call viewerToolsCreateSimple operation
#
##############################################################################
call_viewerToolsCreateSimple() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/viewer/create/web/simple" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call zipArchiveZipCreate operation
#
##############################################################################
call_zipArchiveZipCreate() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/archive/zip/create" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call zipArchiveZipCreateAdvanced operation
#
##############################################################################
call_zipArchiveZipCreateAdvanced() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/archive/zip/create/advanced" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call zipArchiveZipDecrypt operation
#
##############################################################################
call_zipArchiveZipDecrypt() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/archive/zip/decrypt" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call zipArchiveZipEncryptAdvanced operation
#
##############################################################################
call_zipArchiveZipEncryptAdvanced() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/archive/zip/encrypt/advanced" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- text/json"
        echo -e "\\t- application/xml"
        echo -e "\\t- text/xml"
        echo -e "\\t- application/x-www-form-urlencoded"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call zipArchiveZipExtract operation
#
##############################################################################
call_zipArchiveZipExtract() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/convert/archive/zip/extract" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}



##############################################################################
#
# Main
#
##############################################################################


# Check dependencies
type curl >/dev/null 2>&1 || { echo >&2 "ERROR: You do not have 'cURL' installed."; exit 1; }
type sed >/dev/null 2>&1 || { echo >&2 "ERROR: You do not have 'sed' installed."; exit 1; }
type column >/dev/null 2>&1 || { echo >&2 "ERROR: You do not have 'bsdmainutils' installed."; exit 1; }

#
# Process command line
#
# Pass all arguments before 'operation' to cURL except the ones we override
#
take_user=false
take_host=false
take_accept_header=false
take_contenttype_header=false

for key in "$@"; do
# Take the value of -u|--user argument
if [[ "$take_user" = true ]]; then
    basic_auth_credential="$key"
    take_user=false
    continue
fi
# Take the value of --host argument
if [[ "$take_host" = true ]]; then
    host="$key"
    take_host=false
    continue
fi
# Take the value of --accept argument
if [[ "$take_accept_header" = true ]]; then
    header_accept=$(lookup_mime_type "$key")
    take_accept_header=false
    continue
fi
# Take the value of --content-type argument
if [[ "$take_contenttype_header" = true ]]; then
    header_content_type=$(lookup_mime_type "$key")
    take_contenttype_header=false
    continue
fi
case $key in
    -h|--help)
    if [[ "x$operation" == "x" ]]; then
        print_help
        exit 0
    else
        eval "print_${operation}_help"
        exit 0
    fi
    ;;
    -V|--version)
    print_version
    exit 0
    ;;
    --about)
    print_about
    exit 0
    ;;
    -u|--user)
    take_user=true
    ;;
    --host)
    take_host=true
    ;;
    --force)
    force=true
    ;;
    -ac|--accept)
    take_accept_header=true
    ;;
    -ct|--content-type)
    take_contenttype_header=true
    ;;
    --dry-run)
    print_curl=true
    ;;
    -nc|--no-colors)
        RED=""
        GREEN=""
        YELLOW=""
        BLUE=""
        MAGENTA=""
        CYAN=""
        WHITE=""
        BOLD=""
        OFF=""
        result_color_table=( "" "" "" "" "" "" "" )
    ;;
    compareDocumentDocx)
    operation="compareDocumentDocx"
    ;;
    convertDataCsvToJson)
    operation="convertDataCsvToJson"
    ;;
    convertDataJsonToXml)
    operation="convertDataJsonToXml"
    ;;
    convertDataXlsToJson)
    operation="convertDataXlsToJson"
    ;;
    convertDataXlsxToJson)
    operation="convertDataXlsxToJson"
    ;;
    convertDataXmlEditAddAttributeWithXPath)
    operation="convertDataXmlEditAddAttributeWithXPath"
    ;;
    convertDataXmlEditAddChildWithXPath)
    operation="convertDataXmlEditAddChildWithXPath"
    ;;
    convertDataXmlEditRemoveAllChildNodesWithXPath)
    operation="convertDataXmlEditRemoveAllChildNodesWithXPath"
    ;;
    convertDataXmlEditReplaceWithXPath)
    operation="convertDataXmlEditReplaceWithXPath"
    ;;
    convertDataXmlEditSetValueWithXPath)
    operation="convertDataXmlEditSetValueWithXPath"
    ;;
    convertDataXmlFilterWithXPath)
    operation="convertDataXmlFilterWithXPath"
    ;;
    convertDataXmlQueryWithXQuery)
    operation="convertDataXmlQueryWithXQuery"
    ;;
    convertDataXmlQueryWithXQueryMulti)
    operation="convertDataXmlQueryWithXQueryMulti"
    ;;
    convertDataXmlRemoveWithXPath)
    operation="convertDataXmlRemoveWithXPath"
    ;;
    convertDataXmlToJson)
    operation="convertDataXmlToJson"
    ;;
    convertDataXmlTransformWithXsltToXml)
    operation="convertDataXmlTransformWithXsltToXml"
    ;;
    convertDocumentAutodetectGetInfo)
    operation="convertDocumentAutodetectGetInfo"
    ;;
    convertDocumentAutodetectToJpg)
    operation="convertDocumentAutodetectToJpg"
    ;;
    convertDocumentAutodetectToPdf)
    operation="convertDocumentAutodetectToPdf"
    ;;
    convertDocumentAutodetectToPngArray)
    operation="convertDocumentAutodetectToPngArray"
    ;;
    convertDocumentAutodetectToThumbnail)
    operation="convertDocumentAutodetectToThumbnail"
    ;;
    convertDocumentAutodetectToThumbnailsAdvanced)
    operation="convertDocumentAutodetectToThumbnailsAdvanced"
    ;;
    convertDocumentAutodetectToTxt)
    operation="convertDocumentAutodetectToTxt"
    ;;
    convertDocumentCsvToXlsx)
    operation="convertDocumentCsvToXlsx"
    ;;
    convertDocumentDocToDocx)
    operation="convertDocumentDocToDocx"
    ;;
    convertDocumentDocToPdf)
    operation="convertDocumentDocToPdf"
    ;;
    convertDocumentDocToTxt)
    operation="convertDocumentDocToTxt"
    ;;
    convertDocumentDocxToHtml)
    operation="convertDocumentDocxToHtml"
    ;;
    convertDocumentDocxToJpg)
    operation="convertDocumentDocxToJpg"
    ;;
    convertDocumentDocxToPdf)
    operation="convertDocumentDocxToPdf"
    ;;
    convertDocumentDocxToPng)
    operation="convertDocumentDocxToPng"
    ;;
    convertDocumentDocxToRtf)
    operation="convertDocumentDocxToRtf"
    ;;
    convertDocumentDocxToTxt)
    operation="convertDocumentDocxToTxt"
    ;;
    convertDocumentEmlToHtml)
    operation="convertDocumentEmlToHtml"
    ;;
    convertDocumentEmlToJpg)
    operation="convertDocumentEmlToJpg"
    ;;
    convertDocumentEmlToPdf)
    operation="convertDocumentEmlToPdf"
    ;;
    convertDocumentEmlToPng)
    operation="convertDocumentEmlToPng"
    ;;
    convertDocumentGetFileTypeIcon)
    operation="convertDocumentGetFileTypeIcon"
    ;;
    convertDocumentGetFileTypeIconAdvanced)
    operation="convertDocumentGetFileTypeIconAdvanced"
    ;;
    convertDocumentHtmlToPdf)
    operation="convertDocumentHtmlToPdf"
    ;;
    convertDocumentHtmlToPng)
    operation="convertDocumentHtmlToPng"
    ;;
    convertDocumentHtmlToTxt)
    operation="convertDocumentHtmlToTxt"
    ;;
    convertDocumentKeynoteToJpg)
    operation="convertDocumentKeynoteToJpg"
    ;;
    convertDocumentKeynoteToPdf)
    operation="convertDocumentKeynoteToPdf"
    ;;
    convertDocumentKeynoteToPng)
    operation="convertDocumentKeynoteToPng"
    ;;
    convertDocumentKeynoteToPptx)
    operation="convertDocumentKeynoteToPptx"
    ;;
    convertDocumentMsgToHtml)
    operation="convertDocumentMsgToHtml"
    ;;
    convertDocumentMsgToJpg)
    operation="convertDocumentMsgToJpg"
    ;;
    convertDocumentMsgToPdf)
    operation="convertDocumentMsgToPdf"
    ;;
    convertDocumentMsgToPng)
    operation="convertDocumentMsgToPng"
    ;;
    convertDocumentOdpToJpg)
    operation="convertDocumentOdpToJpg"
    ;;
    convertDocumentOdpToPdf)
    operation="convertDocumentOdpToPdf"
    ;;
    convertDocumentOdpToPng)
    operation="convertDocumentOdpToPng"
    ;;
    convertDocumentOdpToPptx)
    operation="convertDocumentOdpToPptx"
    ;;
    convertDocumentOdsToJpg)
    operation="convertDocumentOdsToJpg"
    ;;
    convertDocumentOdsToPdf)
    operation="convertDocumentOdsToPdf"
    ;;
    convertDocumentOdsToPng)
    operation="convertDocumentOdsToPng"
    ;;
    convertDocumentOdsToXlsx)
    operation="convertDocumentOdsToXlsx"
    ;;
    convertDocumentOdtToDocx)
    operation="convertDocumentOdtToDocx"
    ;;
    convertDocumentOdtToJpg)
    operation="convertDocumentOdtToJpg"
    ;;
    convertDocumentOdtToPdf)
    operation="convertDocumentOdtToPdf"
    ;;
    convertDocumentOdtToPng)
    operation="convertDocumentOdtToPng"
    ;;
    convertDocumentPdfToDocx)
    operation="convertDocumentPdfToDocx"
    ;;
    convertDocumentPdfToDocxRasterize)
    operation="convertDocumentPdfToDocxRasterize"
    ;;
    convertDocumentPdfToJpg)
    operation="convertDocumentPdfToJpg"
    ;;
    convertDocumentPdfToPngArray)
    operation="convertDocumentPdfToPngArray"
    ;;
    convertDocumentPdfToPngSingle)
    operation="convertDocumentPdfToPngSingle"
    ;;
    convertDocumentPdfToPptx)
    operation="convertDocumentPdfToPptx"
    ;;
    convertDocumentPdfToTxt)
    operation="convertDocumentPdfToTxt"
    ;;
    convertDocumentPngArrayToPdf)
    operation="convertDocumentPngArrayToPdf"
    ;;
    convertDocumentPptToPdf)
    operation="convertDocumentPptToPdf"
    ;;
    convertDocumentPptToPptx)
    operation="convertDocumentPptToPptx"
    ;;
    convertDocumentPptxToPdf)
    operation="convertDocumentPptxToPdf"
    ;;
    convertDocumentPptxToPng)
    operation="convertDocumentPptxToPng"
    ;;
    convertDocumentPptxToTxt)
    operation="convertDocumentPptxToTxt"
    ;;
    convertDocumentRtfToDocx)
    operation="convertDocumentRtfToDocx"
    ;;
    convertDocumentRtfToHtml)
    operation="convertDocumentRtfToHtml"
    ;;
    convertDocumentRtfToJpg)
    operation="convertDocumentRtfToJpg"
    ;;
    convertDocumentRtfToPdf)
    operation="convertDocumentRtfToPdf"
    ;;
    convertDocumentRtfToPng)
    operation="convertDocumentRtfToPng"
    ;;
    convertDocumentXlsToCsv)
    operation="convertDocumentXlsToCsv"
    ;;
    convertDocumentXlsToPdf)
    operation="convertDocumentXlsToPdf"
    ;;
    convertDocumentXlsToXlsx)
    operation="convertDocumentXlsToXlsx"
    ;;
    convertDocumentXlsxToCsv)
    operation="convertDocumentXlsxToCsv"
    ;;
    convertDocumentXlsxToCsvMulti)
    operation="convertDocumentXlsxToCsvMulti"
    ;;
    convertDocumentXlsxToPdf)
    operation="convertDocumentXlsxToPdf"
    ;;
    convertDocumentXlsxToPng)
    operation="convertDocumentXlsxToPng"
    ;;
    convertDocumentXlsxToTxt)
    operation="convertDocumentXlsxToTxt"
    ;;
    convertImageGetImageInfo)
    operation="convertImageGetImageInfo"
    ;;
    convertImageImageFormatConvert)
    operation="convertImageImageFormatConvert"
    ;;
    convertImageImageSetDPI)
    operation="convertImageImageSetDPI"
    ;;
    convertImageMultipageImageFormatConvert)
    operation="convertImageMultipageImageFormatConvert"
    ;;
    convertTemplateApplyDocxTemplate)
    operation="convertTemplateApplyDocxTemplate"
    ;;
    convertTemplateApplyHtmlTemplate)
    operation="convertTemplateApplyHtmlTemplate"
    ;;
    convertWebHtmlToDocx)
    operation="convertWebHtmlToDocx"
    ;;
    convertWebHtmlToPdf)
    operation="convertWebHtmlToPdf"
    ;;
    convertWebHtmlToPng)
    operation="convertWebHtmlToPng"
    ;;
    convertWebHtmlToTxt)
    operation="convertWebHtmlToTxt"
    ;;
    convertWebMdToHtml)
    operation="convertWebMdToHtml"
    ;;
    convertWebUrlToPdf)
    operation="convertWebUrlToPdf"
    ;;
    convertWebUrlToScreenshot)
    operation="convertWebUrlToScreenshot"
    ;;
    convertWebUrlToTxt)
    operation="convertWebUrlToTxt"
    ;;
    editDocumentBeginEditing)
    operation="editDocumentBeginEditing"
    ;;
    editDocumentDocxBody)
    operation="editDocumentDocxBody"
    ;;
    editDocumentDocxCreateBlankDocument)
    operation="editDocumentDocxCreateBlankDocument"
    ;;
    editDocumentDocxDeletePages)
    operation="editDocumentDocxDeletePages"
    ;;
    editDocumentDocxDeleteTableRow)
    operation="editDocumentDocxDeleteTableRow"
    ;;
    editDocumentDocxDeleteTableRowRange)
    operation="editDocumentDocxDeleteTableRowRange"
    ;;
    editDocumentDocxFindParagraph)
    operation="editDocumentDocxFindParagraph"
    ;;
    editDocumentDocxGetComments)
    operation="editDocumentDocxGetComments"
    ;;
    editDocumentDocxGetCommentsHierarchical)
    operation="editDocumentDocxGetCommentsHierarchical"
    ;;
    editDocumentDocxGetHeadersAndFooters)
    operation="editDocumentDocxGetHeadersAndFooters"
    ;;
    editDocumentDocxGetImages)
    operation="editDocumentDocxGetImages"
    ;;
    editDocumentDocxGetSections)
    operation="editDocumentDocxGetSections"
    ;;
    editDocumentDocxGetStyles)
    operation="editDocumentDocxGetStyles"
    ;;
    editDocumentDocxGetTableByIndex)
    operation="editDocumentDocxGetTableByIndex"
    ;;
    editDocumentDocxGetTableRow)
    operation="editDocumentDocxGetTableRow"
    ;;
    editDocumentDocxGetTables)
    operation="editDocumentDocxGetTables"
    ;;
    editDocumentDocxInsertCommentOnParagraph)
    operation="editDocumentDocxInsertCommentOnParagraph"
    ;;
    editDocumentDocxInsertImage)
    operation="editDocumentDocxInsertImage"
    ;;
    editDocumentDocxInsertParagraph)
    operation="editDocumentDocxInsertParagraph"
    ;;
    editDocumentDocxInsertTable)
    operation="editDocumentDocxInsertTable"
    ;;
    editDocumentDocxInsertTableRow)
    operation="editDocumentDocxInsertTableRow"
    ;;
    editDocumentDocxPages)
    operation="editDocumentDocxPages"
    ;;
    editDocumentDocxRemoveHeadersAndFooters)
    operation="editDocumentDocxRemoveHeadersAndFooters"
    ;;
    editDocumentDocxRemoveObject)
    operation="editDocumentDocxRemoveObject"
    ;;
    editDocumentDocxReplace)
    operation="editDocumentDocxReplace"
    ;;
    editDocumentDocxReplaceParagraph)
    operation="editDocumentDocxReplaceParagraph"
    ;;
    editDocumentDocxSetFooter)
    operation="editDocumentDocxSetFooter"
    ;;
    editDocumentDocxSetFooterAddPageNumber)
    operation="editDocumentDocxSetFooterAddPageNumber"
    ;;
    editDocumentDocxSetHeader)
    operation="editDocumentDocxSetHeader"
    ;;
    editDocumentDocxUpdateTableCell)
    operation="editDocumentDocxUpdateTableCell"
    ;;
    editDocumentDocxUpdateTableRow)
    operation="editDocumentDocxUpdateTableRow"
    ;;
    editDocumentFinishEditing)
    operation="editDocumentFinishEditing"
    ;;
    editDocumentPptxDeleteSlides)
    operation="editDocumentPptxDeleteSlides"
    ;;
    editDocumentPptxReplace)
    operation="editDocumentPptxReplace"
    ;;
    editDocumentXlsxAppendRow)
    operation="editDocumentXlsxAppendRow"
    ;;
    editDocumentXlsxClearCellByIndex)
    operation="editDocumentXlsxClearCellByIndex"
    ;;
    editDocumentXlsxClearRow)
    operation="editDocumentXlsxClearRow"
    ;;
    editDocumentXlsxCreateBlankSpreadsheet)
    operation="editDocumentXlsxCreateBlankSpreadsheet"
    ;;
    editDocumentXlsxCreateSpreadsheetFromData)
    operation="editDocumentXlsxCreateSpreadsheetFromData"
    ;;
    editDocumentXlsxDeleteWorksheet)
    operation="editDocumentXlsxDeleteWorksheet"
    ;;
    editDocumentXlsxDisableSharedWorkbook)
    operation="editDocumentXlsxDisableSharedWorkbook"
    ;;
    editDocumentXlsxEnableSharedWorkbook)
    operation="editDocumentXlsxEnableSharedWorkbook"
    ;;
    editDocumentXlsxGetCellByIdentifier)
    operation="editDocumentXlsxGetCellByIdentifier"
    ;;
    editDocumentXlsxGetCellByIndex)
    operation="editDocumentXlsxGetCellByIndex"
    ;;
    editDocumentXlsxGetColumns)
    operation="editDocumentXlsxGetColumns"
    ;;
    editDocumentXlsxGetImages)
    operation="editDocumentXlsxGetImages"
    ;;
    editDocumentXlsxGetRowsAndCells)
    operation="editDocumentXlsxGetRowsAndCells"
    ;;
    editDocumentXlsxGetSpecificRow)
    operation="editDocumentXlsxGetSpecificRow"
    ;;
    editDocumentXlsxGetStyles)
    operation="editDocumentXlsxGetStyles"
    ;;
    editDocumentXlsxGetWorksheets)
    operation="editDocumentXlsxGetWorksheets"
    ;;
    editDocumentXlsxInsertWorksheet)
    operation="editDocumentXlsxInsertWorksheet"
    ;;
    editDocumentXlsxRenameWorksheet)
    operation="editDocumentXlsxRenameWorksheet"
    ;;
    editDocumentXlsxSetCellByIdentifier)
    operation="editDocumentXlsxSetCellByIdentifier"
    ;;
    editDocumentXlsxSetCellByIndex)
    operation="editDocumentXlsxSetCellByIndex"
    ;;
    editPdfAddAnnotations)
    operation="editPdfAddAnnotations"
    ;;
    editPdfDecrypt)
    operation="editPdfDecrypt"
    ;;
    editPdfDeletePages)
    operation="editPdfDeletePages"
    ;;
    editPdfEncrypt)
    operation="editPdfEncrypt"
    ;;
    editPdfGetAnnotations)
    operation="editPdfGetAnnotations"
    ;;
    editPdfGetFormFields)
    operation="editPdfGetFormFields"
    ;;
    editPdfGetMetadata)
    operation="editPdfGetMetadata"
    ;;
    editPdfGetPdfTextByPages)
    operation="editPdfGetPdfTextByPages"
    ;;
    editPdfInsertPages)
    operation="editPdfInsertPages"
    ;;
    editPdfRasterize)
    operation="editPdfRasterize"
    ;;
    editPdfRemoveAllAnnotations)
    operation="editPdfRemoveAllAnnotations"
    ;;
    editPdfRemoveAnnotationItem)
    operation="editPdfRemoveAnnotationItem"
    ;;
    editPdfRotateAllPages)
    operation="editPdfRotateAllPages"
    ;;
    editPdfRotatePageRange)
    operation="editPdfRotatePageRange"
    ;;
    editPdfSetFormFields)
    operation="editPdfSetFormFields"
    ;;
    editPdfSetMetadata)
    operation="editPdfSetMetadata"
    ;;
    editPdfSetPermissions)
    operation="editPdfSetPermissions"
    ;;
    editPdfWatermarkText)
    operation="editPdfWatermarkText"
    ;;
    editTextBase64Decode)
    operation="editTextBase64Decode"
    ;;
    editTextBase64Detect)
    operation="editTextBase64Detect"
    ;;
    editTextBase64Encode)
    operation="editTextBase64Encode"
    ;;
    editTextChangeLineEndings)
    operation="editTextChangeLineEndings"
    ;;
    editTextDetectLineEndings)
    operation="editTextDetectLineEndings"
    ;;
    editTextFindRegex)
    operation="editTextFindRegex"
    ;;
    editTextFindSimple)
    operation="editTextFindSimple"
    ;;
    editTextRemoveAllWhitespace)
    operation="editTextRemoveAllWhitespace"
    ;;
    editTextRemoveHtml)
    operation="editTextRemoveHtml"
    ;;
    editTextReplaceRegex)
    operation="editTextReplaceRegex"
    ;;
    editTextReplaceSimple)
    operation="editTextReplaceSimple"
    ;;
    editTextTextEncodingDetect)
    operation="editTextTextEncodingDetect"
    ;;
    editTextTrimWhitespace)
    operation="editTextTrimWhitespace"
    ;;
    mergeDocumentDocx)
    operation="mergeDocumentDocx"
    ;;
    mergeDocumentDocxMulti)
    operation="mergeDocumentDocxMulti"
    ;;
    mergeDocumentPdf)
    operation="mergeDocumentPdf"
    ;;
    mergeDocumentPdfMulti)
    operation="mergeDocumentPdfMulti"
    ;;
    mergeDocumentPng)
    operation="mergeDocumentPng"
    ;;
    mergeDocumentPngMulti)
    operation="mergeDocumentPngMulti"
    ;;
    mergeDocumentPptx)
    operation="mergeDocumentPptx"
    ;;
    mergeDocumentPptxMulti)
    operation="mergeDocumentPptxMulti"
    ;;
    mergeDocumentTxt)
    operation="mergeDocumentTxt"
    ;;
    mergeDocumentTxtMulti)
    operation="mergeDocumentTxtMulti"
    ;;
    mergeDocumentXlsx)
    operation="mergeDocumentXlsx"
    ;;
    mergeDocumentXlsxMulti)
    operation="mergeDocumentXlsxMulti"
    ;;
    splitDocumentDocx)
    operation="splitDocumentDocx"
    ;;
    splitDocumentPdfByPage)
    operation="splitDocumentPdfByPage"
    ;;
    splitDocumentPptx)
    operation="splitDocumentPptx"
    ;;
    splitDocumentTxtByLine)
    operation="splitDocumentTxtByLine"
    ;;
    splitDocumentTxtByString)
    operation="splitDocumentTxtByString"
    ;;
    splitDocumentXlsx)
    operation="splitDocumentXlsx"
    ;;
    validateDocumentAutodetectValidation)
    operation="validateDocumentAutodetectValidation"
    ;;
    validateDocumentCsvValidation)
    operation="validateDocumentCsvValidation"
    ;;
    validateDocumentDocxValidation)
    operation="validateDocumentDocxValidation"
    ;;
    validateDocumentEmlValidation)
    operation="validateDocumentEmlValidation"
    ;;
    validateDocumentExecutableValidation)
    operation="validateDocumentExecutableValidation"
    ;;
    validateDocumentGZipValidation)
    operation="validateDocumentGZipValidation"
    ;;
    validateDocumentJsonValidation)
    operation="validateDocumentJsonValidation"
    ;;
    validateDocumentMsgValidation)
    operation="validateDocumentMsgValidation"
    ;;
    validateDocumentPdfValidation)
    operation="validateDocumentPdfValidation"
    ;;
    validateDocumentPptxValidation)
    operation="validateDocumentPptxValidation"
    ;;
    validateDocumentRarValidation)
    operation="validateDocumentRarValidation"
    ;;
    validateDocumentTarValidation)
    operation="validateDocumentTarValidation"
    ;;
    validateDocumentXlsxValidation)
    operation="validateDocumentXlsxValidation"
    ;;
    validateDocumentXmlValidation)
    operation="validateDocumentXmlValidation"
    ;;
    validateDocumentZipValidation)
    operation="validateDocumentZipValidation"
    ;;
    viewerToolsCreateSimple)
    operation="viewerToolsCreateSimple"
    ;;
    zipArchiveZipCreate)
    operation="zipArchiveZipCreate"
    ;;
    zipArchiveZipCreateAdvanced)
    operation="zipArchiveZipCreateAdvanced"
    ;;
    zipArchiveZipDecrypt)
    operation="zipArchiveZipDecrypt"
    ;;
    zipArchiveZipEncryptAdvanced)
    operation="zipArchiveZipEncryptAdvanced"
    ;;
    zipArchiveZipExtract)
    operation="zipArchiveZipExtract"
    ;;
    *==*)
    # Parse body arguments and convert them into top level
    # JSON properties passed in the body content as strings
    if [[ "$operation" ]]; then
        IFS='==' read -r body_key sep body_value <<< "$key"
        body_parameters[${body_key}]="\"${body_value}\""
    fi
    ;;
    *:=*)
    # Parse body arguments and convert them into top level
    # JSON properties passed in the body content without qoutes
    if [[ "$operation" ]]; then
        # ignore error about 'sep' being unused
        # shellcheck disable=SC2034
        IFS=':=' read -r body_key sep body_value <<< "$key"
        body_parameters[${body_key}]=${body_value}
    fi
    ;;
    +\([^=]\):*)
    # Parse header arguments and convert them into curl
    # only after the operation argument
    if [[ "$operation" ]]; then
        IFS=':' read -r header_name header_value <<< "$key"
        #
        # If the header key is the same as the api_key expected by API in the
        # header, override the ${apikey_auth_credential} variable
        #
        if [[ $header_name == "Apikey" ]]; then
            apikey_auth_credential=$header_value
        fi
        header_arguments[$header_name]=$header_value
    else
        curl_arguments+=" $key"
    fi
    ;;
    -)
    body_content_temp_file=$(mktemp)
    cat - > "$body_content_temp_file"
    ;;
    *=*)
    # Parse operation arguments and convert them into curl
    # only after the operation argument
    if [[ "$operation" ]]; then
        IFS='=' read -r parameter_name parameter_value <<< "$key"
        if [[ -z "${operation_parameters[$parameter_name]+foo}" ]]; then
            operation_parameters[$parameter_name]=$(url_escape "${parameter_value}")
        else
            operation_parameters[$parameter_name]+=":::"$(url_escape "${parameter_value}")
        fi
    else
        curl_arguments+=" $key"
    fi
    ;;
    *)
    # If we are before the operation, treat the arguments as cURL arguments
    if [[ "x$operation" == "x" ]]; then
        # Maintain quotes around cURL arguments if necessary
        space_regexp="[[:space:]]"
        if [[ $key =~ $space_regexp ]]; then
            curl_arguments+=" \"$key\""
        else
            curl_arguments+=" $key"
        fi
    fi
    ;;
esac
done


# Check if user provided host name
if [[ -z "$host" ]]; then
    ERROR_MSG="ERROR: No hostname provided!!! You have to  provide on command line option '--host ...'"
    exit 1
fi

# Check if user specified operation ID
if [[ -z "$operation" ]]; then
    ERROR_MSG="ERROR: No operation specified!!!"
    exit 1
fi


# Run cURL command based on the operation ID
case $operation in
    compareDocumentDocx)
    call_compareDocumentDocx
    ;;
    convertDataCsvToJson)
    call_convertDataCsvToJson
    ;;
    convertDataJsonToXml)
    call_convertDataJsonToXml
    ;;
    convertDataXlsToJson)
    call_convertDataXlsToJson
    ;;
    convertDataXlsxToJson)
    call_convertDataXlsxToJson
    ;;
    convertDataXmlEditAddAttributeWithXPath)
    call_convertDataXmlEditAddAttributeWithXPath
    ;;
    convertDataXmlEditAddChildWithXPath)
    call_convertDataXmlEditAddChildWithXPath
    ;;
    convertDataXmlEditRemoveAllChildNodesWithXPath)
    call_convertDataXmlEditRemoveAllChildNodesWithXPath
    ;;
    convertDataXmlEditReplaceWithXPath)
    call_convertDataXmlEditReplaceWithXPath
    ;;
    convertDataXmlEditSetValueWithXPath)
    call_convertDataXmlEditSetValueWithXPath
    ;;
    convertDataXmlFilterWithXPath)
    call_convertDataXmlFilterWithXPath
    ;;
    convertDataXmlQueryWithXQuery)
    call_convertDataXmlQueryWithXQuery
    ;;
    convertDataXmlQueryWithXQueryMulti)
    call_convertDataXmlQueryWithXQueryMulti
    ;;
    convertDataXmlRemoveWithXPath)
    call_convertDataXmlRemoveWithXPath
    ;;
    convertDataXmlToJson)
    call_convertDataXmlToJson
    ;;
    convertDataXmlTransformWithXsltToXml)
    call_convertDataXmlTransformWithXsltToXml
    ;;
    convertDocumentAutodetectGetInfo)
    call_convertDocumentAutodetectGetInfo
    ;;
    convertDocumentAutodetectToJpg)
    call_convertDocumentAutodetectToJpg
    ;;
    convertDocumentAutodetectToPdf)
    call_convertDocumentAutodetectToPdf
    ;;
    convertDocumentAutodetectToPngArray)
    call_convertDocumentAutodetectToPngArray
    ;;
    convertDocumentAutodetectToThumbnail)
    call_convertDocumentAutodetectToThumbnail
    ;;
    convertDocumentAutodetectToThumbnailsAdvanced)
    call_convertDocumentAutodetectToThumbnailsAdvanced
    ;;
    convertDocumentAutodetectToTxt)
    call_convertDocumentAutodetectToTxt
    ;;
    convertDocumentCsvToXlsx)
    call_convertDocumentCsvToXlsx
    ;;
    convertDocumentDocToDocx)
    call_convertDocumentDocToDocx
    ;;
    convertDocumentDocToPdf)
    call_convertDocumentDocToPdf
    ;;
    convertDocumentDocToTxt)
    call_convertDocumentDocToTxt
    ;;
    convertDocumentDocxToHtml)
    call_convertDocumentDocxToHtml
    ;;
    convertDocumentDocxToJpg)
    call_convertDocumentDocxToJpg
    ;;
    convertDocumentDocxToPdf)
    call_convertDocumentDocxToPdf
    ;;
    convertDocumentDocxToPng)
    call_convertDocumentDocxToPng
    ;;
    convertDocumentDocxToRtf)
    call_convertDocumentDocxToRtf
    ;;
    convertDocumentDocxToTxt)
    call_convertDocumentDocxToTxt
    ;;
    convertDocumentEmlToHtml)
    call_convertDocumentEmlToHtml
    ;;
    convertDocumentEmlToJpg)
    call_convertDocumentEmlToJpg
    ;;
    convertDocumentEmlToPdf)
    call_convertDocumentEmlToPdf
    ;;
    convertDocumentEmlToPng)
    call_convertDocumentEmlToPng
    ;;
    convertDocumentGetFileTypeIcon)
    call_convertDocumentGetFileTypeIcon
    ;;
    convertDocumentGetFileTypeIconAdvanced)
    call_convertDocumentGetFileTypeIconAdvanced
    ;;
    convertDocumentHtmlToPdf)
    call_convertDocumentHtmlToPdf
    ;;
    convertDocumentHtmlToPng)
    call_convertDocumentHtmlToPng
    ;;
    convertDocumentHtmlToTxt)
    call_convertDocumentHtmlToTxt
    ;;
    convertDocumentKeynoteToJpg)
    call_convertDocumentKeynoteToJpg
    ;;
    convertDocumentKeynoteToPdf)
    call_convertDocumentKeynoteToPdf
    ;;
    convertDocumentKeynoteToPng)
    call_convertDocumentKeynoteToPng
    ;;
    convertDocumentKeynoteToPptx)
    call_convertDocumentKeynoteToPptx
    ;;
    convertDocumentMsgToHtml)
    call_convertDocumentMsgToHtml
    ;;
    convertDocumentMsgToJpg)
    call_convertDocumentMsgToJpg
    ;;
    convertDocumentMsgToPdf)
    call_convertDocumentMsgToPdf
    ;;
    convertDocumentMsgToPng)
    call_convertDocumentMsgToPng
    ;;
    convertDocumentOdpToJpg)
    call_convertDocumentOdpToJpg
    ;;
    convertDocumentOdpToPdf)
    call_convertDocumentOdpToPdf
    ;;
    convertDocumentOdpToPng)
    call_convertDocumentOdpToPng
    ;;
    convertDocumentOdpToPptx)
    call_convertDocumentOdpToPptx
    ;;
    convertDocumentOdsToJpg)
    call_convertDocumentOdsToJpg
    ;;
    convertDocumentOdsToPdf)
    call_convertDocumentOdsToPdf
    ;;
    convertDocumentOdsToPng)
    call_convertDocumentOdsToPng
    ;;
    convertDocumentOdsToXlsx)
    call_convertDocumentOdsToXlsx
    ;;
    convertDocumentOdtToDocx)
    call_convertDocumentOdtToDocx
    ;;
    convertDocumentOdtToJpg)
    call_convertDocumentOdtToJpg
    ;;
    convertDocumentOdtToPdf)
    call_convertDocumentOdtToPdf
    ;;
    convertDocumentOdtToPng)
    call_convertDocumentOdtToPng
    ;;
    convertDocumentPdfToDocx)
    call_convertDocumentPdfToDocx
    ;;
    convertDocumentPdfToDocxRasterize)
    call_convertDocumentPdfToDocxRasterize
    ;;
    convertDocumentPdfToJpg)
    call_convertDocumentPdfToJpg
    ;;
    convertDocumentPdfToPngArray)
    call_convertDocumentPdfToPngArray
    ;;
    convertDocumentPdfToPngSingle)
    call_convertDocumentPdfToPngSingle
    ;;
    convertDocumentPdfToPptx)
    call_convertDocumentPdfToPptx
    ;;
    convertDocumentPdfToTxt)
    call_convertDocumentPdfToTxt
    ;;
    convertDocumentPngArrayToPdf)
    call_convertDocumentPngArrayToPdf
    ;;
    convertDocumentPptToPdf)
    call_convertDocumentPptToPdf
    ;;
    convertDocumentPptToPptx)
    call_convertDocumentPptToPptx
    ;;
    convertDocumentPptxToPdf)
    call_convertDocumentPptxToPdf
    ;;
    convertDocumentPptxToPng)
    call_convertDocumentPptxToPng
    ;;
    convertDocumentPptxToTxt)
    call_convertDocumentPptxToTxt
    ;;
    convertDocumentRtfToDocx)
    call_convertDocumentRtfToDocx
    ;;
    convertDocumentRtfToHtml)
    call_convertDocumentRtfToHtml
    ;;
    convertDocumentRtfToJpg)
    call_convertDocumentRtfToJpg
    ;;
    convertDocumentRtfToPdf)
    call_convertDocumentRtfToPdf
    ;;
    convertDocumentRtfToPng)
    call_convertDocumentRtfToPng
    ;;
    convertDocumentXlsToCsv)
    call_convertDocumentXlsToCsv
    ;;
    convertDocumentXlsToPdf)
    call_convertDocumentXlsToPdf
    ;;
    convertDocumentXlsToXlsx)
    call_convertDocumentXlsToXlsx
    ;;
    convertDocumentXlsxToCsv)
    call_convertDocumentXlsxToCsv
    ;;
    convertDocumentXlsxToCsvMulti)
    call_convertDocumentXlsxToCsvMulti
    ;;
    convertDocumentXlsxToPdf)
    call_convertDocumentXlsxToPdf
    ;;
    convertDocumentXlsxToPng)
    call_convertDocumentXlsxToPng
    ;;
    convertDocumentXlsxToTxt)
    call_convertDocumentXlsxToTxt
    ;;
    convertImageGetImageInfo)
    call_convertImageGetImageInfo
    ;;
    convertImageImageFormatConvert)
    call_convertImageImageFormatConvert
    ;;
    convertImageImageSetDPI)
    call_convertImageImageSetDPI
    ;;
    convertImageMultipageImageFormatConvert)
    call_convertImageMultipageImageFormatConvert
    ;;
    convertTemplateApplyDocxTemplate)
    call_convertTemplateApplyDocxTemplate
    ;;
    convertTemplateApplyHtmlTemplate)
    call_convertTemplateApplyHtmlTemplate
    ;;
    convertWebHtmlToDocx)
    call_convertWebHtmlToDocx
    ;;
    convertWebHtmlToPdf)
    call_convertWebHtmlToPdf
    ;;
    convertWebHtmlToPng)
    call_convertWebHtmlToPng
    ;;
    convertWebHtmlToTxt)
    call_convertWebHtmlToTxt
    ;;
    convertWebMdToHtml)
    call_convertWebMdToHtml
    ;;
    convertWebUrlToPdf)
    call_convertWebUrlToPdf
    ;;
    convertWebUrlToScreenshot)
    call_convertWebUrlToScreenshot
    ;;
    convertWebUrlToTxt)
    call_convertWebUrlToTxt
    ;;
    editDocumentBeginEditing)
    call_editDocumentBeginEditing
    ;;
    editDocumentDocxBody)
    call_editDocumentDocxBody
    ;;
    editDocumentDocxCreateBlankDocument)
    call_editDocumentDocxCreateBlankDocument
    ;;
    editDocumentDocxDeletePages)
    call_editDocumentDocxDeletePages
    ;;
    editDocumentDocxDeleteTableRow)
    call_editDocumentDocxDeleteTableRow
    ;;
    editDocumentDocxDeleteTableRowRange)
    call_editDocumentDocxDeleteTableRowRange
    ;;
    editDocumentDocxFindParagraph)
    call_editDocumentDocxFindParagraph
    ;;
    editDocumentDocxGetComments)
    call_editDocumentDocxGetComments
    ;;
    editDocumentDocxGetCommentsHierarchical)
    call_editDocumentDocxGetCommentsHierarchical
    ;;
    editDocumentDocxGetHeadersAndFooters)
    call_editDocumentDocxGetHeadersAndFooters
    ;;
    editDocumentDocxGetImages)
    call_editDocumentDocxGetImages
    ;;
    editDocumentDocxGetSections)
    call_editDocumentDocxGetSections
    ;;
    editDocumentDocxGetStyles)
    call_editDocumentDocxGetStyles
    ;;
    editDocumentDocxGetTableByIndex)
    call_editDocumentDocxGetTableByIndex
    ;;
    editDocumentDocxGetTableRow)
    call_editDocumentDocxGetTableRow
    ;;
    editDocumentDocxGetTables)
    call_editDocumentDocxGetTables
    ;;
    editDocumentDocxInsertCommentOnParagraph)
    call_editDocumentDocxInsertCommentOnParagraph
    ;;
    editDocumentDocxInsertImage)
    call_editDocumentDocxInsertImage
    ;;
    editDocumentDocxInsertParagraph)
    call_editDocumentDocxInsertParagraph
    ;;
    editDocumentDocxInsertTable)
    call_editDocumentDocxInsertTable
    ;;
    editDocumentDocxInsertTableRow)
    call_editDocumentDocxInsertTableRow
    ;;
    editDocumentDocxPages)
    call_editDocumentDocxPages
    ;;
    editDocumentDocxRemoveHeadersAndFooters)
    call_editDocumentDocxRemoveHeadersAndFooters
    ;;
    editDocumentDocxRemoveObject)
    call_editDocumentDocxRemoveObject
    ;;
    editDocumentDocxReplace)
    call_editDocumentDocxReplace
    ;;
    editDocumentDocxReplaceParagraph)
    call_editDocumentDocxReplaceParagraph
    ;;
    editDocumentDocxSetFooter)
    call_editDocumentDocxSetFooter
    ;;
    editDocumentDocxSetFooterAddPageNumber)
    call_editDocumentDocxSetFooterAddPageNumber
    ;;
    editDocumentDocxSetHeader)
    call_editDocumentDocxSetHeader
    ;;
    editDocumentDocxUpdateTableCell)
    call_editDocumentDocxUpdateTableCell
    ;;
    editDocumentDocxUpdateTableRow)
    call_editDocumentDocxUpdateTableRow
    ;;
    editDocumentFinishEditing)
    call_editDocumentFinishEditing
    ;;
    editDocumentPptxDeleteSlides)
    call_editDocumentPptxDeleteSlides
    ;;
    editDocumentPptxReplace)
    call_editDocumentPptxReplace
    ;;
    editDocumentXlsxAppendRow)
    call_editDocumentXlsxAppendRow
    ;;
    editDocumentXlsxClearCellByIndex)
    call_editDocumentXlsxClearCellByIndex
    ;;
    editDocumentXlsxClearRow)
    call_editDocumentXlsxClearRow
    ;;
    editDocumentXlsxCreateBlankSpreadsheet)
    call_editDocumentXlsxCreateBlankSpreadsheet
    ;;
    editDocumentXlsxCreateSpreadsheetFromData)
    call_editDocumentXlsxCreateSpreadsheetFromData
    ;;
    editDocumentXlsxDeleteWorksheet)
    call_editDocumentXlsxDeleteWorksheet
    ;;
    editDocumentXlsxDisableSharedWorkbook)
    call_editDocumentXlsxDisableSharedWorkbook
    ;;
    editDocumentXlsxEnableSharedWorkbook)
    call_editDocumentXlsxEnableSharedWorkbook
    ;;
    editDocumentXlsxGetCellByIdentifier)
    call_editDocumentXlsxGetCellByIdentifier
    ;;
    editDocumentXlsxGetCellByIndex)
    call_editDocumentXlsxGetCellByIndex
    ;;
    editDocumentXlsxGetColumns)
    call_editDocumentXlsxGetColumns
    ;;
    editDocumentXlsxGetImages)
    call_editDocumentXlsxGetImages
    ;;
    editDocumentXlsxGetRowsAndCells)
    call_editDocumentXlsxGetRowsAndCells
    ;;
    editDocumentXlsxGetSpecificRow)
    call_editDocumentXlsxGetSpecificRow
    ;;
    editDocumentXlsxGetStyles)
    call_editDocumentXlsxGetStyles
    ;;
    editDocumentXlsxGetWorksheets)
    call_editDocumentXlsxGetWorksheets
    ;;
    editDocumentXlsxInsertWorksheet)
    call_editDocumentXlsxInsertWorksheet
    ;;
    editDocumentXlsxRenameWorksheet)
    call_editDocumentXlsxRenameWorksheet
    ;;
    editDocumentXlsxSetCellByIdentifier)
    call_editDocumentXlsxSetCellByIdentifier
    ;;
    editDocumentXlsxSetCellByIndex)
    call_editDocumentXlsxSetCellByIndex
    ;;
    editPdfAddAnnotations)
    call_editPdfAddAnnotations
    ;;
    editPdfDecrypt)
    call_editPdfDecrypt
    ;;
    editPdfDeletePages)
    call_editPdfDeletePages
    ;;
    editPdfEncrypt)
    call_editPdfEncrypt
    ;;
    editPdfGetAnnotations)
    call_editPdfGetAnnotations
    ;;
    editPdfGetFormFields)
    call_editPdfGetFormFields
    ;;
    editPdfGetMetadata)
    call_editPdfGetMetadata
    ;;
    editPdfGetPdfTextByPages)
    call_editPdfGetPdfTextByPages
    ;;
    editPdfInsertPages)
    call_editPdfInsertPages
    ;;
    editPdfRasterize)
    call_editPdfRasterize
    ;;
    editPdfRemoveAllAnnotations)
    call_editPdfRemoveAllAnnotations
    ;;
    editPdfRemoveAnnotationItem)
    call_editPdfRemoveAnnotationItem
    ;;
    editPdfRotateAllPages)
    call_editPdfRotateAllPages
    ;;
    editPdfRotatePageRange)
    call_editPdfRotatePageRange
    ;;
    editPdfSetFormFields)
    call_editPdfSetFormFields
    ;;
    editPdfSetMetadata)
    call_editPdfSetMetadata
    ;;
    editPdfSetPermissions)
    call_editPdfSetPermissions
    ;;
    editPdfWatermarkText)
    call_editPdfWatermarkText
    ;;
    editTextBase64Decode)
    call_editTextBase64Decode
    ;;
    editTextBase64Detect)
    call_editTextBase64Detect
    ;;
    editTextBase64Encode)
    call_editTextBase64Encode
    ;;
    editTextChangeLineEndings)
    call_editTextChangeLineEndings
    ;;
    editTextDetectLineEndings)
    call_editTextDetectLineEndings
    ;;
    editTextFindRegex)
    call_editTextFindRegex
    ;;
    editTextFindSimple)
    call_editTextFindSimple
    ;;
    editTextRemoveAllWhitespace)
    call_editTextRemoveAllWhitespace
    ;;
    editTextRemoveHtml)
    call_editTextRemoveHtml
    ;;
    editTextReplaceRegex)
    call_editTextReplaceRegex
    ;;
    editTextReplaceSimple)
    call_editTextReplaceSimple
    ;;
    editTextTextEncodingDetect)
    call_editTextTextEncodingDetect
    ;;
    editTextTrimWhitespace)
    call_editTextTrimWhitespace
    ;;
    mergeDocumentDocx)
    call_mergeDocumentDocx
    ;;
    mergeDocumentDocxMulti)
    call_mergeDocumentDocxMulti
    ;;
    mergeDocumentPdf)
    call_mergeDocumentPdf
    ;;
    mergeDocumentPdfMulti)
    call_mergeDocumentPdfMulti
    ;;
    mergeDocumentPng)
    call_mergeDocumentPng
    ;;
    mergeDocumentPngMulti)
    call_mergeDocumentPngMulti
    ;;
    mergeDocumentPptx)
    call_mergeDocumentPptx
    ;;
    mergeDocumentPptxMulti)
    call_mergeDocumentPptxMulti
    ;;
    mergeDocumentTxt)
    call_mergeDocumentTxt
    ;;
    mergeDocumentTxtMulti)
    call_mergeDocumentTxtMulti
    ;;
    mergeDocumentXlsx)
    call_mergeDocumentXlsx
    ;;
    mergeDocumentXlsxMulti)
    call_mergeDocumentXlsxMulti
    ;;
    splitDocumentDocx)
    call_splitDocumentDocx
    ;;
    splitDocumentPdfByPage)
    call_splitDocumentPdfByPage
    ;;
    splitDocumentPptx)
    call_splitDocumentPptx
    ;;
    splitDocumentTxtByLine)
    call_splitDocumentTxtByLine
    ;;
    splitDocumentTxtByString)
    call_splitDocumentTxtByString
    ;;
    splitDocumentXlsx)
    call_splitDocumentXlsx
    ;;
    validateDocumentAutodetectValidation)
    call_validateDocumentAutodetectValidation
    ;;
    validateDocumentCsvValidation)
    call_validateDocumentCsvValidation
    ;;
    validateDocumentDocxValidation)
    call_validateDocumentDocxValidation
    ;;
    validateDocumentEmlValidation)
    call_validateDocumentEmlValidation
    ;;
    validateDocumentExecutableValidation)
    call_validateDocumentExecutableValidation
    ;;
    validateDocumentGZipValidation)
    call_validateDocumentGZipValidation
    ;;
    validateDocumentJsonValidation)
    call_validateDocumentJsonValidation
    ;;
    validateDocumentMsgValidation)
    call_validateDocumentMsgValidation
    ;;
    validateDocumentPdfValidation)
    call_validateDocumentPdfValidation
    ;;
    validateDocumentPptxValidation)
    call_validateDocumentPptxValidation
    ;;
    validateDocumentRarValidation)
    call_validateDocumentRarValidation
    ;;
    validateDocumentTarValidation)
    call_validateDocumentTarValidation
    ;;
    validateDocumentXlsxValidation)
    call_validateDocumentXlsxValidation
    ;;
    validateDocumentXmlValidation)
    call_validateDocumentXmlValidation
    ;;
    validateDocumentZipValidation)
    call_validateDocumentZipValidation
    ;;
    viewerToolsCreateSimple)
    call_viewerToolsCreateSimple
    ;;
    zipArchiveZipCreate)
    call_zipArchiveZipCreate
    ;;
    zipArchiveZipCreateAdvanced)
    call_zipArchiveZipCreateAdvanced
    ;;
    zipArchiveZipDecrypt)
    call_zipArchiveZipDecrypt
    ;;
    zipArchiveZipEncryptAdvanced)
    call_zipArchiveZipEncryptAdvanced
    ;;
    zipArchiveZipExtract)
    call_zipArchiveZipExtract
    ;;
    *)
    ERROR_MSG="ERROR: Unknown operation: $operation"
    exit 1
esac
